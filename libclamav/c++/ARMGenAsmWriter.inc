//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void ARMAsmPrinter::printInstruction(const MachineInstr *MI) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// DBG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DEBUG_VALUE
    134217741U,	// ADCSSri
    134217741U,	// ADCSSrr
    134217741U,	// ADCSSrs
    269516819U,	// ADCri
    269549587U,	// ADCrr
    404750355U,	// ADCrs
    271679511U,	// ADDSri
    271679511U,	// ADDSrr
    405897239U,	// ADDSrs
    269516828U,	// ADDri
    269549596U,	// ADDrr
    404750364U,	// ADDrs
    138412064U,	// ADJCALLSTACKDOWN
    138412084U,	// ADJCALLSTACKUP
    269516870U,	// ANDri
    269549638U,	// ANDrr
    404750406U,	// ANDrs
    542113866U,	// ATOMIC_CMP_SWAP_I16
    543162442U,	// ATOMIC_CMP_SWAP_I32
    544211018U,	// ATOMIC_CMP_SWAP_I8
    545259594U,	// ATOMIC_LOAD_ADD_I16
    546308170U,	// ATOMIC_LOAD_ADD_I32
    547356746U,	// ATOMIC_LOAD_ADD_I8
    548405322U,	// ATOMIC_LOAD_AND_I16
    549453898U,	// ATOMIC_LOAD_AND_I32
    550502474U,	// ATOMIC_LOAD_AND_I8
    551551050U,	// ATOMIC_LOAD_NAND_I16
    552599626U,	// ATOMIC_LOAD_NAND_I32
    553648202U,	// ATOMIC_LOAD_NAND_I8
    554696778U,	// ATOMIC_LOAD_OR_I16
    555745354U,	// ATOMIC_LOAD_OR_I32
    556793930U,	// ATOMIC_LOAD_OR_I8
    557842506U,	// ATOMIC_LOAD_SUB_I16
    558891082U,	// ATOMIC_LOAD_SUB_I32
    559939658U,	// ATOMIC_LOAD_SUB_I8
    560988234U,	// ATOMIC_LOAD_XOR_I16
    562036810U,	// ATOMIC_LOAD_XOR_I32
    563085386U,	// ATOMIC_LOAD_XOR_I8
    564133962U,	// ATOMIC_SWAP_I16
    565182538U,	// ATOMIC_SWAP_I32
    566231114U,	// ATOMIC_SWAP_I8
    138412107U,	// B
    271679566U,	// BFC
    269516882U,	// BICri
    269549650U,	// BICrr
    404750418U,	// BICrs
    671088726U,	// BL
    138412122U,	// BLX
    138412122U,	// BLXr9
    808583263U,	// BL_pred
    671088726U,	// BLr9
    808583263U,	// BLr9_pred
    138412130U,	// BRIND
    134217830U,	// BR_JTadd
    939524207U,	// BR_JTm
    164626552U,	// BR_JTr
    138412161U,	// BX
    1105199249U,	// BX_RET
    138412161U,	// BXr9
    808550548U,	// Bcc
    1211203734U,	// CLZ
    1211203738U,	// CMNzri
    1211203738U,	// CMNzrr
    1345421466U,	// CMNzrs
    1211203742U,	// CMPri
    1211203742U,	// CMPrr
    1345421470U,	// CMPrs
    1211203742U,	// CMPzri
    1211203742U,	// CMPzrr
    1345421470U,	// CMPzrs
    1476395082U,	// CONSTPOOL_ENTRY
    269516962U,	// EORri
    269549730U,	// EORrr
    404750498U,	// EORrs
    1240629414U,	// FCONSTD
    1241677990U,	// FCONSTS
    1108345003U,	// FMSTAT
    169869488U,	// Int_MemBarrierV6
    189U,	// Int_MemBarrierV7
    170918064U,	// Int_SyncBarrierV6
    193U,	// Int_SyncBarrierV7
    171966661U,	// Int_eh_sjlj_setjmp
    1613955279U,	// LDM
    1613955279U,	// LDM_RET
    1345421523U,	// LDR
    1345421527U,	// LDRB
    405897431U,	// LDRB_POST
    405897431U,	// LDRB_PRE
    405897436U,	// LDRD
    1211203809U,	// LDREX
    1211203815U,	// LDREXB
    271679726U,	// LDREXD
    1211203829U,	// LDREXH
    1345421564U,	// LDRH
    405897468U,	// LDRH_POST
    405897468U,	// LDRH_PRE
    1345421569U,	// LDRSB
    405897473U,	// LDRSB_POST
    405897473U,	// LDRSB_PRE
    1345421575U,	// LDRSH
    405897479U,	// LDRSH_POST
    405897479U,	// LDRSH_PRE
    405897427U,	// LDR_POST
    405897427U,	// LDR_PRE
    1345421523U,	// LDRcp
    1783628045U,	// LEApcrel
    1784676621U,	// LEApcrelJT
    1383072019U,	// MLA
    1345421591U,	// MLS
    271679771U,	// MOVCCi
    271679771U,	// MOVCCr
    405897499U,	// MOVCCs
    271679775U,	// MOVTi16
    1250132251U,	// MOVi
    1211203876U,	// MOVi16
    1211203867U,	// MOVi2pieces
    1211203876U,	// MOVi32imm
    1249902875U,	// MOVr
    1249902875U,	// MOVrx
    1383334171U,	// MOVs
    1211203881U,	// MOVsra_flag
    1211203881U,	// MOVsrl_flag
    269549870U,	// MUL
    1250132274U,	// MVNi
    1249902898U,	// MVNr
    1383334194U,	// MVNs
    269517110U,	// ORRri
    269549878U,	// ORRrr
    404750646U,	// ORRrs
    1922040122U,	// PICADD
    2057306426U,	// PICLDR
    2058355002U,	// PICLDRB
    2059403578U,	// PICLDRH
    2060452154U,	// PICLDRSB
    2061500730U,	// PICLDRSH
    2062549306U,	// PICSTR
    2063597882U,	// PICSTRB
    2064646458U,	// PICSTRH
    1345421628U,	// PKHBT
    1345421634U,	// PKHTB
    1211203912U,	// RBIT
    1211203917U,	// REV
    1211203921U,	// REV16
    1211203927U,	// REVSH
    271679837U,	// RSBSri
    405897565U,	// RSBSrs
    269517154U,	// RSBri
    404750690U,	// RSBrs
    134218086U,	// RSCSri
    134218086U,	// RSCSrs
    269517164U,	// RSCri
    404750700U,	// RSCrs
    134218096U,	// SBCSSri
    134218096U,	// SBCSSrr
    134218096U,	// SBCSSrs
    269517174U,	// SBCri
    269549942U,	// SBCrr
    404750710U,	// SBCrs
    1345421690U,	// SBFX
    1345421695U,	// SMLABB
    1345421702U,	// SMLABT
    1383072141U,	// SMLAL
    1345421715U,	// SMLATB
    1345421722U,	// SMLATT
    1345421729U,	// SMLAWB
    1345421736U,	// SMLAWT
    1345421743U,	// SMMLA
    1345421749U,	// SMMLS
    271679931U,	// SMMUL
    271679937U,	// SMULBB
    271679944U,	// SMULBT
    1383072207U,	// SMULL
    271679957U,	// SMULTB
    271679964U,	// SMULTT
    271679971U,	// SMULWB
    271679978U,	// SMULWT
    1613955569U,	// STM
    1345421813U,	// STR
    1345421817U,	// STRB
    405799417U,	// STRB_POST
    405799417U,	// STRB_PRE
    405897726U,	// STRD
    271680003U,	// STREX
    271680009U,	// STREXB
    1345421840U,	// STREXD
    271680023U,	// STREXH
    1345421854U,	// STRH
    405799454U,	// STRH_POST
    405799454U,	// STRH_PRE
    405799413U,	// STR_POST
    405799413U,	// STR_PRE
    271680035U,	// SUBSri
    271680035U,	// SUBSrr
    405897763U,	// SUBSrs
    269517352U,	// SUBri
    269550120U,	// SUBrr
    404750888U,	// SUBrs
    271680044U,	// SXTABrr
    1345421868U,	// SXTABrr_rot
    271680050U,	// SXTAHrr
    1345421874U,	// SXTAHrr_rot
    1211204152U,	// SXTBr
    271680056U,	// SXTBr_rot
    1211204157U,	// SXTHr
    271680061U,	// SXTHr_rot
    1211204162U,	// TEQri
    1211204162U,	// TEQrr
    1345421890U,	// TEQrs
    582U,	// TPsoft
    1211204185U,	// TSTri
    1211204185U,	// TSTrr
    1345421913U,	// TSTrs
    1345421917U,	// UBFX
    1345421922U,	// UMAAL
    1383072360U,	// UMLAL
    1383072366U,	// UMULL
    271680116U,	// UXTABrr
    1345421940U,	// UXTABrr_rot
    271680122U,	// UXTAHrr
    1345421946U,	// UXTAHrr_rot
    1211204224U,	// UXTB16r
    271680128U,	// UXTB16r_rot
    1211204231U,	// UXTBr
    271680135U,	// UXTBr_rot
    1211204236U,	// UXTHr
    271680140U,	// UXTHr_rot
    1394672273U,	// VABALsv2i64
    1395720849U,	// VABALsv4i32
    1396769425U,	// VABALsv8i16
    1397818001U,	// VABALuv2i64
    1398866577U,	// VABALuv4i32
    1399915153U,	// VABALuv8i16
    1396769431U,	// VABAsv16i8
    1394672279U,	// VABAsv2i32
    1395720855U,	// VABAsv4i16
    1394672279U,	// VABAsv4i32
    1395720855U,	// VABAsv8i16
    1396769431U,	// VABAsv8i8
    1399915159U,	// VABAuv16i8
    1397818007U,	// VABAuv2i32
    1398866583U,	// VABAuv4i16
    1397818007U,	// VABAuv4i32
    1398866583U,	// VABAuv8i16
    1399915159U,	// VABAuv8i8
    320864924U,	// VABDLsv2i64
    321913500U,	// VABDLsv4i32
    322962076U,	// VABDLsv8i16
    324010652U,	// VABDLuv2i64
    325059228U,	// VABDLuv4i32
    326107804U,	// VABDLuv8i16
    302154402U,	// VABDfd
    302154402U,	// VABDfq
    322962082U,	// VABDsv16i8
    320864930U,	// VABDsv2i32
    321913506U,	// VABDsv4i16
    320864930U,	// VABDsv4i32
    321913506U,	// VABDsv8i16
    322962082U,	// VABDsv8i8
    326107810U,	// VABDuv16i8
    324010658U,	// VABDuv2i32
    325059234U,	// VABDuv4i16
    324010658U,	// VABDuv4i32
    325059234U,	// VABDuv8i16
    326107810U,	// VABDuv8i8
    1240629927U,	// VABSD
    1241678503U,	// VABSS
    1241678503U,	// VABSfd
    1241678503U,	// VABSfd_sfp
    1241678503U,	// VABSfq
    1262486183U,	// VABSv16i8
    1260389031U,	// VABSv2i32
    1261437607U,	// VABSv4i16
    1260389031U,	// VABSv4i32
    1261437607U,	// VABSv8i16
    1262486183U,	// VABSv8i8
    302154412U,	// VACGEd
    302154412U,	// VACGEq
    302154418U,	// VACGTd
    302154418U,	// VACGTq
    301105848U,	// VADDD
    327156413U,	// VADDHNv2i32
    328204989U,	// VADDHNv4i16
    329253565U,	// VADDHNv8i8
    320864964U,	// VADDLsv2i64
    321913540U,	// VADDLsv4i32
    322962116U,	// VADDLsv8i16
    324010692U,	// VADDLuv2i64
    325059268U,	// VADDLuv4i32
    326107844U,	// VADDLuv8i16
    302154424U,	// VADDS
    320864970U,	// VADDWsv2i64
    321913546U,	// VADDWsv4i32
    322962122U,	// VADDWsv8i16
    324010698U,	// VADDWuv2i64
    325059274U,	// VADDWuv4i32
    326107850U,	// VADDWuv8i16
    302154424U,	// VADDfd
    302154424U,	// VADDfd_sfp
    302154424U,	// VADDfq
    330302136U,	// VADDv16i8
    327156408U,	// VADDv1i64
    328204984U,	// VADDv2i32
    327156408U,	// VADDv2i64
    329253560U,	// VADDv4i16
    328204984U,	// VADDv4i32
    329253560U,	// VADDv8i16
    330302136U,	// VADDv8i8
    271680208U,	// VANDd
    271680208U,	// VANDq
    271680213U,	// VBICd
    271680213U,	// VBICq
    1345422042U,	// VBSLd
    1345422042U,	// VBSLq
    302154463U,	// VCEQfd
    302154463U,	// VCEQfq
    330302175U,	// VCEQv16i8
    328205023U,	// VCEQv2i32
    329253599U,	// VCEQv4i16
    328205023U,	// VCEQv4i32
    329253599U,	// VCEQv8i16
    330302175U,	// VCEQv8i8
    302154468U,	// VCGEfd
    302154468U,	// VCGEfq
    322962148U,	// VCGEsv16i8
    320864996U,	// VCGEsv2i32
    321913572U,	// VCGEsv4i16
    320864996U,	// VCGEsv4i32
    321913572U,	// VCGEsv8i16
    322962148U,	// VCGEsv8i8
    326107876U,	// VCGEuv16i8
    324010724U,	// VCGEuv2i32
    325059300U,	// VCGEuv4i16
    324010724U,	// VCGEuv4i32
    325059300U,	// VCGEuv8i16
    326107876U,	// VCGEuv8i8
    302154473U,	// VCGTfd
    302154473U,	// VCGTfq
    322962153U,	// VCGTsv16i8
    320865001U,	// VCGTsv2i32
    321913577U,	// VCGTsv4i16
    320865001U,	// VCGTsv4i32
    321913577U,	// VCGTsv8i16
    322962153U,	// VCGTsv8i8
    326107881U,	// VCGTuv16i8
    324010729U,	// VCGTuv2i32
    325059305U,	// VCGTuv4i16
    324010729U,	// VCGTuv4i32
    325059305U,	// VCGTuv8i16
    326107881U,	// VCGTuv8i8
    1262486254U,	// VCLSv16i8
    1260389102U,	// VCLSv2i32
    1261437678U,	// VCLSv4i16
    1260389102U,	// VCLSv4i32
    1261437678U,	// VCLSv8i16
    1262486254U,	// VCLSv8i8
    1269826291U,	// VCLZv16i8
    1267729139U,	// VCLZv2i32
    1268777715U,	// VCLZv4i16
    1267729139U,	// VCLZv4i32
    1268777715U,	// VCLZv8i16
    1269826291U,	// VCLZv8i8
    1240630008U,	// VCMPED
    1241678584U,	// VCMPES
    838107896U,	// VCMPEZD
    839156472U,	// VCMPEZS
    1270973182U,	// VCNTd
    1270973182U,	// VCNTq
    1271923459U,	// VCVTDS
    1272972035U,	// VCVTSD
    1274348291U,	// VCVTf2sd
    1274348291U,	// VCVTf2sd_sfp
    1274348291U,	// VCVTf2sq
    1275396867U,	// VCVTf2ud
    1275396867U,	// VCVTf2ud_sfp
    1275396867U,	// VCVTf2uq
    334660355U,	// VCVTf2xsd
    334660355U,	// VCVTf2xsq
    335708931U,	// VCVTf2xud
    335708931U,	// VCVTf2xuq
    1276445443U,	// VCVTs2fd
    1276445443U,	// VCVTs2fd_sfp
    1276445443U,	// VCVTs2fq
    1277494019U,	// VCVTu2fd
    1277494019U,	// VCVTu2fd_sfp
    1277494019U,	// VCVTu2fq
    336757507U,	// VCVTxs2fd
    336757507U,	// VCVTxs2fq
    337806083U,	// VCVTxu2fd
    337806083U,	// VCVTxu2fq
    301105928U,	// VDIVD
    302154504U,	// VDIVS
    1278313229U,	// VDUP16d
    1278313229U,	// VDUP16q
    1279361805U,	// VDUP32d
    1279361805U,	// VDUP32q
    1270973197U,	// VDUP8d
    1270973197U,	// VDUP8q
    338789133U,	// VDUPLN16d
    338789133U,	// VDUPLN16q
    339837709U,	// VDUPLN32d
    339837709U,	// VDUPLN32q
    331449101U,	// VDUPLN8d
    331449101U,	// VDUPLN8q
    339837709U,	// VDUPLNfd
    339837709U,	// VDUPLNfq
    1279361805U,	// VDUPfd
    1279361805U,	// VDUPfdf
    1279361805U,	// VDUPfq
    1279361805U,	// VDUPfqf
    271680274U,	// VEORd
    271680274U,	// VEORq
    1412530967U,	// VEXTd16
    1413579543U,	// VEXTd32
    1405190935U,	// VEXTd8
    1413579543U,	// VEXTdf
    1412530967U,	// VEXTq16
    1413579543U,	// VEXTq32
    1405190935U,	// VEXTq8
    1413579543U,	// VEXTqf
    339837094U,	// VGETLNi32
    321912998U,	// VGETLNs16
    322961574U,	// VGETLNs8
    325058726U,	// VGETLNu16
    326107302U,	// VGETLNu8
    322962204U,	// VHADDsv16i8
    320865052U,	// VHADDsv2i32
    321913628U,	// VHADDsv4i16
    320865052U,	// VHADDsv4i32
    321913628U,	// VHADDsv8i16
    322962204U,	// VHADDsv8i8
    326107932U,	// VHADDuv16i8
    324010780U,	// VHADDuv2i32
    325059356U,	// VHADDuv4i16
    324010780U,	// VHADDuv4i32
    325059356U,	// VHADDuv8i16
    326107932U,	// VHADDuv8i8
    322962210U,	// VHSUBsv16i8
    320865058U,	// VHSUBsv2i32
    321913634U,	// VHSUBsv4i16
    320865058U,	// VHSUBsv4i32
    321913634U,	// VHSUBsv8i16
    322962210U,	// VHSUBsv8i8
    326107938U,	// VHSUBuv16i8
    324010786U,	// VHSUBuv2i32
    325059362U,	// VHSUBuv4i16
    324010786U,	// VHSUBuv4i32
    325059362U,	// VHSUBuv8i16
    326107938U,	// VHSUBuv8i8
    475104040U,	// VLD1d16
    476152616U,	// VLD1d32
    477201192U,	// VLD1d64
    478249768U,	// VLD1d8
    476152616U,	// VLD1df
    473269032U,	// VLD1q16
    474317608U,	// VLD1q32
    479560488U,	// VLD1q64
    465929000U,	// VLD1q8
    474317608U,	// VLD1qf
    2219934509U,	// VLD2LNd16
    2220983085U,	// VLD2LNd32
    2223080237U,	// VLD2LNd8
    2219934509U,	// VLD2LNq16a
    2219934509U,	// VLD2LNq16b
    2220983085U,	// VLD2LNq32a
    2220983085U,	// VLD2LNq32b
    2354152237U,	// VLD2d16
    2355200813U,	// VLD2d32
    2356249384U,	// VLD2d64
    2357297965U,	// VLD2d8
    2488369965U,	// VLD2q16
    2489418541U,	// VLD2q32
    2491515693U,	// VLD2q8
    2622587698U,	// VLD3LNd16
    2623636274U,	// VLD3LNd32
    2625733426U,	// VLD3LNd8
    2622587698U,	// VLD3LNq16a
    2622587698U,	// VLD3LNq16b
    2623636274U,	// VLD3LNq32a
    2623636274U,	// VLD3LNq32b
    2756805426U,	// VLD3d16
    2757854002U,	// VLD3d32
    2758902568U,	// VLD3d64
    2759951154U,	// VLD3d8
    2488369970U,	// VLD3q16a
    2488369970U,	// VLD3q16b
    2489418546U,	// VLD3q32a
    2489418546U,	// VLD3q32b
    2491515698U,	// VLD3q8a
    2491515698U,	// VLD3q8b
    2891023159U,	// VLD4LNd16
    2892071735U,	// VLD4LNd32
    2894168887U,	// VLD4LNd8
    2891023159U,	// VLD4LNq16a
    2891023159U,	// VLD4LNq16b
    2892071735U,	// VLD4LNq32a
    2892071735U,	// VLD4LNq32b
    2488369975U,	// VLD4d16
    2489418551U,	// VLD4d32
    2490467112U,	// VLD4d64
    2491515703U,	// VLD4d8
    2219934519U,	// VLD4q16a
    2219934519U,	// VLD4q16b
    2220983095U,	// VLD4q32a
    2220983095U,	// VLD4q32b
    2223080247U,	// VLD4q8a
    2223080247U,	// VLD4q8b
    2952790844U,	// VLDMD
    2952790844U,	// VLDMS
    345080641U,	// VLDRD
    271975238U,	// VLDRQ
    339837761U,	// VLDRS
    302154573U,	// VMAXfd
    302154573U,	// VMAXfq
    322962253U,	// VMAXsv16i8
    320865101U,	// VMAXsv2i32
    321913677U,	// VMAXsv4i16
    320865101U,	// VMAXsv4i32
    321913677U,	// VMAXsv8i16
    322962253U,	// VMAXsv8i8
    326107981U,	// VMAXuv16i8
    324010829U,	// VMAXuv2i32
    325059405U,	// VMAXuv4i16
    324010829U,	// VMAXuv4i32
    325059405U,	// VMAXuv8i16
    326107981U,	// VMAXuv8i8
    302154578U,	// VMINfd
    302154578U,	// VMINfq
    322962258U,	// VMINsv16i8
    320865106U,	// VMINsv2i32
    321913682U,	// VMINsv4i16
    320865106U,	// VMINsv4i32
    321913682U,	// VMINsv8i16
    322962258U,	// VMINsv8i8
    326107986U,	// VMINuv16i8
    324010834U,	// VMINuv2i32
    325059410U,	// VMINuv4i16
    324010834U,	// VMINuv4i32
    325059410U,	// VMINuv8i16
    326107986U,	// VMINuv8i8
    1374847831U,	// VMLAD
    455148380U,	// VMLALslsv2i32
    456196956U,	// VMLALslsv4i16
    458294108U,	// VMLALsluv2i32
    459342684U,	// VMLALsluv4i16
    1394672476U,	// VMLALsv2i64
    1395721052U,	// VMLALsv4i32
    1396769628U,	// VMLALsv8i16
    1397818204U,	// VMLALuv2i64
    1398866780U,	// VMLALuv4i32
    1399915356U,	// VMLALuv8i16
    1375896407U,	// VMLAS
    1375896407U,	// VMLAfd
    1375896407U,	// VMLAfq
    436372311U,	// VMLAslfd
    436372311U,	// VMLAslfq
    462488407U,	// VMLAslv2i32
    463536983U,	// VMLAslv4i16
    462488407U,	// VMLAslv4i32
    463536983U,	// VMLAslv8i16
    1404109655U,	// VMLAv16i8
    1402012503U,	// VMLAv2i32
    1403061079U,	// VMLAv4i16
    1402012503U,	// VMLAv4i32
    1403061079U,	// VMLAv8i16
    1404109655U,	// VMLAv8i8
    1374847842U,	// VMLSD
    455148391U,	// VMLSLslsv2i32
    456196967U,	// VMLSLslsv4i16
    458294119U,	// VMLSLsluv2i32
    459342695U,	// VMLSLsluv4i16
    1394672487U,	// VMLSLsv2i64
    1395721063U,	// VMLSLsv4i32
    1396769639U,	// VMLSLsv8i16
    1397818215U,	// VMLSLuv2i64
    1398866791U,	// VMLSLuv4i32
    1399915367U,	// VMLSLuv8i16
    1375896418U,	// VMLSS
    1375896418U,	// VMLSfd
    1375896418U,	// VMLSfq
    436372322U,	// VMLSslfd
    436372322U,	// VMLSslfq
    462488418U,	// VMLSslv2i32
    463536994U,	// VMLSslv4i16
    462488418U,	// VMLSslv4i32
    463536994U,	// VMLSslv8i16
    1404109666U,	// VMLSv16i8
    1402012514U,	// VMLSv2i32
    1403061090U,	// VMLSv4i16
    1402012514U,	// VMLSv4i32
    1403061090U,	// VMLSv8i16
    1404109666U,	// VMLSv8i8
    1240629414U,	// VMOVD
    271679654U,	// VMOVDRR
    301105318U,	// VMOVDcc
    1211203750U,	// VMOVDneon
    1260389229U,	// VMOVLsv2i64
    1261437805U,	// VMOVLsv4i32
    1262486381U,	// VMOVLsv8i16
    1263534957U,	// VMOVLuv2i64
    1264583533U,	// VMOVLuv4i32
    1265632109U,	// VMOVLuv8i16
    1266680691U,	// VMOVNv2i32
    1267729267U,	// VMOVNv4i16
    1268777843U,	// VMOVNv8i8
    1211203750U,	// VMOVQ
    271679654U,	// VMOVRRD
    1211203750U,	// VMOVRS
    1241677990U,	// VMOVS
    1211203750U,	// VMOVSR
    302153894U,	// VMOVScc
    1270251686U,	// VMOVv16i8
    1267138726U,	// VMOVv1i64
    1268220070U,	// VMOVv2i32
    1267138726U,	// VMOVv2i64
    1269301414U,	// VMOVv4i16
    1268220070U,	// VMOVv4i32
    1269301414U,	// VMOVv8i16
    1270251686U,	// VMOVv8i8
    301106041U,	// VMULD
    346030974U,	// VMULLp
    1394606974U,	// VMULLslsv2i32
    1395655550U,	// VMULLslsv4i16
    1397752702U,	// VMULLsluv2i32
    1398801278U,	// VMULLsluv4i16
    320865150U,	// VMULLsv2i64
    321913726U,	// VMULLsv4i32
    322962302U,	// VMULLsv8i16
    324010878U,	// VMULLuv2i64
    325059454U,	// VMULLuv4i32
    326108030U,	// VMULLuv8i16
    302154617U,	// VMULS
    302154617U,	// VMULfd
    302154617U,	// VMULfd_sfp
    302154617U,	// VMULfq
    346030969U,	// VMULpd
    346030969U,	// VMULpq
    1375896441U,	// VMULslfd
    1375896441U,	// VMULslfq
    1401947001U,	// VMULslv2i32
    1402995577U,	// VMULslv4i16
    1401947001U,	// VMULslv4i32
    1402995577U,	// VMULslv8i16
    330302329U,	// VMULv16i8
    328205177U,	// VMULv2i32
    329253753U,	// VMULv4i16
    328205177U,	// VMULv4i32
    329253753U,	// VMULv8i16
    330302329U,	// VMULv8i8
    1211204484U,	// VMVNd
    1211204484U,	// VMVNq
    1240630153U,	// VNEGD
    301106057U,	// VNEGDcc
    1241678729U,	// VNEGS
    302154633U,	// VNEGScc
    1241678729U,	// VNEGf32d
    1241678729U,	// VNEGf32d_sfp
    1241678729U,	// VNEGf32q
    1261437833U,	// VNEGs16d
    1261437833U,	// VNEGs16q
    1260389257U,	// VNEGs32d
    1260389257U,	// VNEGs32q
    1262486409U,	// VNEGs8d
    1262486409U,	// VNEGs8q
    1374847886U,	// VNMLAD
    1375896462U,	// VNMLAS
    1374847892U,	// VNMLSD
    1375896468U,	// VNMLSS
    301106074U,	// VNMULD
    302154650U,	// VNMULS
    271680416U,	// VORNd
    271680416U,	// VORNq
    271680421U,	// VORRd
    271680421U,	// VORRq
    323027882U,	// VPADALsv16i8
    320930730U,	// VPADALsv2i32
    321979306U,	// VPADALsv4i16
    320930730U,	// VPADALsv4i32
    321979306U,	// VPADALsv8i16
    323027882U,	// VPADALsv8i8
    326173610U,	// VPADALuv16i8
    324076458U,	// VPADALuv2i32
    325125034U,	// VPADALuv4i16
    324076458U,	// VPADALuv4i32
    325125034U,	// VPADALuv8i16
    326173610U,	// VPADALuv8i8
    1262486449U,	// VPADDLsv16i8
    1260389297U,	// VPADDLsv2i32
    1261437873U,	// VPADDLsv4i16
    1260389297U,	// VPADDLsv4i32
    1261437873U,	// VPADDLsv8i16
    1262486449U,	// VPADDLsv8i8
    1265632177U,	// VPADDLuv16i8
    1263535025U,	// VPADDLuv2i32
    1264583601U,	// VPADDLuv4i16
    1263535025U,	// VPADDLuv4i32
    1264583601U,	// VPADDLuv8i16
    1265632177U,	// VPADDLuv8i8
    302154680U,	// VPADDf
    329253816U,	// VPADDi16
    328205240U,	// VPADDi32
    330302392U,	// VPADDi8
    302154686U,	// VPMAXf
    321913790U,	// VPMAXs16
    320865214U,	// VPMAXs32
    322962366U,	// VPMAXs8
    325059518U,	// VPMAXu16
    324010942U,	// VPMAXu32
    326108094U,	// VPMAXu8
    302154692U,	// VPMINf
    321913796U,	// VPMINs16
    320865220U,	// VPMINs32
    322962372U,	// VPMINs8
    325059524U,	// VPMINu16
    324010948U,	// VPMINu32
    326108100U,	// VPMINu8
    1262486474U,	// VQABSv16i8
    1260389322U,	// VQABSv2i32
    1261437898U,	// VQABSv4i16
    1260389322U,	// VQABSv4i32
    1261437898U,	// VQABSv8i16
    1262486474U,	// VQABSv8i8
    322962384U,	// VQADDsv16i8
    347079632U,	// VQADDsv1i64
    320865232U,	// VQADDsv2i32
    347079632U,	// VQADDsv2i64
    321913808U,	// VQADDsv4i16
    320865232U,	// VQADDsv4i32
    321913808U,	// VQADDsv8i16
    322962384U,	// VQADDsv8i8
    326108112U,	// VQADDuv16i8
    348128208U,	// VQADDuv1i64
    324010960U,	// VQADDuv2i32
    348128208U,	// VQADDuv2i64
    325059536U,	// VQADDuv4i16
    324010960U,	// VQADDuv4i32
    325059536U,	// VQADDuv8i16
    326108112U,	// VQADDuv8i8
    455148502U,	// VQDMLALslv2i32
    456197078U,	// VQDMLALslv4i16
    1394672598U,	// VQDMLALv2i64
    1395721174U,	// VQDMLALv4i32
    455148510U,	// VQDMLSLslv2i32
    456197086U,	// VQDMLSLslv4i16
    1394672606U,	// VQDMLSLv2i64
    1395721182U,	// VQDMLSLv4i32
    1394607078U,	// VQDMULHslv2i32
    1395655654U,	// VQDMULHslv4i16
    1394607078U,	// VQDMULHslv4i32
    1395655654U,	// VQDMULHslv8i16
    320865254U,	// VQDMULHv2i32
    321913830U,	// VQDMULHv4i16
    320865254U,	// VQDMULHv4i32
    321913830U,	// VQDMULHv8i16
    1394607086U,	// VQDMULLslv2i32
    1395655662U,	// VQDMULLslv4i16
    320865262U,	// VQDMULLv2i64
    321913838U,	// VQDMULLv4i32
    1286603766U,	// VQMOVNsuv2i32
    1260389366U,	// VQMOVNsuv4i16
    1261437942U,	// VQMOVNsuv8i8
    1286603774U,	// VQMOVNsv2i32
    1260389374U,	// VQMOVNsv4i16
    1261437950U,	// VQMOVNsv8i8
    1287652350U,	// VQMOVNuv2i32
    1263535102U,	// VQMOVNuv4i16
    1264583678U,	// VQMOVNuv8i8
    1262486533U,	// VQNEGv16i8
    1260389381U,	// VQNEGv2i32
    1261437957U,	// VQNEGv4i16
    1260389381U,	// VQNEGv4i32
    1261437957U,	// VQNEGv8i16
    1262486533U,	// VQNEGv8i8
    1394607115U,	// VQRDMULHslv2i32
    1395655691U,	// VQRDMULHslv4i16
    1394607115U,	// VQRDMULHslv4i32
    1395655691U,	// VQRDMULHslv8i16
    320865291U,	// VQRDMULHv2i32
    321913867U,	// VQRDMULHv4i16
    320865291U,	// VQRDMULHv4i32
    321913867U,	// VQRDMULHv8i16
    322962452U,	// VQRSHLsv16i8
    347079700U,	// VQRSHLsv1i64
    320865300U,	// VQRSHLsv2i32
    347079700U,	// VQRSHLsv2i64
    321913876U,	// VQRSHLsv4i16
    320865300U,	// VQRSHLsv4i32
    321913876U,	// VQRSHLsv8i16
    322962452U,	// VQRSHLsv8i8
    326108180U,	// VQRSHLuv16i8
    348128276U,	// VQRSHLuv1i64
    324011028U,	// VQRSHLuv2i32
    348128276U,	// VQRSHLuv2i64
    325059604U,	// VQRSHLuv4i16
    324011028U,	// VQRSHLuv4i32
    325059604U,	// VQRSHLuv8i16
    326108180U,	// VQRSHLuv8i8
    347079707U,	// VQRSHRNsv2i32
    320865307U,	// VQRSHRNsv4i16
    321913883U,	// VQRSHRNsv8i8
    348128283U,	// VQRSHRNuv2i32
    324011035U,	// VQRSHRNuv4i16
    325059611U,	// VQRSHRNuv8i8
    347079715U,	// VQRSHRUNv2i32
    320865315U,	// VQRSHRUNv4i16
    321913891U,	// VQRSHRUNv8i8
    322962476U,	// VQSHLsiv16i8
    347079724U,	// VQSHLsiv1i64
    320865324U,	// VQSHLsiv2i32
    347079724U,	// VQSHLsiv2i64
    321913900U,	// VQSHLsiv4i16
    320865324U,	// VQSHLsiv4i32
    321913900U,	// VQSHLsiv8i16
    322962476U,	// VQSHLsiv8i8
    322962482U,	// VQSHLsuv16i8
    347079730U,	// VQSHLsuv1i64
    320865330U,	// VQSHLsuv2i32
    347079730U,	// VQSHLsuv2i64
    321913906U,	// VQSHLsuv4i16
    320865330U,	// VQSHLsuv4i32
    321913906U,	// VQSHLsuv8i16
    322962482U,	// VQSHLsuv8i8
    322962476U,	// VQSHLsv16i8
    347079724U,	// VQSHLsv1i64
    320865324U,	// VQSHLsv2i32
    347079724U,	// VQSHLsv2i64
    321913900U,	// VQSHLsv4i16
    320865324U,	// VQSHLsv4i32
    321913900U,	// VQSHLsv8i16
    322962476U,	// VQSHLsv8i8
    326108204U,	// VQSHLuiv16i8
    348128300U,	// VQSHLuiv1i64
    324011052U,	// VQSHLuiv2i32
    348128300U,	// VQSHLuiv2i64
    325059628U,	// VQSHLuiv4i16
    324011052U,	// VQSHLuiv4i32
    325059628U,	// VQSHLuiv8i16
    326108204U,	// VQSHLuiv8i8
    326108204U,	// VQSHLuv16i8
    348128300U,	// VQSHLuv1i64
    324011052U,	// VQSHLuv2i32
    348128300U,	// VQSHLuv2i64
    325059628U,	// VQSHLuv4i16
    324011052U,	// VQSHLuv4i32
    325059628U,	// VQSHLuv8i16
    326108204U,	// VQSHLuv8i8
    347079737U,	// VQSHRNsv2i32
    320865337U,	// VQSHRNsv4i16
    321913913U,	// VQSHRNsv8i8
    348128313U,	// VQSHRNuv2i32
    324011065U,	// VQSHRNuv4i16
    325059641U,	// VQSHRNuv8i8
    347079744U,	// VQSHRUNv2i32
    320865344U,	// VQSHRUNv4i16
    321913920U,	// VQSHRUNv8i8
    322962504U,	// VQSUBsv16i8
    347079752U,	// VQSUBsv1i64
    320865352U,	// VQSUBsv2i32
    347079752U,	// VQSUBsv2i64
    321913928U,	// VQSUBsv4i16
    320865352U,	// VQSUBsv4i32
    321913928U,	// VQSUBsv8i16
    322962504U,	// VQSUBsv8i8
    326108232U,	// VQSUBuv16i8
    348128328U,	// VQSUBuv1i64
    324011080U,	// VQSUBuv2i32
    348128328U,	// VQSUBuv2i64
    325059656U,	// VQSUBuv4i16
    324011080U,	// VQSUBuv4i32
    325059656U,	// VQSUBuv8i16
    326108232U,	// VQSUBuv8i8
    327156814U,	// VRADDHNv2i32
    328205390U,	// VRADDHNv4i16
    329253966U,	// VRADDHNv8i8
    1263535190U,	// VRECPEd
    1241678934U,	// VRECPEfd
    1241678934U,	// VRECPEfq
    1263535190U,	// VRECPEq
    302154845U,	// VRECPSfd
    302154845U,	// VRECPSfq
    1270973540U,	// VREV16d8
    1270973540U,	// VREV16q8
    1278313579U,	// VREV32d16
    1270973547U,	// VREV32d8
    1278313579U,	// VREV32q16
    1270973547U,	// VREV32q8
    1278313586U,	// VREV64d16
    1279362162U,	// VREV64d32
    1270973554U,	// VREV64d8
    1279362162U,	// VREV64df
    1278313586U,	// VREV64q16
    1279362162U,	// VREV64q32
    1270973554U,	// VREV64q8
    1279362162U,	// VREV64qf
    322962553U,	// VRHADDsv16i8
    320865401U,	// VRHADDsv2i32
    321913977U,	// VRHADDsv4i16
    320865401U,	// VRHADDsv4i32
    321913977U,	// VRHADDsv8i16
    322962553U,	// VRHADDsv8i8
    326108281U,	// VRHADDuv16i8
    324011129U,	// VRHADDuv2i32
    325059705U,	// VRHADDuv4i16
    324011129U,	// VRHADDuv4i32
    325059705U,	// VRHADDuv8i16
    326108281U,	// VRHADDuv8i8
    322962560U,	// VRSHLsv16i8
    347079808U,	// VRSHLsv1i64
    320865408U,	// VRSHLsv2i32
    347079808U,	// VRSHLsv2i64
    321913984U,	// VRSHLsv4i16
    320865408U,	// VRSHLsv4i32
    321913984U,	// VRSHLsv8i16
    322962560U,	// VRSHLsv8i8
    326108288U,	// VRSHLuv16i8
    348128384U,	// VRSHLuv1i64
    324011136U,	// VRSHLuv2i32
    348128384U,	// VRSHLuv2i64
    325059712U,	// VRSHLuv4i16
    324011136U,	// VRSHLuv4i32
    325059712U,	// VRSHLuv8i16
    326108288U,	// VRSHLuv8i8
    327156870U,	// VRSHRNv2i32
    328205446U,	// VRSHRNv4i16
    329254022U,	// VRSHRNv8i8
    322962573U,	// VRSHRsv16i8
    347079821U,	// VRSHRsv1i64
    320865421U,	// VRSHRsv2i32
    347079821U,	// VRSHRsv2i64
    321913997U,	// VRSHRsv4i16
    320865421U,	// VRSHRsv4i32
    321913997U,	// VRSHRsv8i16
    322962573U,	// VRSHRsv8i8
    326108301U,	// VRSHRuv16i8
    348128397U,	// VRSHRuv1i64
    324011149U,	// VRSHRuv2i32
    348128397U,	// VRSHRuv2i64
    325059725U,	// VRSHRuv4i16
    324011149U,	// VRSHRuv4i32
    325059725U,	// VRSHRuv8i16
    326108301U,	// VRSHRuv8i8
    1263535251U,	// VRSQRTEd
    1241678995U,	// VRSQRTEfd
    1241678995U,	// VRSQRTEfq
    1263535251U,	// VRSQRTEq
    302154907U,	// VRSQRTSfd
    302154907U,	// VRSQRTSfq
    1396769955U,	// VRSRAsv16i8
    1420887203U,	// VRSRAsv1i64
    1394672803U,	// VRSRAsv2i32
    1420887203U,	// VRSRAsv2i64
    1395721379U,	// VRSRAsv4i16
    1394672803U,	// VRSRAsv4i32
    1395721379U,	// VRSRAsv8i16
    1396769955U,	// VRSRAsv8i8
    1399915683U,	// VRSRAuv16i8
    1421935779U,	// VRSRAuv1i64
    1397818531U,	// VRSRAuv2i32
    1421935779U,	// VRSRAuv2i64
    1398867107U,	// VRSRAuv4i16
    1397818531U,	// VRSRAuv4i32
    1398867107U,	// VRSRAuv8i16
    1399915683U,	// VRSRAuv8i8
    327156905U,	// VRSUBHNv2i32
    328205481U,	// VRSUBHNv4i16
    329254057U,	// VRSUBHNv8i8
    1412530342U,	// VSETLNi16
    1413578918U,	// VSETLNi32
    1405190310U,	// VSETLNi8
    329254065U,	// VSHLLi16
    328205489U,	// VSHLLi32
    330302641U,	// VSHLLi8
    320865457U,	// VSHLLsv2i64
    321914033U,	// VSHLLsv4i32
    322962609U,	// VSHLLsv8i16
    324011185U,	// VSHLLuv2i64
    325059761U,	// VSHLLuv4i32
    326108337U,	// VSHLLuv8i16
    330302647U,	// VSHLiv16i8
    327156919U,	// VSHLiv1i64
    328205495U,	// VSHLiv2i32
    327156919U,	// VSHLiv2i64
    329254071U,	// VSHLiv4i16
    328205495U,	// VSHLiv4i32
    329254071U,	// VSHLiv8i16
    330302647U,	// VSHLiv8i8
    322962615U,	// VSHLsv16i8
    347079863U,	// VSHLsv1i64
    320865463U,	// VSHLsv2i32
    347079863U,	// VSHLsv2i64
    321914039U,	// VSHLsv4i16
    320865463U,	// VSHLsv4i32
    321914039U,	// VSHLsv8i16
    322962615U,	// VSHLsv8i8
    326108343U,	// VSHLuv16i8
    348128439U,	// VSHLuv1i64
    324011191U,	// VSHLuv2i32
    348128439U,	// VSHLuv2i64
    325059767U,	// VSHLuv4i16
    324011191U,	// VSHLuv4i32
    325059767U,	// VSHLuv8i16
    326108343U,	// VSHLuv8i8
    327156924U,	// VSHRNv2i32
    328205500U,	// VSHRNv4i16
    329254076U,	// VSHRNv8i8
    322962626U,	// VSHRsv16i8
    347079874U,	// VSHRsv1i64
    320865474U,	// VSHRsv2i32
    347079874U,	// VSHRsv2i64
    321914050U,	// VSHRsv4i16
    320865474U,	// VSHRsv4i32
    321914050U,	// VSHRsv8i16
    322962626U,	// VSHRsv8i8
    326108354U,	// VSHRuv16i8
    348128450U,	// VSHRuv1i64
    324011202U,	// VSHRuv2i32
    348128450U,	// VSHRuv2i64
    325059778U,	// VSHRuv4i16
    324011202U,	// VSHRuv4i32
    325059778U,	// VSHRuv8i16
    326108354U,	// VSHRuv8i8
    1288700675U,	// VSITOD
    1276445443U,	// VSITOS
    1405191367U,	// VSLIv16i8
    1418822855U,	// VSLIv1i64
    1413579975U,	// VSLIv2i32
    1418822855U,	// VSLIv2i64
    1412531399U,	// VSLIv4i16
    1413579975U,	// VSLIv4i32
    1412531399U,	// VSLIv8i16
    1405191367U,	// VSLIv8i8
    1240630476U,	// VSQRTD
    1241679052U,	// VSQRTS
    1396770002U,	// VSRAsv16i8
    1420887250U,	// VSRAsv1i64
    1394672850U,	// VSRAsv2i32
    1420887250U,	// VSRAsv2i64
    1395721426U,	// VSRAsv4i16
    1394672850U,	// VSRAsv4i32
    1395721426U,	// VSRAsv8i16
    1396770002U,	// VSRAsv8i8
    1399915730U,	// VSRAuv16i8
    1421935826U,	// VSRAuv1i64
    1397818578U,	// VSRAuv2i32
    1421935826U,	// VSRAuv2i64
    1398867154U,	// VSRAuv4i16
    1397818578U,	// VSRAuv4i32
    1398867154U,	// VSRAuv8i16
    1399915730U,	// VSRAuv8i8
    1405191383U,	// VSRIv16i8
    1418822871U,	// VSRIv1i64
    1413579991U,	// VSRIv2i32
    1418822871U,	// VSRIv2i64
    1412531415U,	// VSRIv4i16
    1413579991U,	// VSRIv4i32
    1412531415U,	// VSRIv8i16
    1405191383U,	// VSRIv8i8
    475563228U,	// VST1d16
    476611804U,	// VST1d32
    477660380U,	// VST1d64
    478708956U,	// VST1d8
    476611804U,	// VST1df
    473498844U,	// VST1q16
    474547420U,	// VST1q32
    479790300U,	// VST1q64
    466158812U,	// VST1q8
    474547420U,	// VST1qf
    2757264609U,	// VST2LNd16
    2758313185U,	// VST2LNd32
    2760410337U,	// VST2LNd8
    2757264609U,	// VST2LNq16a
    2757264609U,	// VST2LNq16b
    2758313185U,	// VST2LNq32a
    2758313185U,	// VST2LNq32b
    2354611425U,	// VST2d16
    2355660001U,	// VST2d32
    2356708572U,	// VST2d64
    2357757153U,	// VST2d8
    2488829153U,	// VST2q16
    2489877729U,	// VST2q32
    2491974881U,	// VST2q8
    2488829158U,	// VST3LNd16
    2489877734U,	// VST3LNd32
    2491974886U,	// VST3LNd8
    2488829158U,	// VST3LNq16a
    2488829158U,	// VST3LNq16b
    2489877734U,	// VST3LNq32a
    2489877734U,	// VST3LNq32b
    2757264614U,	// VST3d16
    2758313190U,	// VST3d32
    2759361756U,	// VST3d64
    2760410342U,	// VST3d8
    2488894694U,	// VST3q16a
    2488894694U,	// VST3q16b
    2489943270U,	// VST3q32a
    2489943270U,	// VST3q32b
    2492040422U,	// VST3q8a
    2492040422U,	// VST3q8b
    2220393707U,	// VST4LNd16
    2221442283U,	// VST4LNd32
    2223539435U,	// VST4LNd8
    2220393707U,	// VST4LNq16a
    2220393707U,	// VST4LNq16b
    2221442283U,	// VST4LNq32a
    2221442283U,	// VST4LNq32b
    2488829163U,	// VST4d16
    2489877739U,	// VST4d32
    2490926300U,	// VST4d64
    2491974891U,	// VST4d8
    2220459243U,	// VST4q16a
    2220459243U,	// VST4q16b
    2221507819U,	// VST4q32a
    2221507819U,	// VST4q32b
    2223604971U,	// VST4q8a
    2223604971U,	// VST4q8b
    2952791280U,	// VSTMD
    2952791280U,	// VSTMS
    345081077U,	// VSTRD
    271975674U,	// VSTRQ
    339838197U,	// VSTRS
    301106433U,	// VSUBD
    327156998U,	// VSUBHNv2i32
    328205574U,	// VSUBHNv4i16
    329254150U,	// VSUBHNv8i8
    320865549U,	// VSUBLsv2i64
    321914125U,	// VSUBLsv4i32
    322962701U,	// VSUBLsv8i16
    324011277U,	// VSUBLuv2i64
    325059853U,	// VSUBLuv4i32
    326108429U,	// VSUBLuv8i16
    302155009U,	// VSUBS
    320865555U,	// VSUBWsv2i64
    321914131U,	// VSUBWsv4i32
    322962707U,	// VSUBWsv8i16
    324011283U,	// VSUBWuv2i64
    325059859U,	// VSUBWuv4i32
    326108435U,	// VSUBWuv8i16
    302155009U,	// VSUBfd
    302155009U,	// VSUBfd_sfp
    302155009U,	// VSUBfq
    330302721U,	// VSUBv16i8
    327156993U,	// VSUBv1i64
    328205569U,	// VSUBv2i32
    327156993U,	// VSUBv2i64
    329254145U,	// VSUBv4i16
    328205569U,	// VSUBv4i32
    329254145U,	// VSUBv8i16
    330302721U,	// VSUBv8i8
    331449625U,	// VTBL1
    1405191449U,	// VTBL2
    465667353U,	// VTBL3
    2344715545U,	// VTBL4
    1405191454U,	// VTBX1
    465667358U,	// VTBX2
    2344715550U,	// VTBX3
    2747368734U,	// VTBX4
    1289749251U,	// VTOSIZD
    1274348291U,	// VTOSIZS
    1290797827U,	// VTOUIZD
    1275396867U,	// VTOUIZS
    1412531491U,	// VTRNd16
    1413580067U,	// VTRNd32
    1405191459U,	// VTRNd8
    1412531491U,	// VTRNq16
    1413580067U,	// VTRNq32
    1405191459U,	// VTRNq8
    331449640U,	// VTSTv16i8
    339838248U,	// VTSTv2i32
    338789672U,	// VTSTv4i16
    339838248U,	// VTSTv4i32
    338789672U,	// VTSTv8i16
    331449640U,	// VTSTv8i8
    1291846403U,	// VUITOD
    1277494019U,	// VUITOS
    1412531501U,	// VUZPd16
    1413580077U,	// VUZPd32
    1405191469U,	// VUZPd8
    1412531501U,	// VUZPq16
    1413580077U,	// VUZPq32
    1405191469U,	// VUZPq8
    1412531506U,	// VZIPd16
    1413580082U,	// VZIPd32
    1405191474U,	// VZIPd8
    1412531506U,	// VZIPq16
    1413580082U,	// VZIPq32
    1405191474U,	// VZIPq8
    134217741U,	// t2ADCSri
    134219063U,	// t2ADCSrr
    134219063U,	// t2ADCSrs
    3090251795U,	// t2ADCri
    3172106259U,	// t2ADCrr
    3306323987U,	// t2ADCrs
    353533975U,	// t2ADDSri
    353533975U,	// t2ADDSrr
    1427275799U,	// t2ADDSrs
    3172106268U,	// t2ADDrSPi
    271680831U,	// t2ADDrSPi12
    3306323996U,	// t2ADDrSPs
    3172106268U,	// t2ADDri
    3090253119U,	// t2ADDri12
    3172106268U,	// t2ADDrr
    3306323996U,	// t2ADDrs
    3090251846U,	// t2ANDri
    3172106310U,	// t2ANDrr
    3306324038U,	// t2ANDrs
    3172107588U,	// t2ASRri
    3172107588U,	// t2ASRrr
    138413384U,	// t2B
    271679566U,	// t2BFC
    3090251858U,	// t2BICri
    3172106322U,	// t2BICrr
    3306324050U,	// t2BICrs
    220201080U,	// t2BR_JT
    890568852U,	// t2Bcc
    1211203734U,	// t2CLZ
    1293058202U,	// t2CMNzri
    1293058202U,	// t2CMNzrr
    353534106U,	// t2CMNzrs
    1293058206U,	// t2CMPri
    1293058206U,	// t2CMPrr
    353534110U,	// t2CMPrs
    1293058206U,	// t2CMPzri
    1293058206U,	// t2CMPzrr
    353534110U,	// t2CMPzrs
    3090251938U,	// t2EORri
    3172106402U,	// t2EORrr
    3306324130U,	// t2EORrs
    3355444557U,	// t2IT
    189U,	// t2Int_MemBarrierV7
    193U,	// t2Int_SyncBarrierV7
    221250896U,	// t2Int_eh_sjlj_setjmp
    1698693327U,	// t2LDM
    1698693327U,	// t2LDM_RET
    1345421527U,	// t2LDRB_POST
    1345421527U,	// t2LDRB_PRE
    353534167U,	// t2LDRBi12
    271679703U,	// t2LDRBi8
    1293058263U,	// t2LDRBpci
    1427275991U,	// t2LDRBs
    1345421532U,	// t2LDRDi8
    271679708U,	// t2LDRDpci
    1211203809U,	// t2LDREX
    1211203815U,	// t2LDREXB
    271679726U,	// t2LDREXD
    1211203829U,	// t2LDREXH
    1345421564U,	// t2LDRH_POST
    1345421564U,	// t2LDRH_PRE
    353534204U,	// t2LDRHi12
    271679740U,	// t2LDRHi8
    1293058300U,	// t2LDRHpci
    1427276028U,	// t2LDRHs
    1345421569U,	// t2LDRSB_POST
    1345421569U,	// t2LDRSB_PRE
    353534209U,	// t2LDRSBi12
    271679745U,	// t2LDRSBi8
    1293058305U,	// t2LDRSBpci
    1427276033U,	// t2LDRSBs
    1345421575U,	// t2LDRSH_POST
    1345421575U,	// t2LDRSH_PRE
    353534215U,	// t2LDRSHi12
    271679751U,	// t2LDRSHi8
    1293058311U,	// t2LDRSHpci
    1427276039U,	// t2LDRSHs
    1345421523U,	// t2LDR_POST
    1345421523U,	// t2LDR_PRE
    353534163U,	// t2LDRi12
    271679699U,	// t2LDRi8
    1293058259U,	// t2LDRpci
    134219100U,	// t2LDRpci_pic
    1427275987U,	// t2LDRs
    1293550949U,	// t2LEApcrel
    354026853U,	// t2LEApcrelJT
    3172107625U,	// t2LSLri
    3172107625U,	// t2LSLrr
    3172107629U,	// t2LSRri
    3172107629U,	// t2LSRrr
    1345421587U,	// t2MLA
    1345421591U,	// t2MLS
    1427277124U,	// t2MOVCCasr
    353534235U,	// t2MOVCCi
    1427277161U,	// t2MOVCClsl
    1427277165U,	// t2MOVCClsr
    353534235U,	// t2MOVCCr
    1427277169U,	// t2MOVCCror
    271679775U,	// t2MOVTi16
    3579478299U,	// t2MOVi
    1211203876U,	// t2MOVi16
    1211203876U,	// t2MOVi32imm
    3579478299U,	// t2MOVr
    3579512181U,	// t2MOVrx
    134219129U,	// t2MOVsra_flag
    134219137U,	// t2MOVsrl_flag
    271679790U,	// t2MUL
    3579511090U,	// t2MVNi
    1293058354U,	// t2MVNr
    353534258U,	// t2MVNs
    3090253193U,	// t2ORNri
    3090253193U,	// t2ORNrr
    3224470921U,	// t2ORNrs
    3090252086U,	// t2ORRri
    3172106550U,	// t2ORRrr
    3306324278U,	// t2ORRrs
    1345421628U,	// t2PKHBT
    1345421634U,	// t2PKHTB
    1211203912U,	// t2RBIT
    1293058381U,	// t2REV
    1293058385U,	// t2REV16
    1293058391U,	// t2REVSH
    3172107633U,	// t2RORri
    3172107633U,	// t2RORrr
    3623879010U,	// t2RSBSri
    3492905314U,	// t2RSBSrs
    353534306U,	// t2RSBri
    1345421666U,	// t2RSBrs
    134218096U,	// t2SBCSri
    134219149U,	// t2SBCSrr
    134219149U,	// t2SBCSrs
    3090252150U,	// t2SBCri
    3172106614U,	// t2SBCrr
    3306324342U,	// t2SBCrs
    1345421690U,	// t2SBFX
    1345421695U,	// t2SMLABB
    1345421702U,	// t2SMLABT
    1345421709U,	// t2SMLAL
    1345421715U,	// t2SMLATB
    1345421722U,	// t2SMLATT
    1345421729U,	// t2SMLAWB
    1345421736U,	// t2SMLAWT
    1345421743U,	// t2SMMLA
    1345421749U,	// t2SMMLS
    271679931U,	// t2SMMUL
    271679937U,	// t2SMULBB
    271679944U,	// t2SMULBT
    1345421775U,	// t2SMULL
    271679957U,	// t2SMULTB
    271679964U,	// t2SMULTT
    271679971U,	// t2SMULWB
    271679978U,	// t2SMULWT
    1698693617U,	// t2STM
    1345323513U,	// t2STRB_POST
    1345323513U,	// t2STRB_PRE
    353534457U,	// t2STRBi12
    271679993U,	// t2STRBi8
    1427276281U,	// t2STRBs
    1345421822U,	// t2STRDi8
    271680003U,	// t2STREX
    271680009U,	// t2STREXB
    1345421840U,	// t2STREXD
    271680023U,	// t2STREXH
    1345323550U,	// t2STRH_POST
    1345323550U,	// t2STRH_PRE
    353534494U,	// t2STRHi12
    271680030U,	// t2STRHi8
    1427276318U,	// t2STRHs
    1345323509U,	// t2STR_POST
    1345323509U,	// t2STR_PRE
    353534453U,	// t2STRi12
    271679989U,	// t2STRi8
    1427276277U,	// t2STRs
    353534499U,	// t2SUBSri
    353534499U,	// t2SUBSrr
    1427276323U,	// t2SUBSrs
    3172106792U,	// t2SUBrSPi
    271680917U,	// t2SUBrSPi12
    134219162U,	// t2SUBrSPi12_
    134219170U,	// t2SUBrSPi_
    3224470056U,	// t2SUBrSPs
    134219179U,	// t2SUBrSPs_
    3172106792U,	// t2SUBri
    3090253205U,	// t2SUBri12
    3172106792U,	// t2SUBrr
    3306324520U,	// t2SUBrs
    271680044U,	// t2SXTABrr
    1345421868U,	// t2SXTABrr_rot
    271680050U,	// t2SXTAHrr
    1345421874U,	// t2SXTAHrr_rot
    1293058616U,	// t2SXTBr
    353534520U,	// t2SXTBr_rot
    1293058621U,	// t2SXTHr
    353534525U,	// t2SXTHr_rot
    3758097842U,	// t2TBB
    3758097847U,	// t2TBH
    1293058626U,	// t2TEQri
    1293058626U,	// t2TEQrr
    353534530U,	// t2TEQrs
    582U,	// t2TPsoft
    1293058649U,	// t2TSTri
    1293058649U,	// t2TSTrr
    353534553U,	// t2TSTrs
    1345421917U,	// t2UBFX
    1345421922U,	// t2UMAAL
    1345421928U,	// t2UMLAL
    1345421934U,	// t2UMULL
    271680116U,	// t2UXTABrr
    1345421940U,	// t2UXTABrr_rot
    271680122U,	// t2UXTAHrr
    1345421946U,	// t2UXTAHrr_rot
    1293058688U,	// t2UXTB16r
    353534592U,	// t2UXTB16r_rot
    1293058695U,	// t2UXTBr
    353534599U,	// t2UXTBr_rot
    1293058700U,	// t2UXTHr
    353534604U,	// t2UXTHr_rot
    3983245331U,	// tADC
    271679516U,	// tADDhirr
    3982557212U,	// tADDi3
    3983245340U,	// tADDi8
    225445308U,	// tADDrPCi
    134284732U,	// tADDrSP
    134219196U,	// tADDrSPi
    3982557212U,	// tADDrr
    135005628U,	// tADDspi
    134284732U,	// tADDspr
    134284737U,	// tADDspr_
    138413512U,	// tADJCALLSTACKDOWN
    138413533U,	// tADJCALLSTACKUP
    3983245382U,	// tAND
    134284784U,	// tANDsp
    3982558532U,	// tASRri
    3983246660U,	// tASRrr
    138412107U,	// tB
    3983245394U,	// tBIC
    671088726U,	// tBL
    671088730U,	// tBLXi
    671088730U,	// tBLXi_r9
    138412122U,	// tBLXr
    138412122U,	// tBLXr_r9
    671088726U,	// tBLr9
    138412152U,	// tBRIND
    226492536U,	// tBR_JTr
    138412161U,	// tBX
    1527U,	// tBX_RET
    138412130U,	// tBX_RET_vararg
    138412161U,	// tBXr9
    808550548U,	// tBcc
    227541078U,	// tBfar
    134219261U,	// tCBNZ
    134219267U,	// tCBZ
    1211203738U,	// tCMNz
    1211203742U,	// tCMPhir
    1211203742U,	// tCMPi8
    1211203742U,	// tCMPr
    1211203742U,	// tCMPzhir
    1211203742U,	// tCMPzi8
    1211203742U,	// tCMPzr
    3983245474U,	// tEOR
    228591112U,	// tInt_eh_sjlj_setjmp
    1613955279U,	// tLDM
    1345421523U,	// tLDR
    1345421527U,	// tLDRB
    1345421527U,	// tLDRBi
    1345421564U,	// tLDRH
    1345421564U,	// tLDRHi
    271679745U,	// tLDRSB
    271679751U,	// tLDRSH
    1211203795U,	// tLDRcp
    1345421523U,	// tLDRi
    1303380179U,	// tLDRpci
    134219325U,	// tLDRpci_pic
    271679699U,	// tLDRspi
    1211204965U,	// tLEApcrel
    271680869U,	// tLEApcrelJT
    3982558569U,	// tLSLri
    3983246697U,	// tLSLrr
    3982558573U,	// tLSRri
    3983246701U,	// tLSRrr
    271679771U,	// tMOVCCi
    271679771U,	// tMOVCCr
    272631366U,	// tMOVCCr_pseudo
    134219345U,	// tMOVSr
    134219351U,	// tMOVgpr2gpr
    134219351U,	// tMOVgpr2tgpr
    3989111067U,	// tMOVi8
    134219351U,	// tMOVr
    134219351U,	// tMOVtgpr2gpr
    3983245614U,	// tMUL
    3989111090U,	// tMVN
    3983245622U,	// tORR
    1976566074U,	// tPICADD
    1077708380U,	// tPOP
    1077708380U,	// tPOP_RET
    1077708384U,	// tPUSH
    1211203917U,	// tREV
    1211203921U,	// tREV16
    1211203927U,	// tREVSH
    3983246705U,	// tROR
    3989078370U,	// tRSB
    271679699U,	// tRestore
    3983245686U,	// tSBC
    1613955569U,	// tSTM
    1345421813U,	// tSTR
    1345421817U,	// tSTRB
    1345421817U,	// tSTRBi
    1345421854U,	// tSTRH
    1345421854U,	// tSTRHi
    1345421813U,	// tSTRi
    271679989U,	// tSTRspi
    3982557736U,	// tSUBi3
    3983245864U,	// tSUBi8
    3982557736U,	// tSUBrr
    135005797U,	// tSUBspi
    135005611U,	// tSUBspi_
    1211204152U,	// tSXTB
    1211204157U,	// tSXTH
    271679989U,	// tSpill
    582U,	// tTPsoft
    1211204185U,	// tTST
    1211204231U,	// tUXTB
    1211204236U,	// tUXTH
    0U
  };

  const char *AsmStrs = 
    "DEBUG_VALUE\000adcs\t\000adc\000adds\000add\000@ ADJCALLSTACKDOWN \000@"
    " ADJCALLSTACKUP \000and\000\000b\t\000bfc\000bic\000bl\t\000blx\t\000bl"
    "\000bx\t\000add\tpc, \000ldr\tpc, \000mov\tpc, \000mov\tlr, pc\n\tbx\t\000"
    "bx\000b\000clz\000cmn\000cmp\000eor\000vmov\000vmrs\000mcr\tp15, 0, \000"
    "dmb\000dsb\000str\tsp, [\000ldm\000ldr\000ldrb\000ldrd\000ldrex\000ldre"
    "xb\000ldrexd\000ldrexh\000ldrh\000ldrsb\000ldrsh\000.set \000mla\000mls"
    "\000mov\000movt\000movw\000movs\000mul\000mvn\000orr\000\n\000pkhbt\000"
    "pkhtb\000rbit\000rev\000rev16\000revsh\000rsbs\000rsb\000rscs\t\000rsc\000"
    "sbcs\t\000sbc\000sbfx\000smlabb\000smlabt\000smlal\000smlatb\000smlatt\000"
    "smlawb\000smlawt\000smmla\000smmls\000smmul\000smulbb\000smulbt\000smul"
    "l\000smultb\000smultt\000smulwb\000smulwt\000stm\000str\000strb\000strd"
    "\000strex\000strexb\000strexd\000strexh\000strh\000subs\000sub\000sxtab"
    "\000sxtah\000sxtb\000sxth\000teq\000bl\t__aeabi_read_tp\000tst\000ubfx\000"
    "umaal\000umlal\000umull\000uxtab\000uxtah\000uxtb16\000uxtb\000uxth\000"
    "vabal\000vaba\000vabdl\000vabd\000vabs\000vacge\000vacgt\000vadd\000vad"
    "dhn\000vaddl\000vaddw\000vand\000vbic\000vbsl\000vceq\000vcge\000vcgt\000"
    "vcls\000vclz\000vcmpe\000vcnt\000vcvt\000vdiv\000vdup\000veor\000vext\000"
    "vhadd\000vhsub\000vld1\000vld2\000vld3\000vld4\000vldm\000vldr\000vldmi"
    "a\000vmax\000vmin\000vmla\000vmlal\000vmls\000vmlsl\000vmovl\000vmovn\000"
    "vmul\000vmull\000vmvn\000vneg\000vnmla\000vnmls\000vnmul\000vorn\000vor"
    "r\000vpadal\000vpaddl\000vpadd\000vpmax\000vpmin\000vqabs\000vqadd\000v"
    "qdmlal\000vqdmlsl\000vqdmulh\000vqdmull\000vqmovun\000vqmovn\000vqneg\000"
    "vqrdmulh\000vqrshl\000vqrshrn\000vqrshrun\000vqshl\000vqshlu\000vqshrn\000"
    "vqshrun\000vqsub\000vraddhn\000vrecpe\000vrecps\000vrev16\000vrev32\000"
    "vrev64\000vrhadd\000vrshl\000vrshrn\000vrshr\000vrsqrte\000vrsqrts\000v"
    "rsra\000vrsubhn\000vshll\000vshl\000vshrn\000vshr\000vsli\000vsqrt\000v"
    "sra\000vsri\000vst1\000vst2\000vst3\000vst4\000vstm\000vstr\000vstmia\000"
    "vsub\000vsubhn\000vsubl\000vsubw\000vtbl\000vtbx\000vtrn\000vtst\000vuz"
    "p\000vzip\000adcs.w\t\000addw\000asr\000b.w\t\000it\000str.w\tsp, [\000"
    "@ ldr.w\t\000adr\000lsl\000lsr\000ror\000rrx\000asrs.w\t\000lsrs.w\t\000"
    "orn\000sbcs.w\t\000subw\000@ subw\t\000@ sub.w\t\000@ sub\t\000tbb\t\000"
    "tbh\t\000add\t\000@ add\t\000@ tADJCALLSTACKDOWN \000@ tADJCALLSTACKUP "
    "\000@ and\t\000bx\tlr\000cbnz\t\000cbz\t\000mov\tr12, r1\t@ begin eh.se"
    "tjmp\n\tmov\tr1, sp\n\tstr\tr1, [\000@ ldr.n\t\000@ tMOVCCr \000movs\t\000"
    "mov\t\000pop\000push\000sub\t\000";


#ifndef NO_ASM_WRITER_BOILERPLATE
  if (MI->getOpcode() == TargetInstrInfo::INLINEASM) {
    printInlineAsm(MI);
    return;
  } else if (MI->isLabel()) {
    printLabel(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::IMPLICIT_DEF) {
    printImplicitDef(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::KILL) {
    printKill(MI);
    return;
  }


#endif
  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 5 bits for 30 unique commands.
  switch ((Bits >> 27) & 31) {
  default:   // unreachable.
  case 0:
    // DEBUG_VALUE, Int_MemBarrierV7, Int_SyncBarrierV7, TPsoft, t2Int_MemBar...
    return;
    break;
  case 1:
    // ADCSSri, ADCSSrr, ADCSSrs, ADJCALLSTACKDOWN, ADJCALLSTACKUP, B, BLX, B...
    printOperand(MI, 0); 
    break;
  case 2:
    // ADCri, ADCrr, ADDSri, ADDSrr, ADDri, ADDrr, ANDri, ANDrr, BFC, BICri, ...
    printPredicateOperand(MI, 3); 
    break;
  case 3:
    // ADCrs, ADDSrs, ADDrs, ANDrs, BICrs, EORrs, LDRB_POST, LDRB_PRE, LDRD, ...
    printPredicateOperand(MI, 5); 
    break;
  case 4:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, ATOMIC_CMP_SWAP_I8, ATOMIC_L...
    PrintSpecial(MI, "comment"); 
    break;
  case 5:
    // BL, BLr9, tBL, tBLXi, tBLXi_r9, tBLr9
    printOperand(MI, 0, "call"); 
    return;
    break;
  case 6:
    // BL_pred, BLr9_pred, Bcc, VCMPEZD, VCMPEZS, t2Bcc, tBcc
    printPredicateOperand(MI, 1); 
    break;
  case 7:
    // BR_JTm
    printAddrMode2Operand(MI, 0); 
    O << " \n"; 
    printJTBlockOperand(MI, 3); 
    return;
    break;
  case 8:
    // BX_RET, FMSTAT, tPOP, tPOP_RET, tPUSH
    printPredicateOperand(MI, 0); 
    break;
  case 9:
    // CLZ, CMNzri, CMNzrr, CMPri, CMPrr, CMPzri, CMPzrr, FCONSTD, FCONSTS, L...
    printPredicateOperand(MI, 2); 
    break;
  case 10:
    // CMNzrs, CMPrs, CMPzrs, LDR, LDRB, LDRH, LDRSB, LDRSH, LDRcp, MLA, MLS,...
    printPredicateOperand(MI, 4); 
    break;
  case 11:
    // CONSTPOOL_ENTRY
    printCPInstOperand(MI, 0, "label"); 
    O << ' '; 
    printCPInstOperand(MI, 1, "cpentry"); 
    return;
    break;
  case 12:
    // LDM, LDM_RET, STM, t2LDM, t2LDM_RET, t2STM, tLDM, tSTM
    printAddrMode4Operand(MI, 0, "submode"); 
    printPredicateOperand(MI, 2); 
    break;
  case 13:
    // LEApcrel, LEApcrelJT
    PrintSpecial(MI, "private"); 
    O << "PCRELV"; 
    PrintSpecial(MI, "uid"); 
    O << ", ("; 
    printOperand(MI, 1); 
    break;
  case 14:
    // PICADD, tPICADD
    printPCLabel(MI, 2); 
    break;
  case 15:
    // PICLDR, PICLDRB, PICLDRH, PICLDRSB, PICLDRSH, PICSTR, PICSTRB, PICSTRH
    printAddrModePCOperand(MI, 1, "label"); 
    break;
  case 16:
    // VLD2LNd16, VLD2LNd32, VLD2LNd8, VLD2LNq16a, VLD2LNq16b, VLD2LNq32a, VL...
    printPredicateOperand(MI, 9); 
    break;
  case 17:
    // VLD2d16, VLD2d32, VLD2d64, VLD2d8, VST2d16, VST2d32, VST2d64, VST2d8, ...
    printPredicateOperand(MI, 6); 
    break;
  case 18:
    // VLD2q16, VLD2q32, VLD2q8, VLD3q16a, VLD3q16b, VLD3q32a, VLD3q32b, VLD3...
    printPredicateOperand(MI, 8); 
    break;
  case 19:
    // VLD3LNd16, VLD3LNd32, VLD3LNd8, VLD3LNq16a, VLD3LNq16b, VLD3LNq32a, VL...
    printPredicateOperand(MI, 11); 
    break;
  case 20:
    // VLD3d16, VLD3d32, VLD3d64, VLD3d8, VST2LNd16, VST2LNd32, VST2LNd8, VST...
    printPredicateOperand(MI, 7); 
    break;
  case 21:
    // VLD4LNd16, VLD4LNd32, VLD4LNd8, VLD4LNq16a, VLD4LNq16b, VLD4LNq32a, VL...
    printPredicateOperand(MI, 13); 
    break;
  case 22:
    // VLDMD, VLDMS, VSTMD, VSTMS
    printAddrMode5Operand(MI, 0, "submode"); 
    printPredicateOperand(MI, 2); 
    O << "\t"; 
    printAddrMode5Operand(MI, 0, "base"); 
    O << ", "; 
    printRegisterList(MI, 4); 
    return;
    break;
  case 23:
    // t2ADCri, t2ADCrr, t2ADDrSPi, t2ADDri, t2ADDri12, t2ADDrr, t2ANDri, t2A...
    printSBitModifierOperand(MI, 5); 
    printPredicateOperand(MI, 3); 
    break;
  case 24:
    // t2ADCrs, t2ADDrSPs, t2ADDrs, t2ANDrs, t2BICrs, t2EORrs, t2ORNrs, t2ORR...
    printSBitModifierOperand(MI, 6); 
    printPredicateOperand(MI, 4); 
    break;
  case 25:
    // t2IT
    printThumbITMask(MI, 1); 
    O << "\t"; 
    printPredicateOperand(MI, 0); 
    return;
    break;
  case 26:
    // t2MOVi, t2MOVr, t2MOVrx, t2MVNi, t2RSBSrs
    printSBitModifierOperand(MI, 4); 
    break;
  case 27:
    // t2RSBSri
    printSBitModifierOperand(MI, 3); 
    O << ".w\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    return;
    break;
  case 28:
    // t2TBB, t2TBH
    printTBAddrMode(MI, 0); 
    O << "\n"; 
    printJT2BlockOperand(MI, 1); 
    return;
    break;
  case 29:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printSBitModifierOperand(MI, 1); 
    break;
  }


  // Fragment 1 encoded into 7 bits for 94 unique commands.
  switch ((Bits >> 20) & 127) {
  default:   // unreachable.
  case 0:
    // ADCSSri, ADCSSrr, ADCSSrs, BR_JTadd, RSCSri, RSCSrs, SBCSSri, SBCSSrr,...
    O << ", "; 
    break;
  case 1:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, BICri, BICrr, EORri, EORrr, ...
    printSBitModifierOperand(MI, 5); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    break;
  case 2:
    // ADCrs, ADDrs, ANDrs, BICrs, EORrs, ORRrs, RSBrs, RSCrs, SBCrs, SUBrs
    printSBitModifierOperand(MI, 7); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printSORegOperand(MI, 2); 
    return;
    break;
  case 3:
    // ADDSri, ADDSrr, ADDSrs, BFC, BL_pred, BLr9_pred, Bcc, CLZ, CMNzri, CMN...
    O << "\t"; 
    break;
  case 4:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, B, BLX, BLXr9, BRIND, BX, BXr9, t2B,...
    return;
    break;
  case 5:
    // ATOMIC_CMP_SWAP_I16
    O << " ATOMIC_CMP_SWAP_I16 PSEUDO!"; 
    return;
    break;
  case 6:
    // ATOMIC_CMP_SWAP_I32
    O << " ATOMIC_CMP_SWAP_I32 PSEUDO!"; 
    return;
    break;
  case 7:
    // ATOMIC_CMP_SWAP_I8
    O << " ATOMIC_CMP_SWAP_I8 PSEUDO!"; 
    return;
    break;
  case 8:
    // ATOMIC_LOAD_ADD_I16
    O << " ATOMIC_LOAD_ADD_I16 PSEUDO!"; 
    return;
    break;
  case 9:
    // ATOMIC_LOAD_ADD_I32
    O << " ATOMIC_LOAD_ADD_I32 PSEUDO!"; 
    return;
    break;
  case 10:
    // ATOMIC_LOAD_ADD_I8
    O << " ATOMIC_LOAD_ADD_I8 PSEUDO!"; 
    return;
    break;
  case 11:
    // ATOMIC_LOAD_AND_I16
    O << " ATOMIC_LOAD_AND_I16 PSEUDO!"; 
    return;
    break;
  case 12:
    // ATOMIC_LOAD_AND_I32
    O << " ATOMIC_LOAD_AND_I32 PSEUDO!"; 
    return;
    break;
  case 13:
    // ATOMIC_LOAD_AND_I8
    O << " ATOMIC_LOAD_AND_I8 PSEUDO!"; 
    return;
    break;
  case 14:
    // ATOMIC_LOAD_NAND_I16
    O << " ATOMIC_LOAD_NAND_I16 PSEUDO!"; 
    return;
    break;
  case 15:
    // ATOMIC_LOAD_NAND_I32
    O << " ATOMIC_LOAD_NAND_I32 PSEUDO!"; 
    return;
    break;
  case 16:
    // ATOMIC_LOAD_NAND_I8
    O << " ATOMIC_LOAD_NAND_I8 PSEUDO!"; 
    return;
    break;
  case 17:
    // ATOMIC_LOAD_OR_I16
    O << " ATOMIC_LOAD_OR_I16 PSEUDO!"; 
    return;
    break;
  case 18:
    // ATOMIC_LOAD_OR_I32
    O << " ATOMIC_LOAD_OR_I32 PSEUDO!"; 
    return;
    break;
  case 19:
    // ATOMIC_LOAD_OR_I8
    O << " ATOMIC_LOAD_OR_I8 PSEUDO!"; 
    return;
    break;
  case 20:
    // ATOMIC_LOAD_SUB_I16
    O << " ATOMIC_LOAD_SUB_I16 PSEUDO!"; 
    return;
    break;
  case 21:
    // ATOMIC_LOAD_SUB_I32
    O << " ATOMIC_LOAD_SUB_I32 PSEUDO!"; 
    return;
    break;
  case 22:
    // ATOMIC_LOAD_SUB_I8
    O << " ATOMIC_LOAD_SUB_I8 PSEUDO!"; 
    return;
    break;
  case 23:
    // ATOMIC_LOAD_XOR_I16
    O << " ATOMIC_LOAD_XOR_I16 PSEUDO!"; 
    return;
    break;
  case 24:
    // ATOMIC_LOAD_XOR_I32
    O << " ATOMIC_LOAD_XOR_I32 PSEUDO!"; 
    return;
    break;
  case 25:
    // ATOMIC_LOAD_XOR_I8
    O << " ATOMIC_LOAD_XOR_I8 PSEUDO!"; 
    return;
    break;
  case 26:
    // ATOMIC_SWAP_I16
    O << " ATOMIC_SWAP_I16 PSEUDO!"; 
    return;
    break;
  case 27:
    // ATOMIC_SWAP_I32
    O << " ATOMIC_SWAP_I32 PSEUDO!"; 
    return;
    break;
  case 28:
    // ATOMIC_SWAP_I8
    O << " ATOMIC_SWAP_I8 PSEUDO!"; 
    return;
    break;
  case 29:
    // BR_JTr
    O << " \n"; 
    printJTBlockOperand(MI, 1); 
    return;
    break;
  case 30:
    // BX_RET
    O << "\tlr"; 
    return;
    break;
  case 31:
    // FCONSTD, VABSD, VADDD, VCMPED, VCMPEZD, VDIVD, VMLAD, VMLSD, VMOVD, VM...
    O << ".f64\t"; 
    printOperand(MI, 0); 
    break;
  case 32:
    // FCONSTS, VABDfd, VABDfq, VABSS, VABSfd, VABSfd_sfp, VABSfq, VACGEd, VA...
    O << ".f32\t"; 
    printOperand(MI, 0); 
    break;
  case 33:
    // FMSTAT
    O << "\tapsr_nzcv, fpscr"; 
    return;
    break;
  case 34:
    // Int_MemBarrierV6
    O << ", c7, c10, 5"; 
    return;
    break;
  case 35:
    // Int_SyncBarrierV6
    O << ", c7, c10, 4"; 
    return;
    break;
  case 36:
    // Int_eh_sjlj_setjmp
    O << ", #+8] @ eh_setjmp begin\n\tadd\tr12, pc, #8\n\tstr\tr12, ["; 
    printOperand(MI, 0); 
    O << ", #+4]\n\tmov\tr0, #0\n\tadd\tpc, pc, #0\n\tmov\tr0, #1 @ eh_setjmp end"; 
    return;
    break;
  case 37:
    // LEApcrel
    O << "-("; 
    PrintSpecial(MI, "private"); 
    O << "PCRELL"; 
    PrintSpecial(MI, "uid"); 
    O << "+8))\n"; 
    PrintSpecial(MI, "private"); 
    O << "PCRELL"; 
    PrintSpecial(MI, "uid"); 
    O << ":\n\tadd"; 
    printPredicateOperand(MI, 2); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", pc, #"; 
    PrintSpecial(MI, "private"); 
    O << "PCRELV"; 
    PrintSpecial(MI, "uid"); 
    return;
    break;
  case 38:
    // LEApcrelJT
    O << '_'; 
    printNoHashImmediate(MI, 2); 
    O << "-("; 
    PrintSpecial(MI, "private"); 
    O << "PCRELL"; 
    PrintSpecial(MI, "uid"); 
    O << "+8))\n"; 
    PrintSpecial(MI, "private"); 
    O << "PCRELL"; 
    PrintSpecial(MI, "uid"); 
    O << ":\n\tadd"; 
    printPredicateOperand(MI, 3); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", pc, #"; 
    PrintSpecial(MI, "private"); 
    O << "PCRELV"; 
    PrintSpecial(MI, "uid"); 
    return;
    break;
  case 39:
    // MLA, MOVs, MVNs, SMLAL, SMULL, UMLAL, UMULL
    printSBitModifierOperand(MI, 6); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 40:
    // MOVi, MOVr, MOVrx, MVNi, MVNr
    printSBitModifierOperand(MI, 4); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 41:
    // PICADD
    O << ":\n\tadd"; 
    printPredicateOperand(MI, 3); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", pc, "; 
    printOperand(MI, 1); 
    return;
    break;
  case 42:
    // PICLDR
    O << ":\n\tldr"; 
    printPredicateOperand(MI, 3); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    return;
    break;
  case 43:
    // PICLDRB
    O << ":\n\tldrb"; 
    printPredicateOperand(MI, 3); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    return;
    break;
  case 44:
    // PICLDRH
    O << ":\n\tldrh"; 
    printPredicateOperand(MI, 3); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    return;
    break;
  case 45:
    // PICLDRSB
    O << ":\n\tldrsb"; 
    printPredicateOperand(MI, 3); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    return;
    break;
  case 46:
    // PICLDRSH
    O << ":\n\tldrsh"; 
    printPredicateOperand(MI, 3); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    return;
    break;
  case 47:
    // PICSTR
    O << ":\n\tstr"; 
    printPredicateOperand(MI, 3); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    return;
    break;
  case 48:
    // PICSTRB
    O << ":\n\tstrb"; 
    printPredicateOperand(MI, 3); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    return;
    break;
  case 49:
    // PICSTRH
    O << ":\n\tstrh"; 
    printPredicateOperand(MI, 3); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printAddrModePCOperand(MI, 1); 
    return;
    break;
  case 50:
    // VABALsv2i64, VABAsv2i32, VABAsv4i32, VABDLsv2i64, VABDsv2i32, VABDsv4i...
    O << ".s32\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 51:
    // VABALsv4i32, VABAsv4i16, VABAsv8i16, VABDLsv4i32, VABDsv4i16, VABDsv8i...
    O << ".s16\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 52:
    // VABALsv8i16, VABAsv16i8, VABAsv8i8, VABDLsv8i16, VABDsv16i8, VABDsv8i8...
    O << ".s8\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 53:
    // VABALuv2i64, VABAuv2i32, VABAuv4i32, VABDLuv2i64, VABDuv2i32, VABDuv4i...
    O << ".u32\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 54:
    // VABALuv4i32, VABAuv4i16, VABAuv8i16, VABDLuv4i32, VABDuv4i16, VABDuv8i...
    O << ".u16\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 55:
    // VABALuv8i16, VABAuv16i8, VABAuv8i8, VABDLuv8i16, VABDuv16i8, VABDuv8i8...
    O << ".u8\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 56:
    // VADDHNv2i32, VADDv1i64, VADDv2i64, VMOVNv2i32, VMOVv1i64, VMOVv2i64, V...
    O << ".i64\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 57:
    // VADDHNv4i16, VADDv2i32, VADDv4i32, VCEQv2i32, VCEQv4i32, VCLZv2i32, VC...
    O << ".i32\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 58:
    // VADDHNv8i8, VADDv4i16, VADDv8i16, VCEQv4i16, VCEQv8i16, VCLZv4i16, VCL...
    O << ".i16\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 59:
    // VADDv16i8, VADDv8i8, VCEQv16i8, VCEQv8i8, VCLZv16i8, VCLZv8i8, VMLAv16...
    O << ".i8\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 60:
    // VCNTd, VCNTq, VDUP8d, VDUP8q, VDUPLN8d, VDUPLN8q, VEXTd8, VEXTq8, VLD1...
    O << ".8\t"; 
    break;
  case 61:
    // VCVTDS
    O << ".f64.f32\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    return;
    break;
  case 62:
    // VCVTSD
    O << ".f32.f64\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    return;
    break;
  case 63:
    // VCVTf2sd, VCVTf2sd_sfp, VCVTf2sq, VCVTf2xsd, VCVTf2xsq, VTOSIZS
    O << ".s32.f32\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    break;
  case 64:
    // VCVTf2ud, VCVTf2ud_sfp, VCVTf2uq, VCVTf2xud, VCVTf2xuq, VTOUIZS
    O << ".u32.f32\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    break;
  case 65:
    // VCVTs2fd, VCVTs2fd_sfp, VCVTs2fq, VCVTxs2fd, VCVTxs2fq, VSITOS
    O << ".f32.s32\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    break;
  case 66:
    // VCVTu2fd, VCVTu2fd_sfp, VCVTu2fq, VCVTxu2fd, VCVTxu2fq, VUITOS
    O << ".f32.u32\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    break;
  case 67:
    // VDUP16d, VDUP16q, VDUPLN16d, VDUPLN16q, VEXTd16, VEXTq16, VLD1q16, VRE...
    O << ".16\t"; 
    break;
  case 68:
    // VDUP32d, VDUP32q, VDUPLN32d, VDUPLN32q, VDUPLNfd, VDUPLNfq, VDUPfd, VD...
    O << ".32\t"; 
    break;
  case 69:
    // VLD1d16, VLD2LNd16, VLD2LNq16a, VLD2LNq16b, VLD2d16, VLD2q16, VLD3LNd1...
    O << ".16\t{"; 
    break;
  case 70:
    // VLD1d32, VLD1df, VLD2LNd32, VLD2LNq32a, VLD2LNq32b, VLD2d32, VLD2q32, ...
    O << ".32\t{"; 
    break;
  case 71:
    // VLD1d64, VLD2d64, VLD3d64, VLD4d64, VST1d64, VST2d64, VST3d64, VST4d64
    O << ".64\t{"; 
    break;
  case 72:
    // VLD1d8, VLD2LNd8, VLD2d8, VLD2q8, VLD3LNd8, VLD3d8, VLD3q8a, VLD3q8b, ...
    O << ".8\t{"; 
    break;
  case 73:
    // VLD1q64, VLDRD, VSLIv1i64, VSLIv2i64, VSRIv1i64, VSRIv2i64, VST1q64, V...
    O << ".64\t"; 
    break;
  case 74:
    // VMULLp, VMULpd, VMULpq
    O << ".p8\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    return;
    break;
  case 75:
    // VQADDsv1i64, VQADDsv2i64, VQMOVNsuv2i32, VQMOVNsv2i32, VQRSHLsv1i64, V...
    O << ".s64\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 76:
    // VQADDuv1i64, VQADDuv2i64, VQMOVNuv2i32, VQRSHLuv1i64, VQRSHLuv2i64, VQ...
    O << ".u64\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 77:
    // VSITOD
    O << ".f64.s32\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    return;
    break;
  case 78:
    // VTOSIZD
    O << ".s32.f64\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    return;
    break;
  case 79:
    // VTOUIZD
    O << ".u32.f64\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    return;
    break;
  case 80:
    // VUITOD
    O << ".f64.u32\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    return;
    break;
  case 81:
    // t2ADCrr, t2ADCrs, t2ADDSri, t2ADDSrr, t2ADDSrs, t2ADDrSPi, t2ADDrSPs, ...
    O << ".w\t"; 
    printOperand(MI, 0); 
    break;
  case 82:
    // t2BR_JT
    O << "\n"; 
    printJT2BlockOperand(MI, 2); 
    return;
    break;
  case 83:
    // t2Int_eh_sjlj_setjmp
    O << ", #+8] @ eh_setjmp begin\n\tadr\tr12, 0f\n\torr.w\tr12, r12, #1\n\tstr.w\tr12, ["; 
    printOperand(MI, 0); 
    O << ", #+4]\n\tmovs\tr0, #0\n\tb\t1f\n0:\tmovs\tr0, #1 @ eh_setjmp end\n1:"; 
    return;
    break;
  case 84:
    // t2LDM, t2LDM_RET, t2STM
    printAddrMode4Operand(MI, 0, "wide"); 
    O << "\t"; 
    printAddrMode4Operand(MI, 0); 
    O << ", "; 
    printRegisterList(MI, 4); 
    return;
    break;
  case 85:
    // t2MOVi, t2MOVr, t2MOVrx, t2MVNi
    printPredicateOperand(MI, 2); 
    break;
  case 86:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printPredicateOperand(MI, 4); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    break;
  case 87:
    // tADDrPCi
    O << ", pc, "; 
    printThumbS4ImmOperand(MI, 1); 
    return;
    break;
  case 88:
    // tBR_JTr
    O << "\n\t.align\t2\n"; 
    printJTBlockOperand(MI, 1); 
    return;
    break;
  case 89:
    // tBfar
    O << "\t@ far jump"; 
    return;
    break;
  case 90:
    // tInt_eh_sjlj_setjmp
    O << ", #8]\n\tadr\tr1, 0f\n\tadds\tr1, #1\n\tstr\tr1, ["; 
    printOperand(MI, 0); 
    O << ", #4]\n\tmov\tr1, r12\n\tmovs\tr0, #0\n\tb\t1f\n.align 2\n0:\tmovs\tr0, #1\t@ end eh.setjmp\n1:"; 
    return;
    break;
  case 91:
    // tLDRpci
    O << ".n\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    return;
    break;
  case 92:
    // tMOVi8, tMVN, tRSB
    printPredicateOperand(MI, 3); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 2); 
    break;
  case 93:
    // tPICADD
    O << ":\n\tadd\t"; 
    printOperand(MI, 0); 
    O << ", pc"; 
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 26 unique commands.
  switch ((Bits >> 15) & 31) {
  default:   // unreachable.
  case 0:
    // ADCSSri, ADCSSrr, ADCSSrs, BR_JTadd, MLA, MOVr, MOVrx, MVNr, RSCSri, R...
    printOperand(MI, 1); 
    break;
  case 1:
    // ADCri, ADDri, ANDri, BICri, EORri, ORRri, RSBri, RSCri, SBCri, SUBri
    printSOImmOperand(MI, 2); 
    return;
    break;
  case 2:
    // ADCrr, ADDrr, ANDrr, BICrr, EORrr, MUL, ORRrr, SBCrr, SUBrr, VABALsv2i...
    printOperand(MI, 2); 
    break;
  case 3:
    // ADDSri, ADDSrr, ADDSrs, BFC, Bcc, CLZ, CMNzri, CMNzrr, CMNzrs, CMPri, ...
    printOperand(MI, 0); 
    break;
  case 4:
    // BL_pred, BLr9_pred
    printOperand(MI, 0, "call"); 
    return;
    break;
  case 5:
    // FCONSTD, FCONSTS, VABDfd, VABDfq, VABSD, VABSS, VABSfd, VABSfd_sfp, VA...
    O << ", "; 
    break;
  case 6:
    // LDM, LDM_RET, STM, tLDM, tSTM
    printAddrMode4Operand(MI, 0); 
    O << ", "; 
    printRegisterList(MI, 4); 
    return;
    break;
  case 7:
    // MOVi, MVNi
    printSOImmOperand(MI, 1); 
    return;
    break;
  case 8:
    // MOVs, MVNs
    printSORegOperand(MI, 1); 
    return;
    break;
  case 9:
    // VCMPEZD, VCMPEZS, tRSB
    O << ", #0"; 
    return;
    break;
  case 10:
    // VCVTf2sd, VCVTf2sd_sfp, VCVTf2sq, VCVTf2ud, VCVTf2ud_sfp, VCVTf2uq, VC...
    return;
    break;
  case 11:
    // VLD1q16, VLD1q32, VLD1q64, VLD1q8, VLD1qf
    printOperand(MI, 0, "dregpair"); 
    O << ", "; 
    printAddrMode6Operand(MI, 1); 
    return;
    break;
  case 12:
    // VLDRQ, VSTRQ
    printAddrMode4Operand(MI, 1); 
    O << ", "; 
    printOperand(MI, 0, "dregpair"); 
    return;
    break;
  case 13:
    // VMOVv16i8, VMOVv8i8
    printHex8ImmOperand(MI, 1); 
    return;
    break;
  case 14:
    // VMOVv1i64, VMOVv2i64
    printHex64ImmOperand(MI, 1); 
    return;
    break;
  case 15:
    // VMOVv2i32, VMOVv4i32
    printHex32ImmOperand(MI, 1); 
    return;
    break;
  case 16:
    // VMOVv4i16, VMOVv8i16
    printHex16ImmOperand(MI, 1); 
    return;
    break;
  case 17:
    // VST1d16, VST1d32, VST1d64, VST1d8, VST1df, VST2LNd16, VST2LNd32, VST2L...
    printOperand(MI, 4); 
    break;
  case 18:
    // VST1q16, VST1q32, VST1q64, VST1q8, VST1qf
    printOperand(MI, 4, "dregpair"); 
    O << ", "; 
    printAddrMode6Operand(MI, 0); 
    return;
    break;
  case 19:
    // VST3q16a, VST3q16b, VST3q32a, VST3q32b, VST3q8a, VST3q8b, VST4q16a, VS...
    printOperand(MI, 5); 
    O << ", "; 
    printOperand(MI, 6); 
    O << ", "; 
    printOperand(MI, 7); 
    break;
  case 20:
    // t2LEApcrel, t2LEApcrelJT
    O << ", #"; 
    printOperand(MI, 1); 
    break;
  case 21:
    // t2MOVi, t2MOVr
    O << ".w\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    return;
    break;
  case 22:
    // t2MOVrx, t2MVNi
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    return;
    break;
  case 23:
    // tADC, tADDi8, tAND, tASRrr, tBIC, tEOR, tLSLrr, tLSRrr, tMUL, tORR, tR...
    printOperand(MI, 3); 
    return;
    break;
  case 24:
    // tADDspi, tSUBspi, tSUBspi_
    printThumbS4ImmOperand(MI, 2); 
    return;
    break;
  case 25:
    // tPOP, tPOP_RET, tPUSH
    printRegisterList(MI, 2); 
    return;
    break;
  }

  switch (MI->getOpcode()) {
  case ARM::ADCSSri:
  case ARM::ADCSSrr:
  case ARM::ADCSSrs:
  case ARM::BFC:
  case ARM::CLZ:
  case ARM::CMNzri:
  case ARM::CMNzrr:
  case ARM::CMNzrs:
  case ARM::CMPri:
  case ARM::CMPrr:
  case ARM::CMPrs:
  case ARM::CMPzri:
  case ARM::CMPzrr:
  case ARM::CMPzrs:
  case ARM::LDR:
  case ARM::LDRB:
  case ARM::LDRD:
  case ARM::LDRH:
  case ARM::LDRSB:
  case ARM::LDRSH:
  case ARM::LDRcp:
  case ARM::MOVCCi:
  case ARM::MOVCCr:
  case ARM::MOVCCs:
  case ARM::MOVTi16:
  case ARM::MOVi16:
  case ARM::MOVi2pieces:
  case ARM::RBIT:
  case ARM::REV:
  case ARM::REV16:
  case ARM::REVSH:
  case ARM::RSCSri:
  case ARM::RSCSrs:
  case ARM::SBCSSri:
  case ARM::SBCSSrr:
  case ARM::SBCSSrs:
  case ARM::STR:
  case ARM::STRB:
  case ARM::STRD:
  case ARM::STRH:
  case ARM::SXTBr:
  case ARM::SXTHr:
  case ARM::TEQri:
  case ARM::TEQrr:
  case ARM::TEQrs:
  case ARM::TSTri:
  case ARM::TSTrr:
  case ARM::TSTrs:
  case ARM::UXTB16r:
  case ARM::UXTBr:
  case ARM::UXTHr:
  case ARM::VABALsv2i64:
  case ARM::VABALsv4i32:
  case ARM::VABALsv8i16:
  case ARM::VABALuv2i64:
  case ARM::VABALuv4i32:
  case ARM::VABALuv8i16:
  case ARM::VABAsv16i8:
  case ARM::VABAsv2i32:
  case ARM::VABAsv4i16:
  case ARM::VABAsv4i32:
  case ARM::VABAsv8i16:
  case ARM::VABAsv8i8:
  case ARM::VABAuv16i8:
  case ARM::VABAuv2i32:
  case ARM::VABAuv4i16:
  case ARM::VABAuv4i32:
  case ARM::VABAuv8i16:
  case ARM::VABAuv8i8:
  case ARM::VABDLsv2i64:
  case ARM::VABDLsv4i32:
  case ARM::VABDLsv8i16:
  case ARM::VABDLuv2i64:
  case ARM::VABDLuv4i32:
  case ARM::VABDLuv8i16:
  case ARM::VABDsv16i8:
  case ARM::VABDsv2i32:
  case ARM::VABDsv4i16:
  case ARM::VABDsv4i32:
  case ARM::VABDsv8i16:
  case ARM::VABDsv8i8:
  case ARM::VABDuv16i8:
  case ARM::VABDuv2i32:
  case ARM::VABDuv4i16:
  case ARM::VABDuv4i32:
  case ARM::VABDuv8i16:
  case ARM::VABDuv8i8:
  case ARM::VADDHNv2i32:
  case ARM::VADDHNv4i16:
  case ARM::VADDHNv8i8:
  case ARM::VADDLsv2i64:
  case ARM::VADDLsv4i32:
  case ARM::VADDLsv8i16:
  case ARM::VADDLuv2i64:
  case ARM::VADDLuv4i32:
  case ARM::VADDLuv8i16:
  case ARM::VADDWsv2i64:
  case ARM::VADDWsv4i32:
  case ARM::VADDWsv8i16:
  case ARM::VADDWuv2i64:
  case ARM::VADDWuv4i32:
  case ARM::VADDWuv8i16:
  case ARM::VADDv16i8:
  case ARM::VADDv1i64:
  case ARM::VADDv2i32:
  case ARM::VADDv2i64:
  case ARM::VADDv4i16:
  case ARM::VADDv4i32:
  case ARM::VADDv8i16:
  case ARM::VADDv8i8:
  case ARM::VCEQv16i8:
  case ARM::VCEQv2i32:
  case ARM::VCEQv4i16:
  case ARM::VCEQv4i32:
  case ARM::VCEQv8i16:
  case ARM::VCEQv8i8:
  case ARM::VCGEsv16i8:
  case ARM::VCGEsv2i32:
  case ARM::VCGEsv4i16:
  case ARM::VCGEsv4i32:
  case ARM::VCGEsv8i16:
  case ARM::VCGEsv8i8:
  case ARM::VCGEuv16i8:
  case ARM::VCGEuv2i32:
  case ARM::VCGEuv4i16:
  case ARM::VCGEuv4i32:
  case ARM::VCGEuv8i16:
  case ARM::VCGEuv8i8:
  case ARM::VCGTsv16i8:
  case ARM::VCGTsv2i32:
  case ARM::VCGTsv4i16:
  case ARM::VCGTsv4i32:
  case ARM::VCGTsv8i16:
  case ARM::VCGTsv8i8:
  case ARM::VCGTuv16i8:
  case ARM::VCGTuv2i32:
  case ARM::VCGTuv4i16:
  case ARM::VCGTuv4i32:
  case ARM::VCGTuv8i16:
  case ARM::VCGTuv8i8:
  case ARM::VCNTd:
  case ARM::VCNTq:
  case ARM::VDUP16d:
  case ARM::VDUP16q:
  case ARM::VDUP32d:
  case ARM::VDUP32q:
  case ARM::VDUP8d:
  case ARM::VDUP8q:
  case ARM::VDUPfd:
  case ARM::VDUPfdf:
  case ARM::VDUPfq:
  case ARM::VDUPfqf:
  case ARM::VHADDsv16i8:
  case ARM::VHADDsv2i32:
  case ARM::VHADDsv4i16:
  case ARM::VHADDsv4i32:
  case ARM::VHADDsv8i16:
  case ARM::VHADDsv8i8:
  case ARM::VHADDuv16i8:
  case ARM::VHADDuv2i32:
  case ARM::VHADDuv4i16:
  case ARM::VHADDuv4i32:
  case ARM::VHADDuv8i16:
  case ARM::VHADDuv8i8:
  case ARM::VHSUBsv16i8:
  case ARM::VHSUBsv2i32:
  case ARM::VHSUBsv4i16:
  case ARM::VHSUBsv4i32:
  case ARM::VHSUBsv8i16:
  case ARM::VHSUBsv8i8:
  case ARM::VHSUBuv16i8:
  case ARM::VHSUBuv2i32:
  case ARM::VHSUBuv4i16:
  case ARM::VHSUBuv4i32:
  case ARM::VHSUBuv8i16:
  case ARM::VHSUBuv8i8:
  case ARM::VLDRD:
  case ARM::VLDRS:
  case ARM::VMAXsv16i8:
  case ARM::VMAXsv2i32:
  case ARM::VMAXsv4i16:
  case ARM::VMAXsv4i32:
  case ARM::VMAXsv8i16:
  case ARM::VMAXsv8i8:
  case ARM::VMAXuv16i8:
  case ARM::VMAXuv2i32:
  case ARM::VMAXuv4i16:
  case ARM::VMAXuv4i32:
  case ARM::VMAXuv8i16:
  case ARM::VMAXuv8i8:
  case ARM::VMINsv16i8:
  case ARM::VMINsv2i32:
  case ARM::VMINsv4i16:
  case ARM::VMINsv4i32:
  case ARM::VMINsv8i16:
  case ARM::VMINsv8i8:
  case ARM::VMINuv16i8:
  case ARM::VMINuv2i32:
  case ARM::VMINuv4i16:
  case ARM::VMINuv4i32:
  case ARM::VMINuv8i16:
  case ARM::VMINuv8i8:
  case ARM::VMLALsv2i64:
  case ARM::VMLALsv4i32:
  case ARM::VMLALsv8i16:
  case ARM::VMLALuv2i64:
  case ARM::VMLALuv4i32:
  case ARM::VMLALuv8i16:
  case ARM::VMLAv16i8:
  case ARM::VMLAv2i32:
  case ARM::VMLAv4i16:
  case ARM::VMLAv4i32:
  case ARM::VMLAv8i16:
  case ARM::VMLAv8i8:
  case ARM::VMLSLsv2i64:
  case ARM::VMLSLsv4i32:
  case ARM::VMLSLsv8i16:
  case ARM::VMLSLuv2i64:
  case ARM::VMLSLuv4i32:
  case ARM::VMLSLuv8i16:
  case ARM::VMLSv16i8:
  case ARM::VMLSv2i32:
  case ARM::VMLSv4i16:
  case ARM::VMLSv4i32:
  case ARM::VMLSv8i16:
  case ARM::VMLSv8i8:
  case ARM::VMOVDneon:
  case ARM::VMOVQ:
  case ARM::VMOVRS:
  case ARM::VMOVSR:
  case ARM::VMULLsv2i64:
  case ARM::VMULLsv4i32:
  case ARM::VMULLsv8i16:
  case ARM::VMULLuv2i64:
  case ARM::VMULLuv4i32:
  case ARM::VMULLuv8i16:
  case ARM::VMULv16i8:
  case ARM::VMULv2i32:
  case ARM::VMULv4i16:
  case ARM::VMULv4i32:
  case ARM::VMULv8i16:
  case ARM::VMULv8i8:
  case ARM::VMVNd:
  case ARM::VMVNq:
  case ARM::VPADDi16:
  case ARM::VPADDi32:
  case ARM::VPADDi8:
  case ARM::VPMAXs16:
  case ARM::VPMAXs32:
  case ARM::VPMAXs8:
  case ARM::VPMAXu16:
  case ARM::VPMAXu32:
  case ARM::VPMAXu8:
  case ARM::VPMINs16:
  case ARM::VPMINs32:
  case ARM::VPMINs8:
  case ARM::VPMINu16:
  case ARM::VPMINu32:
  case ARM::VPMINu8:
  case ARM::VQADDsv16i8:
  case ARM::VQADDsv1i64:
  case ARM::VQADDsv2i32:
  case ARM::VQADDsv2i64:
  case ARM::VQADDsv4i16:
  case ARM::VQADDsv4i32:
  case ARM::VQADDsv8i16:
  case ARM::VQADDsv8i8:
  case ARM::VQADDuv16i8:
  case ARM::VQADDuv1i64:
  case ARM::VQADDuv2i32:
  case ARM::VQADDuv2i64:
  case ARM::VQADDuv4i16:
  case ARM::VQADDuv4i32:
  case ARM::VQADDuv8i16:
  case ARM::VQADDuv8i8:
  case ARM::VQDMLALv2i64:
  case ARM::VQDMLALv4i32:
  case ARM::VQDMLSLv2i64:
  case ARM::VQDMLSLv4i32:
  case ARM::VQDMULHv2i32:
  case ARM::VQDMULHv4i16:
  case ARM::VQDMULHv4i32:
  case ARM::VQDMULHv8i16:
  case ARM::VQDMULLv2i64:
  case ARM::VQDMULLv4i32:
  case ARM::VQRDMULHv2i32:
  case ARM::VQRDMULHv4i16:
  case ARM::VQRDMULHv4i32:
  case ARM::VQRDMULHv8i16:
  case ARM::VQRSHLsv16i8:
  case ARM::VQRSHLsv1i64:
  case ARM::VQRSHLsv2i32:
  case ARM::VQRSHLsv2i64:
  case ARM::VQRSHLsv4i16:
  case ARM::VQRSHLsv4i32:
  case ARM::VQRSHLsv8i16:
  case ARM::VQRSHLsv8i8:
  case ARM::VQRSHLuv16i8:
  case ARM::VQRSHLuv1i64:
  case ARM::VQRSHLuv2i32:
  case ARM::VQRSHLuv2i64:
  case ARM::VQRSHLuv4i16:
  case ARM::VQRSHLuv4i32:
  case ARM::VQRSHLuv8i16:
  case ARM::VQRSHLuv8i8:
  case ARM::VQRSHRNsv2i32:
  case ARM::VQRSHRNsv4i16:
  case ARM::VQRSHRNsv8i8:
  case ARM::VQRSHRNuv2i32:
  case ARM::VQRSHRNuv4i16:
  case ARM::VQRSHRNuv8i8:
  case ARM::VQRSHRUNv2i32:
  case ARM::VQRSHRUNv4i16:
  case ARM::VQRSHRUNv8i8:
  case ARM::VQSHLsiv16i8:
  case ARM::VQSHLsiv1i64:
  case ARM::VQSHLsiv2i32:
  case ARM::VQSHLsiv2i64:
  case ARM::VQSHLsiv4i16:
  case ARM::VQSHLsiv4i32:
  case ARM::VQSHLsiv8i16:
  case ARM::VQSHLsiv8i8:
  case ARM::VQSHLsuv16i8:
  case ARM::VQSHLsuv1i64:
  case ARM::VQSHLsuv2i32:
  case ARM::VQSHLsuv2i64:
  case ARM::VQSHLsuv4i16:
  case ARM::VQSHLsuv4i32:
  case ARM::VQSHLsuv8i16:
  case ARM::VQSHLsuv8i8:
  case ARM::VQSHLsv16i8:
  case ARM::VQSHLsv1i64:
  case ARM::VQSHLsv2i32:
  case ARM::VQSHLsv2i64:
  case ARM::VQSHLsv4i16:
  case ARM::VQSHLsv4i32:
  case ARM::VQSHLsv8i16:
  case ARM::VQSHLsv8i8:
  case ARM::VQSHLuiv16i8:
  case ARM::VQSHLuiv1i64:
  case ARM::VQSHLuiv2i32:
  case ARM::VQSHLuiv2i64:
  case ARM::VQSHLuiv4i16:
  case ARM::VQSHLuiv4i32:
  case ARM::VQSHLuiv8i16:
  case ARM::VQSHLuiv8i8:
  case ARM::VQSHLuv16i8:
  case ARM::VQSHLuv1i64:
  case ARM::VQSHLuv2i32:
  case ARM::VQSHLuv2i64:
  case ARM::VQSHLuv4i16:
  case ARM::VQSHLuv4i32:
  case ARM::VQSHLuv8i16:
  case ARM::VQSHLuv8i8:
  case ARM::VQSHRNsv2i32:
  case ARM::VQSHRNsv4i16:
  case ARM::VQSHRNsv8i8:
  case ARM::VQSHRNuv2i32:
  case ARM::VQSHRNuv4i16:
  case ARM::VQSHRNuv8i8:
  case ARM::VQSHRUNv2i32:
  case ARM::VQSHRUNv4i16:
  case ARM::VQSHRUNv8i8:
  case ARM::VQSUBsv16i8:
  case ARM::VQSUBsv1i64:
  case ARM::VQSUBsv2i32:
  case ARM::VQSUBsv2i64:
  case ARM::VQSUBsv4i16:
  case ARM::VQSUBsv4i32:
  case ARM::VQSUBsv8i16:
  case ARM::VQSUBsv8i8:
  case ARM::VQSUBuv16i8:
  case ARM::VQSUBuv1i64:
  case ARM::VQSUBuv2i32:
  case ARM::VQSUBuv2i64:
  case ARM::VQSUBuv4i16:
  case ARM::VQSUBuv4i32:
  case ARM::VQSUBuv8i16:
  case ARM::VQSUBuv8i8:
  case ARM::VRADDHNv2i32:
  case ARM::VRADDHNv4i16:
  case ARM::VRADDHNv8i8:
  case ARM::VREV16d8:
  case ARM::VREV16q8:
  case ARM::VREV32d16:
  case ARM::VREV32d8:
  case ARM::VREV32q16:
  case ARM::VREV32q8:
  case ARM::VREV64d16:
  case ARM::VREV64d32:
  case ARM::VREV64d8:
  case ARM::VREV64df:
  case ARM::VREV64q16:
  case ARM::VREV64q32:
  case ARM::VREV64q8:
  case ARM::VREV64qf:
  case ARM::VRHADDsv16i8:
  case ARM::VRHADDsv2i32:
  case ARM::VRHADDsv4i16:
  case ARM::VRHADDsv4i32:
  case ARM::VRHADDsv8i16:
  case ARM::VRHADDsv8i8:
  case ARM::VRHADDuv16i8:
  case ARM::VRHADDuv2i32:
  case ARM::VRHADDuv4i16:
  case ARM::VRHADDuv4i32:
  case ARM::VRHADDuv8i16:
  case ARM::VRHADDuv8i8:
  case ARM::VRSHLsv16i8:
  case ARM::VRSHLsv1i64:
  case ARM::VRSHLsv2i32:
  case ARM::VRSHLsv2i64:
  case ARM::VRSHLsv4i16:
  case ARM::VRSHLsv4i32:
  case ARM::VRSHLsv8i16:
  case ARM::VRSHLsv8i8:
  case ARM::VRSHLuv16i8:
  case ARM::VRSHLuv1i64:
  case ARM::VRSHLuv2i32:
  case ARM::VRSHLuv2i64:
  case ARM::VRSHLuv4i16:
  case ARM::VRSHLuv4i32:
  case ARM::VRSHLuv8i16:
  case ARM::VRSHLuv8i8:
  case ARM::VRSHRNv2i32:
  case ARM::VRSHRNv4i16:
  case ARM::VRSHRNv8i8:
  case ARM::VRSHRsv16i8:
  case ARM::VRSHRsv1i64:
  case ARM::VRSHRsv2i32:
  case ARM::VRSHRsv2i64:
  case ARM::VRSHRsv4i16:
  case ARM::VRSHRsv4i32:
  case ARM::VRSHRsv8i16:
  case ARM::VRSHRsv8i8:
  case ARM::VRSHRuv16i8:
  case ARM::VRSHRuv1i64:
  case ARM::VRSHRuv2i32:
  case ARM::VRSHRuv2i64:
  case ARM::VRSHRuv4i16:
  case ARM::VRSHRuv4i32:
  case ARM::VRSHRuv8i16:
  case ARM::VRSHRuv8i8:
  case ARM::VRSRAsv16i8:
  case ARM::VRSRAsv1i64:
  case ARM::VRSRAsv2i32:
  case ARM::VRSRAsv2i64:
  case ARM::VRSRAsv4i16:
  case ARM::VRSRAsv4i32:
  case ARM::VRSRAsv8i16:
  case ARM::VRSRAsv8i8:
  case ARM::VRSRAuv16i8:
  case ARM::VRSRAuv1i64:
  case ARM::VRSRAuv2i32:
  case ARM::VRSRAuv2i64:
  case ARM::VRSRAuv4i16:
  case ARM::VRSRAuv4i32:
  case ARM::VRSRAuv8i16:
  case ARM::VRSRAuv8i8:
  case ARM::VRSUBHNv2i32:
  case ARM::VRSUBHNv4i16:
  case ARM::VRSUBHNv8i8:
  case ARM::VSHLLi16:
  case ARM::VSHLLi32:
  case ARM::VSHLLi8:
  case ARM::VSHLLsv2i64:
  case ARM::VSHLLsv4i32:
  case ARM::VSHLLsv8i16:
  case ARM::VSHLLuv2i64:
  case ARM::VSHLLuv4i32:
  case ARM::VSHLLuv8i16:
  case ARM::VSHLiv16i8:
  case ARM::VSHLiv1i64:
  case ARM::VSHLiv2i32:
  case ARM::VSHLiv2i64:
  case ARM::VSHLiv4i16:
  case ARM::VSHLiv4i32:
  case ARM::VSHLiv8i16:
  case ARM::VSHLiv8i8:
  case ARM::VSHLsv16i8:
  case ARM::VSHLsv1i64:
  case ARM::VSHLsv2i32:
  case ARM::VSHLsv2i64:
  case ARM::VSHLsv4i16:
  case ARM::VSHLsv4i32:
  case ARM::VSHLsv8i16:
  case ARM::VSHLsv8i8:
  case ARM::VSHLuv16i8:
  case ARM::VSHLuv1i64:
  case ARM::VSHLuv2i32:
  case ARM::VSHLuv2i64:
  case ARM::VSHLuv4i16:
  case ARM::VSHLuv4i32:
  case ARM::VSHLuv8i16:
  case ARM::VSHLuv8i8:
  case ARM::VSHRNv2i32:
  case ARM::VSHRNv4i16:
  case ARM::VSHRNv8i8:
  case ARM::VSHRsv16i8:
  case ARM::VSHRsv1i64:
  case ARM::VSHRsv2i32:
  case ARM::VSHRsv2i64:
  case ARM::VSHRsv4i16:
  case ARM::VSHRsv4i32:
  case ARM::VSHRsv8i16:
  case ARM::VSHRsv8i8:
  case ARM::VSHRuv16i8:
  case ARM::VSHRuv1i64:
  case ARM::VSHRuv2i32:
  case ARM::VSHRuv2i64:
  case ARM::VSHRuv4i16:
  case ARM::VSHRuv4i32:
  case ARM::VSHRuv8i16:
  case ARM::VSHRuv8i8:
  case ARM::VSRAsv16i8:
  case ARM::VSRAsv1i64:
  case ARM::VSRAsv2i32:
  case ARM::VSRAsv2i64:
  case ARM::VSRAsv4i16:
  case ARM::VSRAsv4i32:
  case ARM::VSRAsv8i16:
  case ARM::VSRAsv8i8:
  case ARM::VSRAuv16i8:
  case ARM::VSRAuv1i64:
  case ARM::VSRAuv2i32:
  case ARM::VSRAuv2i64:
  case ARM::VSRAuv4i16:
  case ARM::VSRAuv4i32:
  case ARM::VSRAuv8i16:
  case ARM::VSRAuv8i8:
  case ARM::VSTRD:
  case ARM::VSTRS:
  case ARM::VSUBHNv2i32:
  case ARM::VSUBHNv4i16:
  case ARM::VSUBHNv8i8:
  case ARM::VSUBLsv2i64:
  case ARM::VSUBLsv4i32:
  case ARM::VSUBLsv8i16:
  case ARM::VSUBLuv2i64:
  case ARM::VSUBLuv4i32:
  case ARM::VSUBLuv8i16:
  case ARM::VSUBWsv2i64:
  case ARM::VSUBWsv4i32:
  case ARM::VSUBWsv8i16:
  case ARM::VSUBWuv2i64:
  case ARM::VSUBWuv4i32:
  case ARM::VSUBWuv8i16:
  case ARM::VSUBv16i8:
  case ARM::VSUBv1i64:
  case ARM::VSUBv2i32:
  case ARM::VSUBv2i64:
  case ARM::VSUBv4i16:
  case ARM::VSUBv4i32:
  case ARM::VSUBv8i16:
  case ARM::VSUBv8i8:
  case ARM::VTRNd16:
  case ARM::VTRNd32:
  case ARM::VTRNd8:
  case ARM::VTRNq16:
  case ARM::VTRNq32:
  case ARM::VTRNq8:
  case ARM::VUZPd16:
  case ARM::VUZPd32:
  case ARM::VUZPd8:
  case ARM::VUZPq16:
  case ARM::VUZPq32:
  case ARM::VUZPq8:
  case ARM::VZIPd16:
  case ARM::VZIPd32:
  case ARM::VZIPd8:
  case ARM::VZIPq16:
  case ARM::VZIPq32:
  case ARM::VZIPq8:
  case ARM::t2ADCSri:
  case ARM::t2ADCSrr:
  case ARM::t2ADCSrs:
  case ARM::t2BFC:
  case ARM::t2CLZ:
  case ARM::t2LDRBi8:
  case ARM::t2LDRDi8:
  case ARM::t2LDRDpci:
  case ARM::t2LDRHi8:
  case ARM::t2LDRSBi8:
  case ARM::t2LDRSHi8:
  case ARM::t2LDRi8:
  case ARM::t2MOVTi16:
  case ARM::t2MOVi16:
  case ARM::t2RBIT:
  case ARM::t2SBCSri:
  case ARM::t2SBCSrr:
  case ARM::t2SBCSrs:
  case ARM::t2STRBi8:
  case ARM::t2STRDi8:
  case ARM::t2STRHi8:
  case ARM::t2STRi8:
  case ARM::t2SUBrSPi12_:
  case ARM::t2SUBrSPi_:
  case ARM::t2SUBrSPs_:
  case ARM::tADDhirr:
  case ARM::tADDi3:
  case ARM::tADDrSPi:
  case ARM::tADDrr:
  case ARM::tASRri:
  case ARM::tCMNz:
  case ARM::tCMPhir:
  case ARM::tCMPi8:
  case ARM::tCMPr:
  case ARM::tCMPzhir:
  case ARM::tCMPzi8:
  case ARM::tCMPzr:
  case ARM::tLDR:
  case ARM::tLDRB:
  case ARM::tLDRBi:
  case ARM::tLDRH:
  case ARM::tLDRHi:
  case ARM::tLDRSB:
  case ARM::tLDRSH:
  case ARM::tLDRcp:
  case ARM::tLDRi:
  case ARM::tLDRspi:
  case ARM::tLSLri:
  case ARM::tLSRri:
  case ARM::tMOVCCi:
  case ARM::tMOVCCr:
  case ARM::tREV:
  case ARM::tREV16:
  case ARM::tREVSH:
  case ARM::tRestore:
  case ARM::tSTR:
  case ARM::tSTRB:
  case ARM::tSTRBi:
  case ARM::tSTRH:
  case ARM::tSTRHi:
  case ARM::tSTRi:
  case ARM::tSTRspi:
  case ARM::tSUBi3:
  case ARM::tSUBrr:
  case ARM::tSXTB:
  case ARM::tSXTH:
  case ARM::tSpill:
  case ARM::tTST:
  case ARM::tUXTB:
  case ARM::tUXTH:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADCSSri: 
    case ARM::MOVCCi: 
    case ARM::RSCSri: 
    case ARM::SBCSSri: printSOImmOperand(MI, 2); break;
    case ARM::ADCSSrr: 
    case ARM::MOVCCr: 
    case ARM::MOVTi16: 
    case ARM::SBCSSrr: 
    case ARM::VABDLsv2i64: 
    case ARM::VABDLsv4i32: 
    case ARM::VABDLsv8i16: 
    case ARM::VABDLuv2i64: 
    case ARM::VABDLuv4i32: 
    case ARM::VABDLuv8i16: 
    case ARM::VABDsv16i8: 
    case ARM::VABDsv2i32: 
    case ARM::VABDsv4i16: 
    case ARM::VABDsv4i32: 
    case ARM::VABDsv8i16: 
    case ARM::VABDsv8i8: 
    case ARM::VABDuv16i8: 
    case ARM::VABDuv2i32: 
    case ARM::VABDuv4i16: 
    case ARM::VABDuv4i32: 
    case ARM::VABDuv8i16: 
    case ARM::VABDuv8i8: 
    case ARM::VADDHNv2i32: 
    case ARM::VADDHNv4i16: 
    case ARM::VADDHNv8i8: 
    case ARM::VADDLsv2i64: 
    case ARM::VADDLsv4i32: 
    case ARM::VADDLsv8i16: 
    case ARM::VADDLuv2i64: 
    case ARM::VADDLuv4i32: 
    case ARM::VADDLuv8i16: 
    case ARM::VADDWsv2i64: 
    case ARM::VADDWsv4i32: 
    case ARM::VADDWsv8i16: 
    case ARM::VADDWuv2i64: 
    case ARM::VADDWuv4i32: 
    case ARM::VADDWuv8i16: 
    case ARM::VADDv16i8: 
    case ARM::VADDv1i64: 
    case ARM::VADDv2i32: 
    case ARM::VADDv2i64: 
    case ARM::VADDv4i16: 
    case ARM::VADDv4i32: 
    case ARM::VADDv8i16: 
    case ARM::VADDv8i8: 
    case ARM::VCEQv16i8: 
    case ARM::VCEQv2i32: 
    case ARM::VCEQv4i16: 
    case ARM::VCEQv4i32: 
    case ARM::VCEQv8i16: 
    case ARM::VCEQv8i8: 
    case ARM::VCGEsv16i8: 
    case ARM::VCGEsv2i32: 
    case ARM::VCGEsv4i16: 
    case ARM::VCGEsv4i32: 
    case ARM::VCGEsv8i16: 
    case ARM::VCGEsv8i8: 
    case ARM::VCGEuv16i8: 
    case ARM::VCGEuv2i32: 
    case ARM::VCGEuv4i16: 
    case ARM::VCGEuv4i32: 
    case ARM::VCGEuv8i16: 
    case ARM::VCGEuv8i8: 
    case ARM::VCGTsv16i8: 
    case ARM::VCGTsv2i32: 
    case ARM::VCGTsv4i16: 
    case ARM::VCGTsv4i32: 
    case ARM::VCGTsv8i16: 
    case ARM::VCGTsv8i8: 
    case ARM::VCGTuv16i8: 
    case ARM::VCGTuv2i32: 
    case ARM::VCGTuv4i16: 
    case ARM::VCGTuv4i32: 
    case ARM::VCGTuv8i16: 
    case ARM::VCGTuv8i8: 
    case ARM::VHADDsv16i8: 
    case ARM::VHADDsv2i32: 
    case ARM::VHADDsv4i16: 
    case ARM::VHADDsv4i32: 
    case ARM::VHADDsv8i16: 
    case ARM::VHADDsv8i8: 
    case ARM::VHADDuv16i8: 
    case ARM::VHADDuv2i32: 
    case ARM::VHADDuv4i16: 
    case ARM::VHADDuv4i32: 
    case ARM::VHADDuv8i16: 
    case ARM::VHADDuv8i8: 
    case ARM::VHSUBsv16i8: 
    case ARM::VHSUBsv2i32: 
    case ARM::VHSUBsv4i16: 
    case ARM::VHSUBsv4i32: 
    case ARM::VHSUBsv8i16: 
    case ARM::VHSUBsv8i8: 
    case ARM::VHSUBuv16i8: 
    case ARM::VHSUBuv2i32: 
    case ARM::VHSUBuv4i16: 
    case ARM::VHSUBuv4i32: 
    case ARM::VHSUBuv8i16: 
    case ARM::VHSUBuv8i8: 
    case ARM::VMAXsv16i8: 
    case ARM::VMAXsv2i32: 
    case ARM::VMAXsv4i16: 
    case ARM::VMAXsv4i32: 
    case ARM::VMAXsv8i16: 
    case ARM::VMAXsv8i8: 
    case ARM::VMAXuv16i8: 
    case ARM::VMAXuv2i32: 
    case ARM::VMAXuv4i16: 
    case ARM::VMAXuv4i32: 
    case ARM::VMAXuv8i16: 
    case ARM::VMAXuv8i8: 
    case ARM::VMINsv16i8: 
    case ARM::VMINsv2i32: 
    case ARM::VMINsv4i16: 
    case ARM::VMINsv4i32: 
    case ARM::VMINsv8i16: 
    case ARM::VMINsv8i8: 
    case ARM::VMINuv16i8: 
    case ARM::VMINuv2i32: 
    case ARM::VMINuv4i16: 
    case ARM::VMINuv4i32: 
    case ARM::VMINuv8i16: 
    case ARM::VMINuv8i8: 
    case ARM::VMULLsv2i64: 
    case ARM::VMULLsv4i32: 
    case ARM::VMULLsv8i16: 
    case ARM::VMULLuv2i64: 
    case ARM::VMULLuv4i32: 
    case ARM::VMULLuv8i16: 
    case ARM::VMULv16i8: 
    case ARM::VMULv2i32: 
    case ARM::VMULv4i16: 
    case ARM::VMULv4i32: 
    case ARM::VMULv8i16: 
    case ARM::VMULv8i8: 
    case ARM::VPADDi16: 
    case ARM::VPADDi32: 
    case ARM::VPADDi8: 
    case ARM::VPMAXs16: 
    case ARM::VPMAXs32: 
    case ARM::VPMAXs8: 
    case ARM::VPMAXu16: 
    case ARM::VPMAXu32: 
    case ARM::VPMAXu8: 
    case ARM::VPMINs16: 
    case ARM::VPMINs32: 
    case ARM::VPMINs8: 
    case ARM::VPMINu16: 
    case ARM::VPMINu32: 
    case ARM::VPMINu8: 
    case ARM::VQADDsv16i8: 
    case ARM::VQADDsv1i64: 
    case ARM::VQADDsv2i32: 
    case ARM::VQADDsv2i64: 
    case ARM::VQADDsv4i16: 
    case ARM::VQADDsv4i32: 
    case ARM::VQADDsv8i16: 
    case ARM::VQADDsv8i8: 
    case ARM::VQADDuv16i8: 
    case ARM::VQADDuv1i64: 
    case ARM::VQADDuv2i32: 
    case ARM::VQADDuv2i64: 
    case ARM::VQADDuv4i16: 
    case ARM::VQADDuv4i32: 
    case ARM::VQADDuv8i16: 
    case ARM::VQADDuv8i8: 
    case ARM::VQDMULHv2i32: 
    case ARM::VQDMULHv4i16: 
    case ARM::VQDMULHv4i32: 
    case ARM::VQDMULHv8i16: 
    case ARM::VQDMULLv2i64: 
    case ARM::VQDMULLv4i32: 
    case ARM::VQRDMULHv2i32: 
    case ARM::VQRDMULHv4i16: 
    case ARM::VQRDMULHv4i32: 
    case ARM::VQRDMULHv8i16: 
    case ARM::VQRSHLsv16i8: 
    case ARM::VQRSHLsv1i64: 
    case ARM::VQRSHLsv2i32: 
    case ARM::VQRSHLsv2i64: 
    case ARM::VQRSHLsv4i16: 
    case ARM::VQRSHLsv4i32: 
    case ARM::VQRSHLsv8i16: 
    case ARM::VQRSHLsv8i8: 
    case ARM::VQRSHLuv16i8: 
    case ARM::VQRSHLuv1i64: 
    case ARM::VQRSHLuv2i32: 
    case ARM::VQRSHLuv2i64: 
    case ARM::VQRSHLuv4i16: 
    case ARM::VQRSHLuv4i32: 
    case ARM::VQRSHLuv8i16: 
    case ARM::VQRSHLuv8i8: 
    case ARM::VQRSHRNsv2i32: 
    case ARM::VQRSHRNsv4i16: 
    case ARM::VQRSHRNsv8i8: 
    case ARM::VQRSHRNuv2i32: 
    case ARM::VQRSHRNuv4i16: 
    case ARM::VQRSHRNuv8i8: 
    case ARM::VQRSHRUNv2i32: 
    case ARM::VQRSHRUNv4i16: 
    case ARM::VQRSHRUNv8i8: 
    case ARM::VQSHLsiv16i8: 
    case ARM::VQSHLsiv1i64: 
    case ARM::VQSHLsiv2i32: 
    case ARM::VQSHLsiv2i64: 
    case ARM::VQSHLsiv4i16: 
    case ARM::VQSHLsiv4i32: 
    case ARM::VQSHLsiv8i16: 
    case ARM::VQSHLsiv8i8: 
    case ARM::VQSHLsuv16i8: 
    case ARM::VQSHLsuv1i64: 
    case ARM::VQSHLsuv2i32: 
    case ARM::VQSHLsuv2i64: 
    case ARM::VQSHLsuv4i16: 
    case ARM::VQSHLsuv4i32: 
    case ARM::VQSHLsuv8i16: 
    case ARM::VQSHLsuv8i8: 
    case ARM::VQSHLsv16i8: 
    case ARM::VQSHLsv1i64: 
    case ARM::VQSHLsv2i32: 
    case ARM::VQSHLsv2i64: 
    case ARM::VQSHLsv4i16: 
    case ARM::VQSHLsv4i32: 
    case ARM::VQSHLsv8i16: 
    case ARM::VQSHLsv8i8: 
    case ARM::VQSHLuiv16i8: 
    case ARM::VQSHLuiv1i64: 
    case ARM::VQSHLuiv2i32: 
    case ARM::VQSHLuiv2i64: 
    case ARM::VQSHLuiv4i16: 
    case ARM::VQSHLuiv4i32: 
    case ARM::VQSHLuiv8i16: 
    case ARM::VQSHLuiv8i8: 
    case ARM::VQSHLuv16i8: 
    case ARM::VQSHLuv1i64: 
    case ARM::VQSHLuv2i32: 
    case ARM::VQSHLuv2i64: 
    case ARM::VQSHLuv4i16: 
    case ARM::VQSHLuv4i32: 
    case ARM::VQSHLuv8i16: 
    case ARM::VQSHLuv8i8: 
    case ARM::VQSHRNsv2i32: 
    case ARM::VQSHRNsv4i16: 
    case ARM::VQSHRNsv8i8: 
    case ARM::VQSHRNuv2i32: 
    case ARM::VQSHRNuv4i16: 
    case ARM::VQSHRNuv8i8: 
    case ARM::VQSHRUNv2i32: 
    case ARM::VQSHRUNv4i16: 
    case ARM::VQSHRUNv8i8: 
    case ARM::VQSUBsv16i8: 
    case ARM::VQSUBsv1i64: 
    case ARM::VQSUBsv2i32: 
    case ARM::VQSUBsv2i64: 
    case ARM::VQSUBsv4i16: 
    case ARM::VQSUBsv4i32: 
    case ARM::VQSUBsv8i16: 
    case ARM::VQSUBsv8i8: 
    case ARM::VQSUBuv16i8: 
    case ARM::VQSUBuv1i64: 
    case ARM::VQSUBuv2i32: 
    case ARM::VQSUBuv2i64: 
    case ARM::VQSUBuv4i16: 
    case ARM::VQSUBuv4i32: 
    case ARM::VQSUBuv8i16: 
    case ARM::VQSUBuv8i8: 
    case ARM::VRADDHNv2i32: 
    case ARM::VRADDHNv4i16: 
    case ARM::VRADDHNv8i8: 
    case ARM::VRHADDsv16i8: 
    case ARM::VRHADDsv2i32: 
    case ARM::VRHADDsv4i16: 
    case ARM::VRHADDsv4i32: 
    case ARM::VRHADDsv8i16: 
    case ARM::VRHADDsv8i8: 
    case ARM::VRHADDuv16i8: 
    case ARM::VRHADDuv2i32: 
    case ARM::VRHADDuv4i16: 
    case ARM::VRHADDuv4i32: 
    case ARM::VRHADDuv8i16: 
    case ARM::VRHADDuv8i8: 
    case ARM::VRSHLsv16i8: 
    case ARM::VRSHLsv1i64: 
    case ARM::VRSHLsv2i32: 
    case ARM::VRSHLsv2i64: 
    case ARM::VRSHLsv4i16: 
    case ARM::VRSHLsv4i32: 
    case ARM::VRSHLsv8i16: 
    case ARM::VRSHLsv8i8: 
    case ARM::VRSHLuv16i8: 
    case ARM::VRSHLuv1i64: 
    case ARM::VRSHLuv2i32: 
    case ARM::VRSHLuv2i64: 
    case ARM::VRSHLuv4i16: 
    case ARM::VRSHLuv4i32: 
    case ARM::VRSHLuv8i16: 
    case ARM::VRSHLuv8i8: 
    case ARM::VRSHRNv2i32: 
    case ARM::VRSHRNv4i16: 
    case ARM::VRSHRNv8i8: 
    case ARM::VRSHRsv16i8: 
    case ARM::VRSHRsv1i64: 
    case ARM::VRSHRsv2i32: 
    case ARM::VRSHRsv2i64: 
    case ARM::VRSHRsv4i16: 
    case ARM::VRSHRsv4i32: 
    case ARM::VRSHRsv8i16: 
    case ARM::VRSHRsv8i8: 
    case ARM::VRSHRuv16i8: 
    case ARM::VRSHRuv1i64: 
    case ARM::VRSHRuv2i32: 
    case ARM::VRSHRuv2i64: 
    case ARM::VRSHRuv4i16: 
    case ARM::VRSHRuv4i32: 
    case ARM::VRSHRuv8i16: 
    case ARM::VRSHRuv8i8: 
    case ARM::VRSUBHNv2i32: 
    case ARM::VRSUBHNv4i16: 
    case ARM::VRSUBHNv8i8: 
    case ARM::VSHLLi16: 
    case ARM::VSHLLi32: 
    case ARM::VSHLLi8: 
    case ARM::VSHLLsv2i64: 
    case ARM::VSHLLsv4i32: 
    case ARM::VSHLLsv8i16: 
    case ARM::VSHLLuv2i64: 
    case ARM::VSHLLuv4i32: 
    case ARM::VSHLLuv8i16: 
    case ARM::VSHLiv16i8: 
    case ARM::VSHLiv1i64: 
    case ARM::VSHLiv2i32: 
    case ARM::VSHLiv2i64: 
    case ARM::VSHLiv4i16: 
    case ARM::VSHLiv4i32: 
    case ARM::VSHLiv8i16: 
    case ARM::VSHLiv8i8: 
    case ARM::VSHLsv16i8: 
    case ARM::VSHLsv1i64: 
    case ARM::VSHLsv2i32: 
    case ARM::VSHLsv2i64: 
    case ARM::VSHLsv4i16: 
    case ARM::VSHLsv4i32: 
    case ARM::VSHLsv8i16: 
    case ARM::VSHLsv8i8: 
    case ARM::VSHLuv16i8: 
    case ARM::VSHLuv1i64: 
    case ARM::VSHLuv2i32: 
    case ARM::VSHLuv2i64: 
    case ARM::VSHLuv4i16: 
    case ARM::VSHLuv4i32: 
    case ARM::VSHLuv8i16: 
    case ARM::VSHLuv8i8: 
    case ARM::VSHRNv2i32: 
    case ARM::VSHRNv4i16: 
    case ARM::VSHRNv8i8: 
    case ARM::VSHRsv16i8: 
    case ARM::VSHRsv1i64: 
    case ARM::VSHRsv2i32: 
    case ARM::VSHRsv2i64: 
    case ARM::VSHRsv4i16: 
    case ARM::VSHRsv4i32: 
    case ARM::VSHRsv8i16: 
    case ARM::VSHRsv8i8: 
    case ARM::VSHRuv16i8: 
    case ARM::VSHRuv1i64: 
    case ARM::VSHRuv2i32: 
    case ARM::VSHRuv2i64: 
    case ARM::VSHRuv4i16: 
    case ARM::VSHRuv4i32: 
    case ARM::VSHRuv8i16: 
    case ARM::VSHRuv8i8: 
    case ARM::VSUBHNv2i32: 
    case ARM::VSUBHNv4i16: 
    case ARM::VSUBHNv8i8: 
    case ARM::VSUBLsv2i64: 
    case ARM::VSUBLsv4i32: 
    case ARM::VSUBLsv8i16: 
    case ARM::VSUBLuv2i64: 
    case ARM::VSUBLuv4i32: 
    case ARM::VSUBLuv8i16: 
    case ARM::VSUBWsv2i64: 
    case ARM::VSUBWsv4i32: 
    case ARM::VSUBWsv8i16: 
    case ARM::VSUBWuv2i64: 
    case ARM::VSUBWuv4i32: 
    case ARM::VSUBWuv8i16: 
    case ARM::VSUBv16i8: 
    case ARM::VSUBv1i64: 
    case ARM::VSUBv2i32: 
    case ARM::VSUBv2i64: 
    case ARM::VSUBv4i16: 
    case ARM::VSUBv4i32: 
    case ARM::VSUBv8i16: 
    case ARM::VSUBv8i8: 
    case ARM::t2ADCSri: 
    case ARM::t2ADCSrr: 
    case ARM::t2LDRDpci: 
    case ARM::t2MOVTi16: 
    case ARM::t2SBCSri: 
    case ARM::t2SBCSrr: 
    case ARM::t2SUBrSPi12_: 
    case ARM::t2SUBrSPi_: 
    case ARM::tADDhirr: 
    case ARM::tMOVCCi: 
    case ARM::tMOVCCr: printOperand(MI, 2); break;
    case ARM::ADCSSrs: 
    case ARM::MOVCCs: 
    case ARM::RSCSrs: 
    case ARM::SBCSSrs: printSORegOperand(MI, 2); break;
    case ARM::BFC: 
    case ARM::t2BFC: printBitfieldInvMaskImmOperand(MI, 2); break;
    case ARM::CLZ: 
    case ARM::CMNzrr: 
    case ARM::CMPrr: 
    case ARM::CMPzrr: 
    case ARM::MOVi16: 
    case ARM::RBIT: 
    case ARM::REV: 
    case ARM::REV16: 
    case ARM::REVSH: 
    case ARM::SXTBr: 
    case ARM::SXTHr: 
    case ARM::TEQrr: 
    case ARM::TSTrr: 
    case ARM::UXTB16r: 
    case ARM::UXTBr: 
    case ARM::UXTHr: 
    case ARM::VCNTd: 
    case ARM::VCNTq: 
    case ARM::VDUP16d: 
    case ARM::VDUP16q: 
    case ARM::VDUP32d: 
    case ARM::VDUP32q: 
    case ARM::VDUP8d: 
    case ARM::VDUP8q: 
    case ARM::VDUPfd: 
    case ARM::VDUPfq: 
    case ARM::VMOVDneon: 
    case ARM::VMOVQ: 
    case ARM::VMOVRS: 
    case ARM::VMOVSR: 
    case ARM::VMVNd: 
    case ARM::VMVNq: 
    case ARM::VREV16d8: 
    case ARM::VREV16q8: 
    case ARM::VREV32d16: 
    case ARM::VREV32d8: 
    case ARM::VREV32q16: 
    case ARM::VREV32q8: 
    case ARM::VREV64d16: 
    case ARM::VREV64d32: 
    case ARM::VREV64d8: 
    case ARM::VREV64df: 
    case ARM::VREV64q16: 
    case ARM::VREV64q32: 
    case ARM::VREV64q8: 
    case ARM::VREV64qf: 
    case ARM::VTRNd16: 
    case ARM::VTRNd32: 
    case ARM::VTRNd8: 
    case ARM::VTRNq16: 
    case ARM::VTRNq32: 
    case ARM::VTRNq8: 
    case ARM::VUZPd16: 
    case ARM::VUZPd32: 
    case ARM::VUZPd8: 
    case ARM::VUZPq16: 
    case ARM::VUZPq32: 
    case ARM::VUZPq8: 
    case ARM::VZIPd16: 
    case ARM::VZIPd32: 
    case ARM::VZIPd8: 
    case ARM::VZIPq16: 
    case ARM::VZIPq32: 
    case ARM::VZIPq8: 
    case ARM::t2CLZ: 
    case ARM::t2MOVi16: 
    case ARM::t2RBIT: 
    case ARM::tCMNz: 
    case ARM::tCMPhir: 
    case ARM::tCMPi8: 
    case ARM::tCMPr: 
    case ARM::tCMPzhir: 
    case ARM::tCMPzi8: 
    case ARM::tCMPzr: 
    case ARM::tLDRcp: 
    case ARM::tREV: 
    case ARM::tREV16: 
    case ARM::tREVSH: 
    case ARM::tSXTB: 
    case ARM::tSXTH: 
    case ARM::tTST: 
    case ARM::tUXTB: 
    case ARM::tUXTH: printOperand(MI, 1); break;
    case ARM::CMNzri: 
    case ARM::CMPri: 
    case ARM::CMPzri: 
    case ARM::TEQri: 
    case ARM::TSTri: printSOImmOperand(MI, 1); break;
    case ARM::CMNzrs: 
    case ARM::CMPrs: 
    case ARM::CMPzrs: 
    case ARM::TEQrs: 
    case ARM::TSTrs: printSORegOperand(MI, 1); break;
    case ARM::LDR: 
    case ARM::LDRB: 
    case ARM::LDRcp: 
    case ARM::STR: 
    case ARM::STRB: printAddrMode2Operand(MI, 1); break;
    case ARM::LDRD: 
    case ARM::STRD: printAddrMode3Operand(MI, 2); break;
    case ARM::LDRH: 
    case ARM::LDRSB: 
    case ARM::LDRSH: 
    case ARM::STRH: printAddrMode3Operand(MI, 1); break;
    case ARM::MOVi2pieces: printSOImm2PartOperand(MI, 1); break;
    case ARM::VABALsv2i64: 
    case ARM::VABALsv4i32: 
    case ARM::VABALsv8i16: 
    case ARM::VABALuv2i64: 
    case ARM::VABALuv4i32: 
    case ARM::VABALuv8i16: 
    case ARM::VABAsv16i8: 
    case ARM::VABAsv2i32: 
    case ARM::VABAsv4i16: 
    case ARM::VABAsv4i32: 
    case ARM::VABAsv8i16: 
    case ARM::VABAsv8i8: 
    case ARM::VABAuv16i8: 
    case ARM::VABAuv2i32: 
    case ARM::VABAuv4i16: 
    case ARM::VABAuv4i32: 
    case ARM::VABAuv8i16: 
    case ARM::VABAuv8i8: 
    case ARM::VMLALsv2i64: 
    case ARM::VMLALsv4i32: 
    case ARM::VMLALsv8i16: 
    case ARM::VMLALuv2i64: 
    case ARM::VMLALuv4i32: 
    case ARM::VMLALuv8i16: 
    case ARM::VMLAv16i8: 
    case ARM::VMLAv2i32: 
    case ARM::VMLAv4i16: 
    case ARM::VMLAv4i32: 
    case ARM::VMLAv8i16: 
    case ARM::VMLAv8i8: 
    case ARM::VMLSLsv2i64: 
    case ARM::VMLSLsv4i32: 
    case ARM::VMLSLsv8i16: 
    case ARM::VMLSLuv2i64: 
    case ARM::VMLSLuv4i32: 
    case ARM::VMLSLuv8i16: 
    case ARM::VMLSv16i8: 
    case ARM::VMLSv2i32: 
    case ARM::VMLSv4i16: 
    case ARM::VMLSv4i32: 
    case ARM::VMLSv8i16: 
    case ARM::VMLSv8i8: 
    case ARM::VQDMLALv2i64: 
    case ARM::VQDMLALv4i32: 
    case ARM::VQDMLSLv2i64: 
    case ARM::VQDMLSLv4i32: 
    case ARM::VRSRAsv16i8: 
    case ARM::VRSRAsv1i64: 
    case ARM::VRSRAsv2i32: 
    case ARM::VRSRAsv2i64: 
    case ARM::VRSRAsv4i16: 
    case ARM::VRSRAsv4i32: 
    case ARM::VRSRAsv8i16: 
    case ARM::VRSRAsv8i8: 
    case ARM::VRSRAuv16i8: 
    case ARM::VRSRAuv1i64: 
    case ARM::VRSRAuv2i32: 
    case ARM::VRSRAuv2i64: 
    case ARM::VRSRAuv4i16: 
    case ARM::VRSRAuv4i32: 
    case ARM::VRSRAuv8i16: 
    case ARM::VRSRAuv8i8: 
    case ARM::VSRAsv16i8: 
    case ARM::VSRAsv1i64: 
    case ARM::VSRAsv2i32: 
    case ARM::VSRAsv2i64: 
    case ARM::VSRAsv4i16: 
    case ARM::VSRAsv4i32: 
    case ARM::VSRAsv8i16: 
    case ARM::VSRAsv8i8: 
    case ARM::VSRAuv16i8: 
    case ARM::VSRAuv1i64: 
    case ARM::VSRAuv2i32: 
    case ARM::VSRAuv2i64: 
    case ARM::VSRAuv4i16: 
    case ARM::VSRAuv4i32: 
    case ARM::VSRAuv8i16: 
    case ARM::VSRAuv8i8: 
    case ARM::tADDi3: 
    case ARM::tADDrr: 
    case ARM::tASRri: 
    case ARM::tLSLri: 
    case ARM::tLSRri: 
    case ARM::tSUBi3: 
    case ARM::tSUBrr: printOperand(MI, 3); break;
    case ARM::VDUPfdf: 
    case ARM::VDUPfqf: printOperand(MI, 1, "lane"); break;
    case ARM::VLDRD: 
    case ARM::VLDRS: 
    case ARM::VSTRD: 
    case ARM::VSTRS: printAddrMode5Operand(MI, 1); break;
    case ARM::t2ADCSrs: 
    case ARM::t2SBCSrs: 
    case ARM::t2SUBrSPs_: printT2SOOperand(MI, 2); break;
    case ARM::t2LDRBi8: 
    case ARM::t2LDRHi8: 
    case ARM::t2LDRSBi8: 
    case ARM::t2LDRSHi8: 
    case ARM::t2LDRi8: 
    case ARM::t2STRBi8: 
    case ARM::t2STRHi8: 
    case ARM::t2STRi8: printT2AddrModeImm8Operand(MI, 1); break;
    case ARM::t2LDRDi8: 
    case ARM::t2STRDi8: printT2AddrModeImm8s4Operand(MI, 2); break;
    case ARM::tADDrSPi: printThumbS4ImmOperand(MI, 2); break;
    case ARM::tLDR: 
    case ARM::tLDRi: 
    case ARM::tSTR: 
    case ARM::tSTRi: printThumbAddrModeS4Operand(MI, 1); break;
    case ARM::tLDRB: 
    case ARM::tLDRBi: 
    case ARM::tSTRB: 
    case ARM::tSTRBi: printThumbAddrModeS1Operand(MI, 1); break;
    case ARM::tLDRH: 
    case ARM::tLDRHi: 
    case ARM::tSTRH: 
    case ARM::tSTRHi: printThumbAddrModeS2Operand(MI, 1); break;
    case ARM::tLDRSB: 
    case ARM::tLDRSH: printThumbAddrModeRROperand(MI, 1); break;
    case ARM::tLDRspi: 
    case ARM::tRestore: 
    case ARM::tSTRspi: 
    case ARM::tSpill: printThumbAddrModeSPOperand(MI, 1); break;
    }
    return;
    break;
  case ARM::ADCrr:
  case ARM::ADDrr:
  case ARM::ANDrr:
  case ARM::BICrr:
  case ARM::Bcc:
  case ARM::EORrr:
  case ARM::MOVr:
  case ARM::MUL:
  case ARM::MVNr:
  case ARM::ORRrr:
  case ARM::SBCrr:
  case ARM::SUBrr:
  case ARM::VABSv16i8:
  case ARM::VABSv2i32:
  case ARM::VABSv4i16:
  case ARM::VABSv4i32:
  case ARM::VABSv8i16:
  case ARM::VABSv8i8:
  case ARM::VCLSv16i8:
  case ARM::VCLSv2i32:
  case ARM::VCLSv4i16:
  case ARM::VCLSv4i32:
  case ARM::VCLSv8i16:
  case ARM::VCLSv8i8:
  case ARM::VCLZv16i8:
  case ARM::VCLZv2i32:
  case ARM::VCLZv4i16:
  case ARM::VCLZv4i32:
  case ARM::VCLZv8i16:
  case ARM::VCLZv8i8:
  case ARM::VMOVLsv2i64:
  case ARM::VMOVLsv4i32:
  case ARM::VMOVLsv8i16:
  case ARM::VMOVLuv2i64:
  case ARM::VMOVLuv4i32:
  case ARM::VMOVLuv8i16:
  case ARM::VMOVNv2i32:
  case ARM::VMOVNv4i16:
  case ARM::VMOVNv8i8:
  case ARM::VNEGs16d:
  case ARM::VNEGs16q:
  case ARM::VNEGs32d:
  case ARM::VNEGs32q:
  case ARM::VNEGs8d:
  case ARM::VNEGs8q:
  case ARM::VPADALsv16i8:
  case ARM::VPADALsv2i32:
  case ARM::VPADALsv4i16:
  case ARM::VPADALsv4i32:
  case ARM::VPADALsv8i16:
  case ARM::VPADALsv8i8:
  case ARM::VPADALuv16i8:
  case ARM::VPADALuv2i32:
  case ARM::VPADALuv4i16:
  case ARM::VPADALuv4i32:
  case ARM::VPADALuv8i16:
  case ARM::VPADALuv8i8:
  case ARM::VPADDLsv16i8:
  case ARM::VPADDLsv2i32:
  case ARM::VPADDLsv4i16:
  case ARM::VPADDLsv4i32:
  case ARM::VPADDLsv8i16:
  case ARM::VPADDLsv8i8:
  case ARM::VPADDLuv16i8:
  case ARM::VPADDLuv2i32:
  case ARM::VPADDLuv4i16:
  case ARM::VPADDLuv4i32:
  case ARM::VPADDLuv8i16:
  case ARM::VPADDLuv8i8:
  case ARM::VQABSv16i8:
  case ARM::VQABSv2i32:
  case ARM::VQABSv4i16:
  case ARM::VQABSv4i32:
  case ARM::VQABSv8i16:
  case ARM::VQABSv8i8:
  case ARM::VQMOVNsuv2i32:
  case ARM::VQMOVNsuv4i16:
  case ARM::VQMOVNsuv8i8:
  case ARM::VQMOVNsv2i32:
  case ARM::VQMOVNsv4i16:
  case ARM::VQMOVNsv8i8:
  case ARM::VQMOVNuv2i32:
  case ARM::VQMOVNuv4i16:
  case ARM::VQMOVNuv8i8:
  case ARM::VQNEGv16i8:
  case ARM::VQNEGv2i32:
  case ARM::VQNEGv4i16:
  case ARM::VQNEGv4i32:
  case ARM::VQNEGv8i16:
  case ARM::VQNEGv8i8:
  case ARM::VRECPEd:
  case ARM::VRECPEq:
  case ARM::VRSQRTEd:
  case ARM::VRSQRTEq:
  case ARM::t2LEApcrel:
  case ARM::tADDrSP:
  case ARM::tADDspr:
  case ARM::tADDspr_:
  case ARM::tANDsp:
  case ARM::tBcc:
  case ARM::tCBNZ:
  case ARM::tCBZ:
  case ARM::tMOVSr:
  case ARM::tMOVgpr2gpr:
  case ARM::tMOVgpr2tgpr:
  case ARM::tMOVr:
  case ARM::tMOVtgpr2gpr:
    return;
    break;
  case ARM::ADDSri:
  case ARM::ADDSrr:
  case ARM::ADDSrs:
  case ARM::RSBSri:
  case ARM::RSBSrs:
  case ARM::SMMUL:
  case ARM::SMULBB:
  case ARM::SMULBT:
  case ARM::SMULTB:
  case ARM::SMULTT:
  case ARM::SMULWB:
  case ARM::SMULWT:
  case ARM::SUBSri:
  case ARM::SUBSrr:
  case ARM::SUBSrs:
  case ARM::SXTABrr:
  case ARM::SXTAHrr:
  case ARM::UXTABrr:
  case ARM::UXTAHrr:
  case ARM::VANDd:
  case ARM::VANDq:
  case ARM::VBICd:
  case ARM::VBICq:
  case ARM::VEORd:
  case ARM::VEORq:
  case ARM::VMOVDRR:
  case ARM::VMOVRRD:
  case ARM::VORNd:
  case ARM::VORNq:
  case ARM::VORRd:
  case ARM::VORRq:
  case ARM::VTSTv16i8:
  case ARM::VTSTv2i32:
  case ARM::VTSTv4i16:
  case ARM::VTSTv4i32:
  case ARM::VTSTv8i16:
  case ARM::VTSTv8i8:
  case ARM::t2ADCri:
  case ARM::t2ADDrSPi12:
  case ARM::t2ADDri12:
  case ARM::t2ANDri:
  case ARM::t2BICri:
  case ARM::t2EORri:
  case ARM::t2MUL:
  case ARM::t2ORNri:
  case ARM::t2ORNrr:
  case ARM::t2ORNrs:
  case ARM::t2ORRri:
  case ARM::t2RSBSrs:
  case ARM::t2RSBrs:
  case ARM::t2SBCri:
  case ARM::t2SMMUL:
  case ARM::t2SMULBB:
  case ARM::t2SMULBT:
  case ARM::t2SMULTB:
  case ARM::t2SMULTT:
  case ARM::t2SMULWB:
  case ARM::t2SMULWT:
  case ARM::t2SUBrSPi12:
  case ARM::t2SUBrSPs:
  case ARM::t2SUBri12:
  case ARM::t2SXTABrr:
  case ARM::t2SXTAHrr:
  case ARM::t2UXTABrr:
  case ARM::t2UXTAHrr:
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADDSri: 
    case ARM::RSBSri: 
    case ARM::SUBSri: printSOImmOperand(MI, 2); break;
    case ARM::ADDSrr: 
    case ARM::SMMUL: 
    case ARM::SMULBB: 
    case ARM::SMULBT: 
    case ARM::SMULTB: 
    case ARM::SMULTT: 
    case ARM::SMULWB: 
    case ARM::SMULWT: 
    case ARM::SUBSrr: 
    case ARM::SXTABrr: 
    case ARM::SXTAHrr: 
    case ARM::UXTABrr: 
    case ARM::UXTAHrr: 
    case ARM::VANDd: 
    case ARM::VANDq: 
    case ARM::VBICd: 
    case ARM::VBICq: 
    case ARM::VEORd: 
    case ARM::VEORq: 
    case ARM::VMOVDRR: 
    case ARM::VMOVRRD: 
    case ARM::VORNd: 
    case ARM::VORNq: 
    case ARM::VORRd: 
    case ARM::VORRq: 
    case ARM::VTSTv16i8: 
    case ARM::VTSTv2i32: 
    case ARM::VTSTv4i16: 
    case ARM::VTSTv4i32: 
    case ARM::VTSTv8i16: 
    case ARM::VTSTv8i8: 
    case ARM::t2ADCri: 
    case ARM::t2ADDrSPi12: 
    case ARM::t2ADDri12: 
    case ARM::t2ANDri: 
    case ARM::t2BICri: 
    case ARM::t2EORri: 
    case ARM::t2MUL: 
    case ARM::t2ORNri: 
    case ARM::t2ORNrr: 
    case ARM::t2ORRri: 
    case ARM::t2SBCri: 
    case ARM::t2SMMUL: 
    case ARM::t2SMULBB: 
    case ARM::t2SMULBT: 
    case ARM::t2SMULTB: 
    case ARM::t2SMULTT: 
    case ARM::t2SMULWB: 
    case ARM::t2SMULWT: 
    case ARM::t2SUBrSPi12: 
    case ARM::t2SUBri12: 
    case ARM::t2SXTABrr: 
    case ARM::t2SXTAHrr: 
    case ARM::t2UXTABrr: 
    case ARM::t2UXTAHrr: printOperand(MI, 2); break;
    case ARM::ADDSrs: 
    case ARM::RSBSrs: 
    case ARM::SUBSrs: printSORegOperand(MI, 2); break;
    case ARM::t2ORNrs: 
    case ARM::t2RSBSrs: 
    case ARM::t2RSBrs: 
    case ARM::t2SUBrSPs: printT2SOOperand(MI, 2); break;
    }
    return;
    break;
  case ARM::BR_JTadd:
    O << " \n"; 
    printJTBlockOperand(MI, 2); 
    return;
    break;
  case ARM::FCONSTD:
  case ARM::FCONSTS:
  case ARM::MOVrx:
  case ARM::VABSD:
  case ARM::VABSS:
  case ARM::VABSfd:
  case ARM::VABSfd_sfp:
  case ARM::VABSfq:
  case ARM::VCMPED:
  case ARM::VCMPES:
  case ARM::VCVTf2xsd:
  case ARM::VCVTf2xsq:
  case ARM::VCVTf2xud:
  case ARM::VCVTf2xuq:
  case ARM::VCVTxs2fd:
  case ARM::VCVTxs2fq:
  case ARM::VCVTxu2fd:
  case ARM::VCVTxu2fq:
  case ARM::VMOVD:
  case ARM::VMOVDcc:
  case ARM::VMOVS:
  case ARM::VMOVScc:
  case ARM::VNEGD:
  case ARM::VNEGDcc:
  case ARM::VNEGS:
  case ARM::VNEGScc:
  case ARM::VNEGf32d:
  case ARM::VNEGf32d_sfp:
  case ARM::VNEGf32q:
  case ARM::VRECPEfd:
  case ARM::VRECPEfq:
  case ARM::VRSQRTEfd:
  case ARM::VRSQRTEfq:
  case ARM::VSQRTD:
  case ARM::VSQRTS:
  case ARM::t2CMNzri:
  case ARM::t2CMNzrr:
  case ARM::t2CMNzrs:
  case ARM::t2CMPri:
  case ARM::t2CMPrr:
  case ARM::t2CMPrs:
  case ARM::t2CMPzri:
  case ARM::t2CMPzrr:
  case ARM::t2CMPzrs:
  case ARM::t2LDRBi12:
  case ARM::t2LDRBpci:
  case ARM::t2LDRBs:
  case ARM::t2LDRHi12:
  case ARM::t2LDRHpci:
  case ARM::t2LDRHs:
  case ARM::t2LDRSBi12:
  case ARM::t2LDRSBpci:
  case ARM::t2LDRSBs:
  case ARM::t2LDRSHi12:
  case ARM::t2LDRSHpci:
  case ARM::t2LDRSHs:
  case ARM::t2LDRi12:
  case ARM::t2LDRpci:
  case ARM::t2LDRs:
  case ARM::t2MOVCCi:
  case ARM::t2MOVCCr:
  case ARM::t2MOVsra_flag:
  case ARM::t2MOVsrl_flag:
  case ARM::t2MVNr:
  case ARM::t2MVNs:
  case ARM::t2REV:
  case ARM::t2REV16:
  case ARM::t2REVSH:
  case ARM::t2STRBi12:
  case ARM::t2STRBs:
  case ARM::t2STRHi12:
  case ARM::t2STRHs:
  case ARM::t2STRi12:
  case ARM::t2STRs:
  case ARM::t2SXTBr:
  case ARM::t2SXTHr:
  case ARM::t2TEQri:
  case ARM::t2TEQrr:
  case ARM::t2TEQrs:
  case ARM::t2TSTri:
  case ARM::t2TSTrr:
  case ARM::t2TSTrs:
  case ARM::t2UXTB16r:
  case ARM::t2UXTBr:
  case ARM::t2UXTHr:
    switch (MI->getOpcode()) {
    case ARM::FCONSTD: printVFPf64ImmOperand(MI, 1); break;
    case ARM::FCONSTS: printVFPf32ImmOperand(MI, 1); break;
    case ARM::MOVrx: O << ", rrx"; break;
    case ARM::VABSD: 
    case ARM::VABSS: 
    case ARM::VABSfd: 
    case ARM::VABSfd_sfp: 
    case ARM::VABSfq: 
    case ARM::VCMPED: 
    case ARM::VCMPES: 
    case ARM::VMOVD: 
    case ARM::VMOVS: 
    case ARM::VNEGD: 
    case ARM::VNEGS: 
    case ARM::VNEGf32d: 
    case ARM::VNEGf32d_sfp: 
    case ARM::VNEGf32q: 
    case ARM::VRECPEfd: 
    case ARM::VRECPEfq: 
    case ARM::VRSQRTEfd: 
    case ARM::VRSQRTEfq: 
    case ARM::VSQRTD: 
    case ARM::VSQRTS: 
    case ARM::t2CMNzri: 
    case ARM::t2CMNzrr: 
    case ARM::t2CMPri: 
    case ARM::t2CMPrr: 
    case ARM::t2CMPzri: 
    case ARM::t2CMPzrr: 
    case ARM::t2LDRBpci: 
    case ARM::t2LDRHpci: 
    case ARM::t2LDRSBpci: 
    case ARM::t2LDRSHpci: 
    case ARM::t2LDRpci: 
    case ARM::t2MVNr: 
    case ARM::t2REV: 
    case ARM::t2REV16: 
    case ARM::t2REVSH: 
    case ARM::t2SXTBr: 
    case ARM::t2SXTHr: 
    case ARM::t2TEQri: 
    case ARM::t2TEQrr: 
    case ARM::t2TSTri: 
    case ARM::t2TSTrr: 
    case ARM::t2UXTB16r: 
    case ARM::t2UXTBr: 
    case ARM::t2UXTHr: printOperand(MI, 1); break;
    case ARM::VCVTf2xsd: 
    case ARM::VCVTf2xsq: 
    case ARM::VCVTf2xud: 
    case ARM::VCVTf2xuq: 
    case ARM::VCVTxs2fd: 
    case ARM::VCVTxs2fq: 
    case ARM::VCVTxu2fd: 
    case ARM::VCVTxu2fq: 
    case ARM::VMOVDcc: 
    case ARM::VMOVScc: 
    case ARM::VNEGDcc: 
    case ARM::VNEGScc: 
    case ARM::t2MOVCCi: 
    case ARM::t2MOVCCr: printOperand(MI, 2); break;
    case ARM::t2CMNzrs: 
    case ARM::t2CMPrs: 
    case ARM::t2CMPzrs: 
    case ARM::t2MVNs: 
    case ARM::t2TEQrs: 
    case ARM::t2TSTrs: printT2SOOperand(MI, 1); break;
    case ARM::t2LDRBi12: 
    case ARM::t2LDRHi12: 
    case ARM::t2LDRSBi12: 
    case ARM::t2LDRSHi12: 
    case ARM::t2LDRi12: 
    case ARM::t2STRBi12: 
    case ARM::t2STRHi12: 
    case ARM::t2STRi12: printT2AddrModeImm12Operand(MI, 1); break;
    case ARM::t2LDRBs: 
    case ARM::t2LDRHs: 
    case ARM::t2LDRSBs: 
    case ARM::t2LDRSHs: 
    case ARM::t2LDRs: 
    case ARM::t2STRBs: 
    case ARM::t2STRHs: 
    case ARM::t2STRs: printT2AddrModeSoRegOperand(MI, 1); break;
    case ARM::t2MOVsra_flag: 
    case ARM::t2MOVsrl_flag: O << ", #1"; break;
    }
    return;
    break;
  case ARM::LDRB_POST:
  case ARM::LDRH_POST:
  case ARM::LDRSB_POST:
  case ARM::LDRSH_POST:
  case ARM::LDR_POST:
  case ARM::STRB_POST:
  case ARM::STRH_POST:
  case ARM::STR_POST:
  case ARM::t2LDRB_POST:
  case ARM::t2LDRH_POST:
  case ARM::t2LDRSB_POST:
  case ARM::t2LDRSH_POST:
  case ARM::t2LDR_POST:
  case ARM::t2STRB_POST:
  case ARM::t2STRH_POST:
  case ARM::t2STR_POST:
    O << ", ["; 
    printOperand(MI, 2); 
    O << "], "; 
    switch (MI->getOpcode()) {
    case ARM::LDRB_POST: 
    case ARM::LDR_POST: 
    case ARM::STRB_POST: 
    case ARM::STR_POST: printAddrMode2OffsetOperand(MI, 3); break;
    case ARM::LDRH_POST: 
    case ARM::LDRSB_POST: 
    case ARM::LDRSH_POST: 
    case ARM::STRH_POST: printAddrMode3OffsetOperand(MI, 3); break;
    case ARM::t2LDRB_POST: 
    case ARM::t2LDRH_POST: 
    case ARM::t2LDRSB_POST: 
    case ARM::t2LDRSH_POST: 
    case ARM::t2LDR_POST: 
    case ARM::t2STRB_POST: 
    case ARM::t2STRH_POST: 
    case ARM::t2STR_POST: printT2AddrModeImm8OffsetOperand(MI, 3); break;
    }
    return;
    break;
  case ARM::LDRB_PRE:
  case ARM::LDRH_PRE:
  case ARM::LDRSB_PRE:
  case ARM::LDRSH_PRE:
  case ARM::LDR_PRE:
  case ARM::t2LDRB_PRE:
  case ARM::t2LDRH_PRE:
  case ARM::t2LDRSB_PRE:
  case ARM::t2LDRSH_PRE:
  case ARM::t2LDR_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRB_PRE: 
    case ARM::LDR_PRE: printAddrMode2Operand(MI, 2); break;
    case ARM::LDRH_PRE: 
    case ARM::LDRSB_PRE: 
    case ARM::LDRSH_PRE: printAddrMode3Operand(MI, 2); break;
    case ARM::t2LDRB_PRE: 
    case ARM::t2LDRH_PRE: 
    case ARM::t2LDRSB_PRE: 
    case ARM::t2LDRSH_PRE: 
    case ARM::t2LDR_PRE: printT2AddrModeImm8Operand(MI, 2); break;
    }
    O << '!'; 
    return;
    break;
  case ARM::LDREX:
  case ARM::LDREXB:
  case ARM::LDREXH:
  case ARM::t2LDREX:
  case ARM::t2LDREXB:
  case ARM::t2LDREXH:
    O << ", ["; 
    printOperand(MI, 1); 
    O << ']'; 
    return;
    break;
  case ARM::LDREXD:
  case ARM::STREX:
  case ARM::STREXB:
  case ARM::STREXH:
  case ARM::t2LDREXD:
  case ARM::t2STREX:
  case ARM::t2STREXB:
  case ARM::t2STREXH:
    O << ", "; 
    printOperand(MI, 1); 
    O << ", ["; 
    printOperand(MI, 2); 
    O << ']'; 
    return;
    break;
  case ARM::MLA:
  case ARM::SMLAL:
  case ARM::SMULL:
  case ARM::UMLAL:
  case ARM::UMULL:
  case ARM::VBSLd:
  case ARM::VBSLq:
  case ARM::VSLIv16i8:
  case ARM::VSLIv1i64:
  case ARM::VSLIv2i32:
  case ARM::VSLIv2i64:
  case ARM::VSLIv4i16:
  case ARM::VSLIv4i32:
  case ARM::VSLIv8i16:
  case ARM::VSLIv8i8:
  case ARM::VSRIv16i8:
  case ARM::VSRIv1i64:
  case ARM::VSRIv2i32:
  case ARM::VSRIv2i64:
  case ARM::VSRIv4i16:
  case ARM::VSRIv4i32:
  case ARM::VSRIv8i16:
  case ARM::VSRIv8i8:
    O << ", "; 
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    return;
    break;
  case ARM::MLS:
  case ARM::PKHBT:
  case ARM::PKHTB:
  case ARM::SBFX:
  case ARM::SMLABB:
  case ARM::SMLABT:
  case ARM::SMLATB:
  case ARM::SMLATT:
  case ARM::SMLAWB:
  case ARM::SMLAWT:
  case ARM::SMMLA:
  case ARM::SMMLS:
  case ARM::SXTABrr_rot:
  case ARM::SXTAHrr_rot:
  case ARM::UBFX:
  case ARM::UMAAL:
  case ARM::UXTABrr_rot:
  case ARM::UXTAHrr_rot:
  case ARM::VEXTd16:
  case ARM::VEXTd32:
  case ARM::VEXTd8:
  case ARM::VEXTdf:
  case ARM::VEXTq16:
  case ARM::VEXTq32:
  case ARM::VEXTq8:
  case ARM::VEXTqf:
  case ARM::t2MLA:
  case ARM::t2MLS:
  case ARM::t2PKHBT:
  case ARM::t2PKHTB:
  case ARM::t2SBFX:
  case ARM::t2SMLABB:
  case ARM::t2SMLABT:
  case ARM::t2SMLAL:
  case ARM::t2SMLATB:
  case ARM::t2SMLATT:
  case ARM::t2SMLAWB:
  case ARM::t2SMLAWT:
  case ARM::t2SMMLA:
  case ARM::t2SMMLS:
  case ARM::t2SMULL:
  case ARM::t2SXTABrr_rot:
  case ARM::t2SXTAHrr_rot:
  case ARM::t2UBFX:
  case ARM::t2UMAAL:
  case ARM::t2UMLAL:
  case ARM::t2UMULL:
  case ARM::t2UXTABrr_rot:
  case ARM::t2UXTAHrr_rot:
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    switch (MI->getOpcode()) {
    case ARM::MLS: 
    case ARM::SBFX: 
    case ARM::SMLABB: 
    case ARM::SMLABT: 
    case ARM::SMLATB: 
    case ARM::SMLATT: 
    case ARM::SMLAWB: 
    case ARM::SMLAWT: 
    case ARM::SMMLA: 
    case ARM::SMMLS: 
    case ARM::UBFX: 
    case ARM::UMAAL: 
    case ARM::VEXTd16: 
    case ARM::VEXTd32: 
    case ARM::VEXTd8: 
    case ARM::VEXTdf: 
    case ARM::VEXTq16: 
    case ARM::VEXTq32: 
    case ARM::VEXTq8: 
    case ARM::VEXTqf: 
    case ARM::t2MLA: 
    case ARM::t2MLS: 
    case ARM::t2SBFX: 
    case ARM::t2SMLABB: 
    case ARM::t2SMLABT: 
    case ARM::t2SMLAL: 
    case ARM::t2SMLATB: 
    case ARM::t2SMLATT: 
    case ARM::t2SMLAWB: 
    case ARM::t2SMLAWT: 
    case ARM::t2SMMLA: 
    case ARM::t2SMMLS: 
    case ARM::t2SMULL: 
    case ARM::t2UBFX: 
    case ARM::t2UMAAL: 
    case ARM::t2UMLAL: 
    case ARM::t2UMULL: O << ", "; break;
    case ARM::PKHBT: 
    case ARM::t2PKHBT: O << ", LSL "; break;
    case ARM::PKHTB: 
    case ARM::t2PKHTB: O << ", ASR "; break;
    case ARM::SXTABrr_rot: 
    case ARM::SXTAHrr_rot: 
    case ARM::UXTABrr_rot: 
    case ARM::UXTAHrr_rot: 
    case ARM::t2SXTABrr_rot: 
    case ARM::t2SXTAHrr_rot: 
    case ARM::t2UXTABrr_rot: 
    case ARM::t2UXTAHrr_rot: O << ", ror "; break;
    }
    printOperand(MI, 3); 
    return;
    break;
  case ARM::MOVi32imm:
  case ARM::t2MOVi32imm:
    O << ", "; 
    printOperand(MI, 1, "lo16"); 
    O << "\n\tmovt"; 
    printPredicateOperand(MI, 2); 
    O << "\t"; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1, "hi16"); 
    return;
    break;
  case ARM::MOVsra_flag:
  case ARM::MOVsrl_flag:
    O << ", "; 
    printOperand(MI, 1); 
    switch (MI->getOpcode()) {
    case ARM::MOVsra_flag: O << ", asr #1"; break;
    case ARM::MOVsrl_flag: O << ", lsr #1"; break;
    }
    return;
    break;
  case ARM::STRB_PRE:
  case ARM::STRH_PRE:
  case ARM::STR_PRE:
  case ARM::t2STRB_PRE:
  case ARM::t2STRH_PRE:
  case ARM::t2STR_PRE:
    O << ", ["; 
    printOperand(MI, 2); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::STRB_PRE: 
    case ARM::STR_PRE: printAddrMode2OffsetOperand(MI, 3); break;
    case ARM::STRH_PRE: printAddrMode3OffsetOperand(MI, 3); break;
    case ARM::t2STRB_PRE: 
    case ARM::t2STRH_PRE: 
    case ARM::t2STR_PRE: printT2AddrModeImm8OffsetOperand(MI, 3); break;
    }
    O << "]!"; 
    return;
    break;
  case ARM::STREXD:
  case ARM::t2STREXD:
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    O << ", ["; 
    printOperand(MI, 3); 
    O << ']'; 
    return;
    break;
  case ARM::SXTBr_rot:
  case ARM::SXTHr_rot:
  case ARM::UXTB16r_rot:
  case ARM::UXTBr_rot:
  case ARM::UXTHr_rot:
    O << ", "; 
    printOperand(MI, 1); 
    O << ", ror "; 
    printOperand(MI, 2); 
    return;
    break;
  case ARM::VABDfd:
  case ARM::VABDfq:
  case ARM::VACGEd:
  case ARM::VACGEq:
  case ARM::VACGTd:
  case ARM::VACGTq:
  case ARM::VADDD:
  case ARM::VADDS:
  case ARM::VADDfd:
  case ARM::VADDfd_sfp:
  case ARM::VADDfq:
  case ARM::VCEQfd:
  case ARM::VCEQfq:
  case ARM::VCGEfd:
  case ARM::VCGEfq:
  case ARM::VCGTfd:
  case ARM::VCGTfq:
  case ARM::VDIVD:
  case ARM::VDIVS:
  case ARM::VMAXfd:
  case ARM::VMAXfq:
  case ARM::VMINfd:
  case ARM::VMINfq:
  case ARM::VMULD:
  case ARM::VMULS:
  case ARM::VMULfd:
  case ARM::VMULfd_sfp:
  case ARM::VMULfq:
  case ARM::VNMULD:
  case ARM::VNMULS:
  case ARM::VPADDf:
  case ARM::VPMAXf:
  case ARM::VPMINf:
  case ARM::VRECPSfd:
  case ARM::VRECPSfq:
  case ARM::VRSQRTSfd:
  case ARM::VRSQRTSfq:
  case ARM::VSUBD:
  case ARM::VSUBS:
  case ARM::VSUBfd:
  case ARM::VSUBfd_sfp:
  case ARM::VSUBfq:
  case ARM::t2ADCrr:
  case ARM::t2ADCrs:
  case ARM::t2ADDSri:
  case ARM::t2ADDSrr:
  case ARM::t2ADDSrs:
  case ARM::t2ADDrSPi:
  case ARM::t2ADDrSPs:
  case ARM::t2ADDri:
  case ARM::t2ADDrr:
  case ARM::t2ADDrs:
  case ARM::t2ANDrr:
  case ARM::t2ANDrs:
  case ARM::t2ASRri:
  case ARM::t2ASRrr:
  case ARM::t2BICrr:
  case ARM::t2BICrs:
  case ARM::t2EORrr:
  case ARM::t2EORrs:
  case ARM::t2LSLri:
  case ARM::t2LSLrr:
  case ARM::t2LSRri:
  case ARM::t2LSRrr:
  case ARM::t2ORRrr:
  case ARM::t2ORRrs:
  case ARM::t2RORri:
  case ARM::t2RORrr:
  case ARM::t2RSBri:
  case ARM::t2SBCrr:
  case ARM::t2SBCrs:
  case ARM::t2SUBSri:
  case ARM::t2SUBSrr:
  case ARM::t2SUBSrs:
  case ARM::t2SUBrSPi:
  case ARM::t2SUBri:
  case ARM::t2SUBrr:
  case ARM::t2SUBrs:
    printOperand(MI, 1); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::VABDfd: 
    case ARM::VABDfq: 
    case ARM::VACGEd: 
    case ARM::VACGEq: 
    case ARM::VACGTd: 
    case ARM::VACGTq: 
    case ARM::VADDD: 
    case ARM::VADDS: 
    case ARM::VADDfd: 
    case ARM::VADDfd_sfp: 
    case ARM::VADDfq: 
    case ARM::VCEQfd: 
    case ARM::VCEQfq: 
    case ARM::VCGEfd: 
    case ARM::VCGEfq: 
    case ARM::VCGTfd: 
    case ARM::VCGTfq: 
    case ARM::VDIVD: 
    case ARM::VDIVS: 
    case ARM::VMAXfd: 
    case ARM::VMAXfq: 
    case ARM::VMINfd: 
    case ARM::VMINfq: 
    case ARM::VMULD: 
    case ARM::VMULS: 
    case ARM::VMULfd: 
    case ARM::VMULfd_sfp: 
    case ARM::VMULfq: 
    case ARM::VNMULD: 
    case ARM::VNMULS: 
    case ARM::VPADDf: 
    case ARM::VPMAXf: 
    case ARM::VPMINf: 
    case ARM::VRECPSfd: 
    case ARM::VRECPSfq: 
    case ARM::VRSQRTSfd: 
    case ARM::VRSQRTSfq: 
    case ARM::VSUBD: 
    case ARM::VSUBS: 
    case ARM::VSUBfd: 
    case ARM::VSUBfd_sfp: 
    case ARM::VSUBfq: 
    case ARM::t2ADCrr: 
    case ARM::t2ADDSri: 
    case ARM::t2ADDSrr: 
    case ARM::t2ADDrSPi: 
    case ARM::t2ADDri: 
    case ARM::t2ADDrr: 
    case ARM::t2ANDrr: 
    case ARM::t2ASRri: 
    case ARM::t2ASRrr: 
    case ARM::t2BICrr: 
    case ARM::t2EORrr: 
    case ARM::t2LSLri: 
    case ARM::t2LSLrr: 
    case ARM::t2LSRri: 
    case ARM::t2LSRrr: 
    case ARM::t2ORRrr: 
    case ARM::t2RORri: 
    case ARM::t2RORrr: 
    case ARM::t2RSBri: 
    case ARM::t2SBCrr: 
    case ARM::t2SUBSri: 
    case ARM::t2SUBSrr: 
    case ARM::t2SUBrSPi: 
    case ARM::t2SUBri: 
    case ARM::t2SUBrr: printOperand(MI, 2); break;
    case ARM::t2ADCrs: 
    case ARM::t2ADDSrs: 
    case ARM::t2ADDrSPs: 
    case ARM::t2ADDrs: 
    case ARM::t2ANDrs: 
    case ARM::t2BICrs: 
    case ARM::t2EORrs: 
    case ARM::t2ORRrs: 
    case ARM::t2SBCrs: 
    case ARM::t2SUBSrs: 
    case ARM::t2SUBrs: printT2SOOperand(MI, 2); break;
    }
    return;
    break;
  case ARM::VDUPLN16d:
  case ARM::VDUPLN16q:
  case ARM::VDUPLN32d:
  case ARM::VDUPLN32q:
  case ARM::VDUPLN8d:
  case ARM::VDUPLN8q:
  case ARM::VDUPLNfd:
  case ARM::VDUPLNfq:
  case ARM::VGETLNi32:
    O << ", "; 
    printOperand(MI, 1); 
    O << '['; 
    printNoHashImmediate(MI, 2); 
    O << ']'; 
    return;
    break;
  case ARM::VGETLNs16:
  case ARM::VGETLNs8:
  case ARM::VGETLNu16:
  case ARM::VGETLNu8:
    O << '['; 
    printNoHashImmediate(MI, 2); 
    O << ']'; 
    return;
    break;
  case ARM::VLD1d16:
  case ARM::VLD1d32:
  case ARM::VLD1d64:
  case ARM::VLD1d8:
  case ARM::VLD1df:
  case ARM::VST1d16:
  case ARM::VST1d32:
  case ARM::VST1d64:
  case ARM::VST1d8:
  case ARM::VST1df:
  case ARM::VST3q16a:
  case ARM::VST3q16b:
  case ARM::VST3q32a:
  case ARM::VST3q32b:
  case ARM::VST3q8a:
  case ARM::VST3q8b:
    O << "}, "; 
    switch (MI->getOpcode()) {
    case ARM::VLD1d16: 
    case ARM::VLD1d32: 
    case ARM::VLD1d64: 
    case ARM::VLD1d8: 
    case ARM::VLD1df: 
    case ARM::VST3q16a: 
    case ARM::VST3q16b: 
    case ARM::VST3q32a: 
    case ARM::VST3q32b: 
    case ARM::VST3q8a: 
    case ARM::VST3q8b: printAddrMode6Operand(MI, 1); break;
    case ARM::VST1d16: 
    case ARM::VST1d32: 
    case ARM::VST1d64: 
    case ARM::VST1d8: 
    case ARM::VST1df: printAddrMode6Operand(MI, 0); break;
    }
    return;
    break;
  case ARM::VLD2LNd16:
  case ARM::VLD2LNd32:
  case ARM::VLD2LNd8:
  case ARM::VLD2LNq16a:
  case ARM::VLD2LNq16b:
  case ARM::VLD2LNq32a:
  case ARM::VLD2LNq32b:
    O << '['; 
    printNoHashImmediate(MI, 8); 
    O << "], "; 
    printOperand(MI, 1); 
    O << '['; 
    printNoHashImmediate(MI, 8); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 2); 
    return;
    break;
  case ARM::VLD2d16:
  case ARM::VLD2d32:
  case ARM::VLD2d64:
  case ARM::VLD2d8:
    O << ", "; 
    printOperand(MI, 1); 
    O << "}, "; 
    printAddrMode6Operand(MI, 2); 
    return;
    break;
  case ARM::VLD2q16:
  case ARM::VLD2q32:
  case ARM::VLD2q8:
  case ARM::VLD4d16:
  case ARM::VLD4d32:
  case ARM::VLD4d64:
  case ARM::VLD4d8:
  case ARM::VLD4q16a:
  case ARM::VLD4q16b:
  case ARM::VLD4q32a:
  case ARM::VLD4q32b:
  case ARM::VLD4q8a:
  case ARM::VLD4q8b:
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    O << "}, "; 
    switch (MI->getOpcode()) {
    case ARM::VLD2q16: 
    case ARM::VLD2q32: 
    case ARM::VLD2q8: 
    case ARM::VLD4d16: 
    case ARM::VLD4d32: 
    case ARM::VLD4d64: 
    case ARM::VLD4d8: printAddrMode6Operand(MI, 4); break;
    case ARM::VLD4q16a: 
    case ARM::VLD4q16b: 
    case ARM::VLD4q32a: 
    case ARM::VLD4q32b: 
    case ARM::VLD4q8a: 
    case ARM::VLD4q8b: printAddrMode6Operand(MI, 5); break;
    }
    return;
    break;
  case ARM::VLD3LNd16:
  case ARM::VLD3LNd32:
  case ARM::VLD3LNd8:
  case ARM::VLD3LNq16a:
  case ARM::VLD3LNq16b:
  case ARM::VLD3LNq32a:
  case ARM::VLD3LNq32b:
    O << '['; 
    printNoHashImmediate(MI, 10); 
    O << "], "; 
    printOperand(MI, 1); 
    O << '['; 
    printNoHashImmediate(MI, 10); 
    O << "], "; 
    printOperand(MI, 2); 
    O << '['; 
    printNoHashImmediate(MI, 10); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3); 
    return;
    break;
  case ARM::VLD3d16:
  case ARM::VLD3d32:
  case ARM::VLD3d64:
  case ARM::VLD3d8:
  case ARM::VLD3q16a:
  case ARM::VLD3q16b:
  case ARM::VLD3q32a:
  case ARM::VLD3q32b:
  case ARM::VLD3q8a:
  case ARM::VLD3q8b:
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    O << "}, "; 
    switch (MI->getOpcode()) {
    case ARM::VLD3d16: 
    case ARM::VLD3d32: 
    case ARM::VLD3d64: 
    case ARM::VLD3d8: printAddrMode6Operand(MI, 3); break;
    case ARM::VLD3q16a: 
    case ARM::VLD3q16b: 
    case ARM::VLD3q32a: 
    case ARM::VLD3q32b: 
    case ARM::VLD3q8a: 
    case ARM::VLD3q8b: printAddrMode6Operand(MI, 4); break;
    }
    return;
    break;
  case ARM::VLD4LNd16:
  case ARM::VLD4LNd32:
  case ARM::VLD4LNd8:
  case ARM::VLD4LNq16a:
  case ARM::VLD4LNq16b:
  case ARM::VLD4LNq32a:
  case ARM::VLD4LNq32b:
    O << '['; 
    printNoHashImmediate(MI, 12); 
    O << "], "; 
    printOperand(MI, 1); 
    O << '['; 
    printNoHashImmediate(MI, 12); 
    O << "], "; 
    printOperand(MI, 2); 
    O << '['; 
    printNoHashImmediate(MI, 12); 
    O << "], "; 
    printOperand(MI, 3); 
    O << '['; 
    printNoHashImmediate(MI, 12); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4); 
    return;
    break;
  case ARM::VMLAD:
  case ARM::VMLAS:
  case ARM::VMLAfd:
  case ARM::VMLAfq:
  case ARM::VMLSD:
  case ARM::VMLSS:
  case ARM::VMLSfd:
  case ARM::VMLSfq:
  case ARM::VNMLAD:
  case ARM::VNMLAS:
  case ARM::VNMLSD:
  case ARM::VNMLSS:
  case ARM::t2MOVCCasr:
  case ARM::t2MOVCClsl:
  case ARM::t2MOVCClsr:
  case ARM::t2MOVCCror:
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    return;
    break;
  case ARM::VMLALslsv2i32:
  case ARM::VMLALslsv4i16:
  case ARM::VMLALsluv2i32:
  case ARM::VMLALsluv4i16:
  case ARM::VMLAslv2i32:
  case ARM::VMLAslv4i16:
  case ARM::VMLAslv4i32:
  case ARM::VMLAslv8i16:
  case ARM::VMLSLslsv2i32:
  case ARM::VMLSLslsv4i16:
  case ARM::VMLSLsluv2i32:
  case ARM::VMLSLsluv4i16:
  case ARM::VMLSslv2i32:
  case ARM::VMLSslv4i16:
  case ARM::VMLSslv4i32:
  case ARM::VMLSslv8i16:
  case ARM::VQDMLALslv2i32:
  case ARM::VQDMLALslv4i16:
  case ARM::VQDMLSLslv2i32:
  case ARM::VQDMLSLslv4i16:
    O << ", "; 
    printOperand(MI, 3); 
    O << '['; 
    printNoHashImmediate(MI, 4); 
    O << ']'; 
    return;
    break;
  case ARM::VMLAslfd:
  case ARM::VMLAslfq:
  case ARM::VMLSslfd:
  case ARM::VMLSslfq:
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    O << '['; 
    printNoHashImmediate(MI, 4); 
    O << ']'; 
    return;
    break;
  case ARM::VMULLslsv2i32:
  case ARM::VMULLslsv4i16:
  case ARM::VMULLsluv2i32:
  case ARM::VMULLsluv4i16:
  case ARM::VMULslv2i32:
  case ARM::VMULslv4i16:
  case ARM::VMULslv4i32:
  case ARM::VMULslv8i16:
  case ARM::VQDMULHslv2i32:
  case ARM::VQDMULHslv4i16:
  case ARM::VQDMULHslv4i32:
  case ARM::VQDMULHslv8i16:
  case ARM::VQDMULLslv2i32:
  case ARM::VQDMULLslv4i16:
  case ARM::VQRDMULHslv2i32:
  case ARM::VQRDMULHslv4i16:
  case ARM::VQRDMULHslv4i32:
  case ARM::VQRDMULHslv8i16:
    O << ", "; 
    printOperand(MI, 2); 
    O << '['; 
    printNoHashImmediate(MI, 3); 
    O << ']'; 
    return;
    break;
  case ARM::VMULslfd:
  case ARM::VMULslfq:
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    O << '['; 
    printNoHashImmediate(MI, 3); 
    O << ']'; 
    return;
    break;
  case ARM::VSETLNi16:
  case ARM::VSETLNi32:
  case ARM::VSETLNi8:
    O << '['; 
    printNoHashImmediate(MI, 3); 
    O << "], "; 
    printOperand(MI, 2); 
    return;
    break;
  case ARM::VST2LNd16:
  case ARM::VST2LNd32:
  case ARM::VST2LNd8:
  case ARM::VST2LNq16a:
  case ARM::VST2LNq16b:
  case ARM::VST2LNq32a:
  case ARM::VST2LNq32b:
    O << '['; 
    printNoHashImmediate(MI, 6); 
    O << "], "; 
    printOperand(MI, 5); 
    O << '['; 
    printNoHashImmediate(MI, 6); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0); 
    return;
    break;
  case ARM::VST2d16:
  case ARM::VST2d32:
  case ARM::VST2d64:
  case ARM::VST2d8:
    O << ", "; 
    printOperand(MI, 5); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0); 
    return;
    break;
  case ARM::VST2q16:
  case ARM::VST2q32:
  case ARM::VST2q8:
  case ARM::VST4d16:
  case ARM::VST4d32:
  case ARM::VST4d64:
  case ARM::VST4d8:
    O << ", "; 
    printOperand(MI, 5); 
    O << ", "; 
    printOperand(MI, 6); 
    O << ", "; 
    printOperand(MI, 7); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0); 
    return;
    break;
  case ARM::VST3LNd16:
  case ARM::VST3LNd32:
  case ARM::VST3LNd8:
  case ARM::VST3LNq16a:
  case ARM::VST3LNq16b:
  case ARM::VST3LNq32a:
  case ARM::VST3LNq32b:
    O << '['; 
    printNoHashImmediate(MI, 7); 
    O << "], "; 
    printOperand(MI, 5); 
    O << '['; 
    printNoHashImmediate(MI, 7); 
    O << "], "; 
    printOperand(MI, 6); 
    O << '['; 
    printNoHashImmediate(MI, 7); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0); 
    return;
    break;
  case ARM::VST3d16:
  case ARM::VST3d32:
  case ARM::VST3d64:
  case ARM::VST3d8:
    O << ", "; 
    printOperand(MI, 5); 
    O << ", "; 
    printOperand(MI, 6); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0); 
    return;
    break;
  case ARM::VST4LNd16:
  case ARM::VST4LNd32:
  case ARM::VST4LNd8:
  case ARM::VST4LNq16a:
  case ARM::VST4LNq16b:
  case ARM::VST4LNq32a:
  case ARM::VST4LNq32b:
    O << '['; 
    printNoHashImmediate(MI, 8); 
    O << "], "; 
    printOperand(MI, 5); 
    O << '['; 
    printNoHashImmediate(MI, 8); 
    O << "], "; 
    printOperand(MI, 6); 
    O << '['; 
    printNoHashImmediate(MI, 8); 
    O << "], "; 
    printOperand(MI, 7); 
    O << '['; 
    printNoHashImmediate(MI, 8); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0); 
    return;
    break;
  case ARM::VST4q16a:
  case ARM::VST4q16b:
  case ARM::VST4q32a:
  case ARM::VST4q32b:
  case ARM::VST4q8a:
  case ARM::VST4q8b:
    O << ", "; 
    printOperand(MI, 8); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1); 
    return;
    break;
  case ARM::VTBL1:
    O << ", {"; 
    printOperand(MI, 1); 
    O << "}, "; 
    printOperand(MI, 2); 
    return;
    break;
  case ARM::VTBL2:
    O << ", {"; 
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    O << "}, "; 
    printOperand(MI, 3); 
    return;
    break;
  case ARM::VTBL3:
    O << ", {"; 
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    O << "}, "; 
    printOperand(MI, 4); 
    return;
    break;
  case ARM::VTBL4:
    O << ", {"; 
    printOperand(MI, 1); 
    O << ", "; 
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    O << ", "; 
    printOperand(MI, 4); 
    O << "}, "; 
    printOperand(MI, 5); 
    return;
    break;
  case ARM::VTBX1:
    O << ", {"; 
    printOperand(MI, 2); 
    O << "}, "; 
    printOperand(MI, 3); 
    return;
    break;
  case ARM::VTBX2:
    O << ", {"; 
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    O << "}, "; 
    printOperand(MI, 4); 
    return;
    break;
  case ARM::VTBX3:
    O << ", {"; 
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    O << ", "; 
    printOperand(MI, 4); 
    O << "}, "; 
    printOperand(MI, 5); 
    return;
    break;
  case ARM::VTBX4:
    O << ", {"; 
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    O << ", "; 
    printOperand(MI, 4); 
    O << ", "; 
    printOperand(MI, 5); 
    O << "}, "; 
    printOperand(MI, 6); 
    return;
    break;
  case ARM::t2LDRpci_pic:
  case ARM::tLDRpci_pic:
    O << "\n"; 
    printPCLabel(MI, 2); 
    O << ":\n\tadd\t"; 
    printOperand(MI, 0); 
    O << ", pc"; 
    return;
    break;
  case ARM::t2LEApcrelJT:
    O << '_'; 
    printNoHashImmediate(MI, 2); 
    return;
    break;
  case ARM::t2SXTBr_rot:
  case ARM::t2SXTHr_rot:
  case ARM::t2UXTB16r_rot:
  case ARM::t2UXTBr_rot:
  case ARM::t2UXTHr_rot:
    printOperand(MI, 1); 
    O << ", ror "; 
    printOperand(MI, 2); 
    return;
    break;
  case ARM::tLEApcrel:
    O << ", #"; 
    printOperand(MI, 1); 
    return;
    break;
  case ARM::tLEApcrelJT:
    O << ", #"; 
    printOperand(MI, 1); 
    O << '_'; 
    printNoHashImmediate(MI, 2); 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *ARMAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 100 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 5, 8, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 
    54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 97, 101, 105, 
    108, 111, 114, 117, 120, 123, 129, 132, 135, 138, 141, 145, 149, 153, 
    157, 161, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192, 195, 199, 
    203, 207, 210, 213, 216, 219, 222, 225, 228, 231, 234, 237, 241, 245, 
    249, 253, 257, 261, 265, 269, 273, 277, 280, 284, 288, 292, 296, 300, 
    304, 308, 312, 316, 320, 323, 327, 331, 334, 337, 340, 343, 346, 349, 
    358, 0
  };

  const char *AsmStrs =
    "cpsr\000d0\000d1\000d10\000d11\000d12\000d13\000d14\000d15\000d16\000d1"
    "7\000d18\000d19\000d2\000d20\000d21\000d22\000d23\000d24\000d25\000d26\000"
    "d27\000d28\000d29\000d3\000d30\000d31\000d4\000d5\000d6\000d7\000d8\000"
    "d9\000fpscr\000lr\000pc\000q0\000q1\000q10\000q11\000q12\000q13\000q14\000"
    "q15\000q2\000q3\000q4\000q5\000q6\000q7\000q8\000q9\000r0\000r1\000r10\000"
    "r11\000r12\000r2\000r3\000r4\000r5\000r6\000r7\000r8\000r9\000s0\000s1\000"
    "s10\000s11\000s12\000s13\000s14\000s15\000s16\000s17\000s18\000s19\000s"
    "2\000s20\000s21\000s22\000s23\000s24\000s25\000s26\000s27\000s28\000s29"
    "\000s3\000s30\000s31\000s4\000s5\000s6\000s7\000s8\000s9\000sINVALID\000"
    "sp\000";
  return AsmStrs+RegAsmOffset[RegNo-1];
}
