//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCAsmPrinter::printInstruction(const MachineInstr *MI) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// DBG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DEBUG_VALUE
    268435469U,	// ADD4
    268435469U,	// ADD8
    268435474U,	// ADDC
    268435474U,	// ADDC8
    268435480U,	// ADDE
    268435480U,	// ADDE8
    268439582U,	// ADDI
    268439582U,	// ADDI8
    268439588U,	// ADDIC
    268439588U,	// ADDIC8
    268439595U,	// ADDICo
    268443699U,	// ADDIS
    268443699U,	// ADDIS8
    268468282U,	// ADDME
    268468282U,	// ADDME8
    268468289U,	// ADDZE
    268468289U,	// ADDZE8
    541065288U,	// ADJCALLSTACKDOWN
    545259592U,	// ADJCALLSTACKUP
    268435529U,	// AND
    268435529U,	// AND8
    268435534U,	// ANDC
    268435534U,	// ANDC8
    268447828U,	// ANDISo
    268447828U,	// ANDISo8
    268447836U,	// ANDIo
    268447836U,	// ANDIo8
    549453896U,	// ATOMIC_CMP_SWAP_I16
    553648200U,	// ATOMIC_CMP_SWAP_I32
    557842504U,	// ATOMIC_CMP_SWAP_I64
    562036808U,	// ATOMIC_CMP_SWAP_I8
    566231112U,	// ATOMIC_LOAD_ADD_I16
    570425416U,	// ATOMIC_LOAD_ADD_I32
    574619720U,	// ATOMIC_LOAD_ADD_I64
    578814024U,	// ATOMIC_LOAD_ADD_I8
    583008328U,	// ATOMIC_LOAD_AND_I16
    587202632U,	// ATOMIC_LOAD_AND_I32
    591396936U,	// ATOMIC_LOAD_AND_I64
    595591240U,	// ATOMIC_LOAD_AND_I8
    599785544U,	// ATOMIC_LOAD_NAND_I16
    603979848U,	// ATOMIC_LOAD_NAND_I32
    608174152U,	// ATOMIC_LOAD_NAND_I64
    612368456U,	// ATOMIC_LOAD_NAND_I8
    616562760U,	// ATOMIC_LOAD_OR_I16
    620757064U,	// ATOMIC_LOAD_OR_I32
    624951368U,	// ATOMIC_LOAD_OR_I64
    629145672U,	// ATOMIC_LOAD_OR_I8
    633339976U,	// ATOMIC_LOAD_SUB_I16
    637534280U,	// ATOMIC_LOAD_SUB_I32
    641728584U,	// ATOMIC_LOAD_SUB_I64
    645922888U,	// ATOMIC_LOAD_SUB_I8
    650117192U,	// ATOMIC_LOAD_XOR_I16
    654311496U,	// ATOMIC_LOAD_XOR_I32
    658505800U,	// ATOMIC_LOAD_XOR_I64
    662700104U,	// ATOMIC_LOAD_XOR_I8
    666894408U,	// ATOMIC_SWAP_I16
    671088712U,	// ATOMIC_SWAP_I32
    675283016U,	// ATOMIC_SWAP_I64
    679477320U,	// ATOMIC_SWAP_I8
    805306467U,	// B
    1220804710U,	// BCC
    104U,	// BCTR
    109U,	// BCTRL8_Darwin
    109U,	// BCTRL8_ELF
    109U,	// BCTRL_Darwin
    109U,	// BCTRL_SVR4
    1493172339U,	// BL8_Darwin
    1493172339U,	// BL8_ELF
    1761607799U,	// BLA8_Darwin
    1761607799U,	// BLA8_ELF
    1761607799U,	// BLA_Darwin
    1761607799U,	// BLA_SVR4
    1228931174U,	// BLR
    1493172339U,	// BL_Darwin
    1493172339U,	// BL_SVR4
    268435580U,	// CMPD
    268439682U,	// CMPDI
    268435593U,	// CMPLD
    268447888U,	// CMPLDI
    268435608U,	// CMPLW
    268447903U,	// CMPLWI
    268435623U,	// CMPW
    268439725U,	// CMPWI
    268468404U,	// CNTLZD
    268468412U,	// CNTLZW
    268435652U,	// CREQV
    268435659U,	// CROR
    268959940U,	// CRSET
    1879048401U,	// DCBA
    1879048407U,	// DCBF
    1879048413U,	// DCBI
    1879048419U,	// DCBST
    1879048426U,	// DCBT
    1879048432U,	// DCBTST
    1879048440U,	// DCBZ
    1879048446U,	// DCBZL
    268435717U,	// DIVD
    268435723U,	// DIVDU
    268435730U,	// DIVW
    268435736U,	// DIVWU
    2147483935U,	// DSS
    292U,	// DSSALL
    2415919403U,	// DST
    2415919403U,	// DST64
    2415919408U,	// DSTST
    2415919408U,	// DSTST64
    2415919415U,	// DSTSTT
    2415919415U,	// DSTSTT64
    2415919423U,	// DSTT
    2415919423U,	// DSTT64
    696254536U,	// DYNALLOC
    700448840U,	// DYNALLOC8
    268435781U,	// EQV
    268435781U,	// EQV8
    268468554U,	// EXTSB
    268468554U,	// EXTSB8
    268468561U,	// EXTSH
    268468561U,	// EXTSH8
    268468568U,	// EXTSW
    268468568U,	// EXTSW_32
    268468568U,	// EXTSW_32_64
    268468575U,	// FABSD
    268468575U,	// FABSS
    268435813U,	// FADD
    268435819U,	// FADDS
    268435813U,	// FADDrtz
    268468594U,	// FCFID
    268435833U,	// FCMPUD
    268435833U,	// FCMPUS
    268468608U,	// FCTIDZ
    268468616U,	// FCTIWZ
    268435856U,	// FDIV
    268435862U,	// FDIVS
    268435869U,	// FMADD
    268435876U,	// FMADDS
    268468652U,	// FMRD
    268468652U,	// FMRS
    268468652U,	// FMRSD
    268435889U,	// FMSUB
    268435896U,	// FMSUBS
    268435904U,	// FMUL
    268435910U,	// FMULS
    268468685U,	// FNABSD
    268468685U,	// FNABSS
    268468692U,	// FNEGD
    268468692U,	// FNEGS
    268435930U,	// FNMADD
    268435938U,	// FNMADDS
    268435947U,	// FNMSUB
    268435955U,	// FNMSUBS
    268468732U,	// FRSP
    268435970U,	// FSELD
    268435970U,	// FSELS
    268468744U,	// FSQRT
    268468751U,	// FSQRTS
    268435991U,	// FSUB
    268435997U,	// FSUBS
    269287972U,	// LA
    269484584U,	// LBZ
    269484584U,	// LBZ8
    269746733U,	// LBZU
    269746733U,	// LBZU8
    270008883U,	// LBZX
    270008883U,	// LBZX8
    270271033U,	// LD
    270008893U,	// LDARX
    270533188U,	// LDU
    270008905U,	// LDX
    436208206U,	// LDinto_toc
    270795321U,	// LDtoc
    599U,	// LDtoc_restore
    269484643U,	// LFD
    269746787U,	// LFDU
    270008936U,	// LFDX
    269484654U,	// LFS
    269746798U,	// LFSU
    270008947U,	// LFSX
    269484665U,	// LHA
    269484665U,	// LHA8
    269746814U,	// LHAU
    269320830U,	// LHAU8
    270008964U,	// LHAX
    270008964U,	// LHAX8
    270008970U,	// LHBRX
    269484689U,	// LHZ
    269484689U,	// LHZ8
    269746838U,	// LHZU
    269746838U,	// LHZU8
    270008988U,	// LHZX
    270008988U,	// LHZX8
    271057570U,	// LI
    271057570U,	// LI8
    271319718U,	// LIS
    271319718U,	// LIS8
    270009003U,	// LVEBX
    270009010U,	// LVEHX
    270009017U,	// LVEWX
    270009024U,	// LVSL
    270009030U,	// LVSR
    270009036U,	// LVX
    270009041U,	// LVXL
    270271191U,	// LWA
    270009052U,	// LWARX
    270009059U,	// LWAX
    270009065U,	// LWBRX
    269484784U,	// LWZ
    269484784U,	// LWZ8
    269746933U,	// LWZU
    269746933U,	// LWZU8
    270009083U,	// LWZX
    270009083U,	// LWZX8
    268468993U,	// MCRF
    419431175U,	// MFCR
    419431181U,	// MFCTR
    419431181U,	// MFCTR8
    419431188U,	// MFFS
    419431194U,	// MFLR
    419431194U,	// MFLR8
    271581959U,	// MFOCRF
    440402720U,	// MFVRSAVE
    419431207U,	// MFVSCR
    2684355375U,	// MTCRF
    419431222U,	// MTCTR
    419431222U,	// MTCTR8
    2952790845U,	// MTFSB0
    2952790853U,	// MTFSB1
    3397387085U,	// MTFSF
    419431252U,	// MTLR
    419431252U,	// MTLR8
    419431258U,	// MTVRSAVE
    419431270U,	// MTVSCR
    268436334U,	// MULHD
    268436341U,	// MULHDU
    268436349U,	// MULHW
    268436356U,	// MULHWU
    268436364U,	// MULLD
    268440467U,	// MULLI
    268436378U,	// MULLW
    3489661043U,	// MovePCtoLR
    3489661043U,	// MovePCtoLR8
    268436385U,	// NAND
    268436385U,	// NAND8
    268469159U,	// NEG
    268469159U,	// NEG8
    940U,	// NOP
    268436400U,	// NOR
    268436400U,	// NOR8
    268436405U,	// OR
    268436405U,	// OR4To8
    268436405U,	// OR8
    268436405U,	// OR8To4
    268436409U,	// ORC
    268436409U,	// ORC8
    268448702U,	// ORI
    268448702U,	// ORI8
    268448707U,	// ORIS
    268448707U,	// ORIS8
    268436425U,	// RLDCL
    268452816U,	// RLDICL
    268452824U,	// RLDICR
    271975392U,	// RLDIMI
    272008168U,	// RLWIMI
    268456944U,	// RLWINM
    268456952U,	// RLWINMo
    268436481U,	// RLWNM
    717226056U,	// SELECT_CC_F4
    717226056U,	// SELECT_CC_F8
    717226056U,	// SELECT_CC_I4
    717226056U,	// SELECT_CC_I8
    717226056U,	// SELECT_CC_VRRC
    268436488U,	// SLD
    268436493U,	// SLW
    721420360U,	// SPILL_CR
    268436498U,	// SRAD
    268452888U,	// SRADI
    268436511U,	// SRAW
    268456997U,	// SRAWI
    268436524U,	// SRD
    268436529U,	// SRW
    269485110U,	// STB
    269485110U,	// STB8
    3409970235U,	// STBU
    3409970235U,	// STBU8
    270009409U,	// STBX
    270009409U,	// STBX8
    270271559U,	// STD
    270009420U,	// STDCX
    3414164564U,	// STDU
    270009434U,	// STDUX
    270009441U,	// STDX
    270009441U,	// STDX_32
    270271559U,	// STD_32
    269485159U,	// STFD
    3409970285U,	// STFDU
    270009460U,	// STFDX
    270009467U,	// STFIWX
    269485187U,	// STFS
    3409970313U,	// STFSU
    270009488U,	// STFSX
    269485207U,	// STH
    269485207U,	// STH8
    270009500U,	// STHBRX
    3409970340U,	// STHU
    3409970340U,	// STHU8
    270009514U,	// STHX
    270009514U,	// STHX8
    270009520U,	// STVEBX
    270009528U,	// STVEHX
    270009536U,	// STVEWX
    270009544U,	// STVX
    270009550U,	// STVXL
    269485269U,	// STW
    269485269U,	// STW8
    270009562U,	// STWBRX
    270009570U,	// STWCX
    3409970410U,	// STWU
    3409970410U,	// STWU8
    268436720U,	// STWUX
    270009591U,	// STWX
    270009591U,	// STWX8
    268436733U,	// SUBF
    268436733U,	// SUBF8
    268436739U,	// SUBFC
    268436739U,	// SUBFC8
    268436746U,	// SUBFE
    268436746U,	// SUBFE8
    268440849U,	// SUBFIC
    268440849U,	// SUBFIC8
    268469529U,	// SUBFME
    268469529U,	// SUBFME8
    268469537U,	// SUBFZE
    268469537U,	// SUBFZE8
    1321U,	// SYNC
    1493172323U,	// TAILB
    1493172323U,	// TAILB8
    1761609006U,	// TAILBA
    1761609006U,	// TAILBA8
    104U,	// TAILBCTR
    104U,	// TAILBCTR8
    1757447474U,	// TCRETURNai
    1757447487U,	// TCRETURNai8
    1489012045U,	// TCRETURNdi
    1489012058U,	// TCRETURNdi8
    415270248U,	// TCRETURNri
    415270261U,	// TCRETURNri8
    1411U,	// TRAP
    268469640U,	// UPDATE_VRSAVE
    268436887U,	// VADDCUW
    268436896U,	// VADDFP
    268436904U,	// VADDSBS
    268436913U,	// VADDSHS
    268436922U,	// VADDSWS
    268436931U,	// VADDUBM
    268436940U,	// VADDUBS
    268436949U,	// VADDUHM
    268436958U,	// VADDUHS
    268436967U,	// VADDUWM
    268436976U,	// VADDUWS
    268436985U,	// VAND
    268436991U,	// VANDC
    268436998U,	// VAVGSB
    268437006U,	// VAVGSH
    268437014U,	// VAVGSW
    268437022U,	// VAVGUB
    268437030U,	// VAVGUH
    268437038U,	// VAVGUW
    272041526U,	// VCFSX
    272041533U,	// VCFUX
    268437060U,	// VCMPBFP
    268437069U,	// VCMPBFPo
    268437079U,	// VCMPEQFP
    268437089U,	// VCMPEQFPo
    268437100U,	// VCMPEQUB
    268437110U,	// VCMPEQUBo
    268437121U,	// VCMPEQUH
    268437131U,	// VCMPEQUHo
    268437142U,	// VCMPEQUW
    268437152U,	// VCMPEQUWo
    268437163U,	// VCMPGEFP
    268437173U,	// VCMPGEFPo
    268437184U,	// VCMPGTFP
    268437194U,	// VCMPGTFPo
    268437205U,	// VCMPGTSB
    268437215U,	// VCMPGTSBo
    268437226U,	// VCMPGTSH
    268437236U,	// VCMPGTSHo
    268437247U,	// VCMPGTSW
    268437257U,	// VCMPGTSWo
    268437268U,	// VCMPGTUB
    268437278U,	// VCMPGTUBo
    268437289U,	// VCMPGTUH
    268437299U,	// VCMPGTUHo
    268437310U,	// VCMPGTUW
    268437320U,	// VCMPGTUWo
    272041811U,	// VCTSXS
    272041819U,	// VCTUXS
    268470115U,	// VEXPTEFP
    268470125U,	// VLOGEFP
    268437366U,	// VMADDFP
    268437375U,	// VMAXFP
    268437383U,	// VMAXSB
    268437391U,	// VMAXSH
    268437399U,	// VMAXSW
    268437407U,	// VMAXUB
    268437415U,	// VMAXUH
    268437423U,	// VMAXUW
    268437431U,	// VMHADDSHS
    268437442U,	// VMHRADDSHS
    268437454U,	// VMINFP
    268437462U,	// VMINSB
    268437470U,	// VMINSH
    268437478U,	// VMINSW
    268437486U,	// VMINUB
    268437494U,	// VMINUH
    268437502U,	// VMINUW
    268437510U,	// VMLADDUHM
    268437521U,	// VMRGHB
    268437529U,	// VMRGHH
    268437537U,	// VMRGHW
    268437545U,	// VMRGLB
    268437553U,	// VMRGLH
    268437561U,	// VMRGLW
    268437569U,	// VMSUMMBM
    268437579U,	// VMSUMSHM
    268437589U,	// VMSUMSHS
    268437599U,	// VMSUMUBM
    268437609U,	// VMSUMUHM
    268437619U,	// VMSUMUHS
    268437629U,	// VMULESB
    268437638U,	// VMULESH
    268437647U,	// VMULEUB
    268437656U,	// VMULEUH
    268437665U,	// VMULOSB
    268437674U,	// VMULOSH
    268437683U,	// VMULOUB
    268437692U,	// VMULOUH
    268437701U,	// VNMSUBFP
    268437711U,	// VNOR
    268437717U,	// VOR
    268437722U,	// VPERM
    268437729U,	// VPKPX
    268437736U,	// VPKSHSS
    268437745U,	// VPKSHUS
    268437754U,	// VPKSWSS
    268437763U,	// VPKSWUS
    268437772U,	// VPKUHUM
    268437781U,	// VPKUHUS
    268437790U,	// VPKUWUM
    268437799U,	// VPKUWUS
    268470576U,	// VREFP
    268470583U,	// VRFIM
    268470590U,	// VRFIN
    268470597U,	// VRFIP
    268470604U,	// VRFIZ
    268437843U,	// VRLB
    268437849U,	// VRLH
    268437855U,	// VRLW
    268470629U,	// VRSQRTEFP
    268437872U,	// VSEL
    268437878U,	// VSL
    268437883U,	// VSLB
    268437889U,	// VSLDOI
    268437897U,	// VSLH
    268437903U,	// VSLO
    268437909U,	// VSLW
    272042395U,	// VSPLTB
    272042403U,	// VSPLTH
    272107947U,	// VSPLTISB
    272107957U,	// VSPLTISH
    272107967U,	// VSPLTISW
    272042441U,	// VSPLTW
    268437969U,	// VSR
    268437974U,	// VSRAB
    268437981U,	// VSRAH
    268437988U,	// VSRAW
    268437995U,	// VSRB
    268438001U,	// VSRH
    268438007U,	// VSRO
    268438013U,	// VSRW
    268438019U,	// VSUBCUW
    268438028U,	// VSUBFP
    268438036U,	// VSUBSBS
    268438045U,	// VSUBSHS
    268438054U,	// VSUBSWS
    268438063U,	// VSUBUBM
    268438072U,	// VSUBUBS
    268438081U,	// VSUBUHM
    268438090U,	// VSUBUHS
    268438099U,	// VSUBUWM
    268438108U,	// VSUBUWS
    268438117U,	// VSUM2SWS
    268438127U,	// VSUM4SBS
    268438137U,	// VSUM4SHS
    268438147U,	// VSUM4UBS
    268438157U,	// VSUMSWS
    268470934U,	// VUPKHPX
    268470943U,	// VUPKHSB
    268470952U,	// VUPKHSH
    268470961U,	// VUPKLPX
    268470970U,	// VUPKLSB
    268470979U,	// VUPKLSH
    268438220U,	// VXOR
    268962508U,	// V_SET0
    268438226U,	// XOR
    268438226U,	// XOR8
    268450519U,	// XORI
    268450519U,	// XORI8
    268450525U,	// XORIS
    268450525U,	// XORIS8
    0U
  };

  const char *AsmStrs = 
    "DEBUG_VALUE\000add \000addc \000adde \000addi \000addic \000addic. \000"
    "addis \000addme \000addze \000\000and \000andc \000andis. \000andi. \000"
    "b \000b\000bctr\000bctrl\000bl \000bla \000cmpd \000cmpdi \000cmpld \000"
    "cmpldi \000cmplw \000cmplwi \000cmpw \000cmpwi \000cntlzd \000cntlzw \000"
    "creqv \000cror \000dcba \000dcbf \000dcbi \000dcbst \000dcbt \000dcbtst"
    " \000dcbz \000dcbzl \000divd \000divdu \000divw \000divwu \000dss \000d"
    "ssall\000dst \000dstst \000dststt \000dstt \000eqv \000extsb \000extsh "
    "\000extsw \000fabs \000fadd \000fadds \000fcfid \000fcmpu \000fctidz \000"
    "fctiwz \000fdiv \000fdivs \000fmadd \000fmadds \000fmr \000fmsub \000fm"
    "subs \000fmul \000fmuls \000fnabs \000fneg \000fnmadd \000fnmadds \000f"
    "nmsub \000fnmsubs \000frsp \000fsel \000fsqrt \000fsqrts \000fsub \000f"
    "subs \000la \000lbz \000lbzu \000lbzx \000ld \000ldarx \000ldu \000ldx "
    "\000ld 2, 8(\000ld 2, 40(1)\000lfd \000lfdx \000lfs \000lfsx \000lha \000"
    "lhau \000lhax \000lhbrx \000lhz \000lhzu \000lhzx \000li \000lis \000lv"
    "ebx \000lvehx \000lvewx \000lvsl \000lvsr \000lvx \000lvxl \000lwa \000"
    "lwarx \000lwax \000lwbrx \000lwz \000lwzu \000lwzx \000mcrf \000mfcr \000"
    "mfctr \000mffs \000mflr \000mfspr \000mfvscr \000mtcrf \000mtctr \000mt"
    "fsb0 \000mtfsb1 \000mtfsf \000mtlr \000mtspr 256, \000mtvscr \000mulhd "
    "\000mulhdu \000mulhw \000mulhwu \000mulld \000mulli \000mullw \000nand "
    "\000neg \000nop\000nor \000or \000orc \000ori \000oris \000rldcl \000rl"
    "dicl \000rldicr \000rldimi \000rlwimi \000rlwinm \000rlwinm. \000rlwnm "
    "\000sld \000slw \000srad \000sradi \000sraw \000srawi \000srd \000srw \000"
    "stb \000stbu \000stbx \000std \000stdcx. \000stdu \000stdux \000stdx \000"
    "stfd \000stfdu \000stfdx \000stfiwx \000stfs \000stfsu \000stfsx \000st"
    "h \000sthbrx \000sthu \000sthx \000stvebx \000stvehx \000stvewx \000stv"
    "x \000stvxl \000stw \000stwbrx \000stwcx. \000stwu \000stwux \000stwx \000"
    "subf \000subfc \000subfe \000subfic \000subfme \000subfze \000sync\000b"
    "a \000#TC_RETURNa \000#TC_RETURNa8 \000#TC_RETURNd \000#TC_RETURNd8 \000"
    "#TC_RETURNr \000#TC_RETURNr8 \000trap\000UPDATE_VRSAVE \000vaddcuw \000"
    "vaddfp \000vaddsbs \000vaddshs \000vaddsws \000vaddubm \000vaddubs \000"
    "vadduhm \000vadduhs \000vadduwm \000vadduws \000vand \000vandc \000vavg"
    "sb \000vavgsh \000vavgsw \000vavgub \000vavguh \000vavguw \000vcfsx \000"
    "vcfux \000vcmpbfp \000vcmpbfp. \000vcmpeqfp \000vcmpeqfp. \000vcmpequb "
    "\000vcmpequb. \000vcmpequh \000vcmpequh. \000vcmpequw \000vcmpequw. \000"
    "vcmpgefp \000vcmpgefp. \000vcmpgtfp \000vcmpgtfp. \000vcmpgtsb \000vcmp"
    "gtsb. \000vcmpgtsh \000vcmpgtsh. \000vcmpgtsw \000vcmpgtsw. \000vcmpgtu"
    "b \000vcmpgtub. \000vcmpgtuh \000vcmpgtuh. \000vcmpgtuw \000vcmpgtuw. \000"
    "vctsxs \000vctuxs \000vexptefp \000vlogefp \000vmaddfp \000vmaxfp \000v"
    "maxsb \000vmaxsh \000vmaxsw \000vmaxub \000vmaxuh \000vmaxuw \000vmhadd"
    "shs \000vmhraddshs \000vminfp \000vminsb \000vminsh \000vminsw \000vmin"
    "ub \000vminuh \000vminuw \000vmladduhm \000vmrghb \000vmrghh \000vmrghw"
    " \000vmrglb \000vmrglh \000vmrglw \000vmsummbm \000vmsumshm \000vmsumsh"
    "s \000vmsumubm \000vmsumuhm \000vmsumuhs \000vmulesb \000vmulesh \000vm"
    "uleub \000vmuleuh \000vmulosb \000vmulosh \000vmuloub \000vmulouh \000v"
    "nmsubfp \000vnor \000vor \000vperm \000vpkpx \000vpkshss \000vpkshus \000"
    "vpkswss \000vpkswus \000vpkuhum \000vpkuhus \000vpkuwum \000vpkuwus \000"
    "vrefp \000vrfim \000vrfin \000vrfip \000vrfiz \000vrlb \000vrlh \000vrl"
    "w \000vrsqrtefp \000vsel \000vsl \000vslb \000vsldoi \000vslh \000vslo "
    "\000vslw \000vspltb \000vsplth \000vspltisb \000vspltish \000vspltisw \000"
    "vspltw \000vsr \000vsrab \000vsrah \000vsraw \000vsrb \000vsrh \000vsro"
    " \000vsrw \000vsubcuw \000vsubfp \000vsubsbs \000vsubshs \000vsubsws \000"
    "vsububm \000vsububs \000vsubuhm \000vsubuhs \000vsubuwm \000vsubuws \000"
    "vsum2sws \000vsum4sbs \000vsum4shs \000vsum4ubs \000vsumsws \000vupkhpx"
    " \000vupkhsb \000vupkhsh \000vupklpx \000vupklsb \000vupklsh \000vxor \000"
    "xor \000xori \000xoris \000";


#ifndef NO_ASM_WRITER_BOILERPLATE
  if (MI->getOpcode() == TargetInstrInfo::INLINEASM) {
    printInlineAsm(MI);
    return;
  } else if (MI->isLabel()) {
    printLabel(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::IMPLICIT_DEF) {
    printImplicitDef(MI);
    return;
  } else if (MI->getOpcode() == TargetInstrInfo::KILL) {
    printKill(MI);
    return;
  }


#endif
  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 28) & 15) {
  default:   // unreachable.
  case 0:
    // DEBUG_VALUE, BCTR, BCTRL8_Darwin, BCTRL8_ELF, BCTRL_Darwin, BCTRL_SVR4...
    return;
    break;
  case 1:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    printOperand(MI, 0); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP...
    PrintSpecial(MI, "comment"); 
    break;
  case 3:
    // B
    printBranchOperand(MI, 0); 
    return;
    break;
  case 4:
    // BCC, BLR
    printPredicateOperand(MI, 0, "cc"); 
    break;
  case 5:
    // BL8_Darwin, BL8_ELF, BL_Darwin, BL_SVR4, TAILB, TAILB8, TCRETURNdi, TC...
    printCallOperand(MI, 0); 
    break;
  case 6:
    // BLA8_Darwin, BLA8_ELF, BLA_Darwin, BLA_SVR4, TAILBA, TAILBA8, TCRETURN...
    printAbsAddrOperand(MI, 0); 
    break;
  case 7:
    // DCBA, DCBF, DCBI, DCBST, DCBT, DCBTST, DCBZ, DCBZL
    printMemRegReg(MI, 0); 
    return;
    break;
  case 8:
    // DSS
    printU5ImmOperand(MI, 1); 
    return;
    break;
  case 9:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    O << ", "; 
    printU5ImmOperand(MI, 1); 
    return;
    break;
  case 10:
    // MTCRF
    printcrbitm(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    return;
    break;
  case 11:
    // MTFSB0, MTFSB1
    printU5ImmOperand(MI, 0); 
    return;
    break;
  case 12:
    // MTFSF, STBU, STBU8, STDU, STFDU, STFSU, STHU, STHU8, STWU, STWU8
    printOperand(MI, 1); 
    O << ", "; 
    break;
  case 13:
    // MovePCtoLR, MovePCtoLR8
    printPICLabel(MI, 0); 
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 47 unique commands.
  switch ((Bits >> 22) & 63) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN"; 
    return;
    break;
  case 2:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP"; 
    return;
    break;
  case 3:
    // ATOMIC_CMP_SWAP_I16
    O << " ATOMIC_CMP_SWAP_I16 PSEUDO!"; 
    return;
    break;
  case 4:
    // ATOMIC_CMP_SWAP_I32
    O << " ATOMIC_CMP_SWAP_I32 PSEUDO!"; 
    return;
    break;
  case 5:
    // ATOMIC_CMP_SWAP_I64
    O << " ATOMIC_CMP_SWAP_I64 PSEUDO!"; 
    return;
    break;
  case 6:
    // ATOMIC_CMP_SWAP_I8
    O << " ATOMIC_CMP_SWAP_I8 PSEUDO!"; 
    return;
    break;
  case 7:
    // ATOMIC_LOAD_ADD_I16
    O << " ATOMIC_LOAD_ADD_I16 PSEUDO!"; 
    return;
    break;
  case 8:
    // ATOMIC_LOAD_ADD_I32
    O << " ATOMIC_LOAD_ADD_I32 PSEUDO!"; 
    return;
    break;
  case 9:
    // ATOMIC_LOAD_ADD_I64
    O << " ATOMIC_LOAD_ADD_I64 PSEUDO!"; 
    return;
    break;
  case 10:
    // ATOMIC_LOAD_ADD_I8
    O << " ATOMIC_LOAD_ADD_I8 PSEUDO!"; 
    return;
    break;
  case 11:
    // ATOMIC_LOAD_AND_I16
    O << " ATOMIC_LOAD_AND_I16 PSEUDO!"; 
    return;
    break;
  case 12:
    // ATOMIC_LOAD_AND_I32
    O << " ATOMIC_LOAD_AND_I32 PSEUDO!"; 
    return;
    break;
  case 13:
    // ATOMIC_LOAD_AND_I64
    O << " ATOMIC_LOAD_AND_I64 PSEUDO!"; 
    return;
    break;
  case 14:
    // ATOMIC_LOAD_AND_I8
    O << " ATOMIC_LOAD_AND_I8 PSEUDO!"; 
    return;
    break;
  case 15:
    // ATOMIC_LOAD_NAND_I16
    O << " ATOMIC_LOAD_NAND_I16 PSEUDO!"; 
    return;
    break;
  case 16:
    // ATOMIC_LOAD_NAND_I32
    O << " ATOMIC_LOAD_NAND_I32 PSEUDO!"; 
    return;
    break;
  case 17:
    // ATOMIC_LOAD_NAND_I64
    O << " ATOMIC_LOAD_NAND_I64 PSEUDO!"; 
    return;
    break;
  case 18:
    // ATOMIC_LOAD_NAND_I8
    O << " ATOMIC_LOAD_NAND_I8 PSEUDO!"; 
    return;
    break;
  case 19:
    // ATOMIC_LOAD_OR_I16
    O << " ATOMIC_LOAD_OR_I16 PSEUDO!"; 
    return;
    break;
  case 20:
    // ATOMIC_LOAD_OR_I32
    O << " ATOMIC_LOAD_OR_I32 PSEUDO!"; 
    return;
    break;
  case 21:
    // ATOMIC_LOAD_OR_I64
    O << " ATOMIC_LOAD_OR_I64 PSEUDO!"; 
    return;
    break;
  case 22:
    // ATOMIC_LOAD_OR_I8
    O << " ATOMIC_LOAD_OR_I8 PSEUDO!"; 
    return;
    break;
  case 23:
    // ATOMIC_LOAD_SUB_I16
    O << " ATOMIC_LOAD_SUB_I16 PSEUDO!"; 
    return;
    break;
  case 24:
    // ATOMIC_LOAD_SUB_I32
    O << " ATOMIC_LOAD_SUB_I32 PSEUDO!"; 
    return;
    break;
  case 25:
    // ATOMIC_LOAD_SUB_I64
    O << " ATOMIC_LOAD_SUB_I64 PSEUDO!"; 
    return;
    break;
  case 26:
    // ATOMIC_LOAD_SUB_I8
    O << " ATOMIC_LOAD_SUB_I8 PSEUDO!"; 
    return;
    break;
  case 27:
    // ATOMIC_LOAD_XOR_I16
    O << " ATOMIC_LOAD_XOR_I16 PSEUDO!"; 
    return;
    break;
  case 28:
    // ATOMIC_LOAD_XOR_I32
    O << " ATOMIC_LOAD_XOR_I32 PSEUDO!"; 
    return;
    break;
  case 29:
    // ATOMIC_LOAD_XOR_I64
    O << " ATOMIC_LOAD_XOR_I64 PSEUDO!"; 
    return;
    break;
  case 30:
    // ATOMIC_LOAD_XOR_I8
    O << " ATOMIC_LOAD_XOR_I8 PSEUDO!"; 
    return;
    break;
  case 31:
    // ATOMIC_SWAP_I16
    O << " ATOMIC_SWAP_I16 PSEUDO!"; 
    return;
    break;
  case 32:
    // ATOMIC_SWAP_I32
    O << " ATOMIC_SWAP_I32 PSEUDO!"; 
    return;
    break;
  case 33:
    // ATOMIC_SWAP_I64
    O << " ATOMIC_SWAP_I64 PSEUDO!"; 
    return;
    break;
  case 34:
    // ATOMIC_SWAP_I8
    O << " ATOMIC_SWAP_I8 PSEUDO!"; 
    return;
    break;
  case 35:
    // BCC, TCRETURNai, TCRETURNai8, TCRETURNdi, TCRETURNdi8, TCRETURNri, TCR...
    O << ' '; 
    break;
  case 36:
    // BL8_Darwin, BL8_ELF, BLA8_Darwin, BLA8_ELF, BLA_Darwin, BLA_SVR4, BL_D...
    return;
    break;
  case 37:
    // BLR
    O << "lr "; 
    printPredicateOperand(MI, 0, "reg"); 
    return;
    break;
  case 38:
    // DYNALLOC
    O << " DYNALLOC "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printMemRegImm(MI, 2); 
    return;
    break;
  case 39:
    // DYNALLOC8
    O << " DYNALLOC8 "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printMemRegImm(MI, 2); 
    return;
    break;
  case 40:
    // LDinto_toc
    O << ')'; 
    return;
    break;
  case 41:
    // MFVRSAVE
    O << ", 256"; 
    return;
    break;
  case 42:
    // MTFSF
    printOperand(MI, 2); 
    return;
    break;
  case 43:
    // SELECT_CC_F4, SELECT_CC_F8, SELECT_CC_I4, SELECT_CC_I8, SELECT_CC_VRRC
    O << " SELECT_CC PSEUDO!"; 
    return;
    break;
  case 44:
    // SPILL_CR
    O << " SPILL_CR "; 
    printOperand(MI, 0); 
    O << ' '; 
    printMemRegImm(MI, 1); 
    return;
    break;
  case 45:
    // STBU, STBU8, STFDU, STFSU, STHU, STHU8, STWU, STWU8
    printSymbolLo(MI, 2); 
    O << '('; 
    printOperand(MI, 3); 
    O << ')'; 
    return;
    break;
  case 46:
    // STDU
    printS16X4ImmOperand(MI, 2); 
    O << '('; 
    printOperand(MI, 3); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 18) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    printOperand(MI, 1); 
    break;
  case 1:
    // BCC
    printPredicateOperand(MI, 0, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2); 
    return;
    break;
  case 2:
    // CRSET, V_SET0
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 0); 
    return;
    break;
  case 3:
    // LA, LHAU8
    printSymbolLo(MI, 2); 
    O << '('; 
    break;
  case 4:
    // LBZ, LBZ8, LFD, LFS, LHA, LHA8, LHZ, LHZ8, LWZ, LWZ8, STB, STB8, STFD,...
    printMemRegImm(MI, 1); 
    return;
    break;
  case 5:
    // LBZU, LBZU8, LFDU, LFSU, LHAU, LHZU, LHZU8, LWZU, LWZU8
    printMemRegImm(MI, 2); 
    return;
    break;
  case 6:
    // LBZX, LBZX8, LDARX, LDX, LFDX, LFSX, LHAX, LHAX8, LHBRX, LHZX, LHZX8, ...
    printMemRegReg(MI, 1); 
    return;
    break;
  case 7:
    // LD, LWA, STD, STD_32
    printMemRegImmShifted(MI, 1); 
    return;
    break;
  case 8:
    // LDU
    printMemRegImmShifted(MI, 2); 
    return;
    break;
  case 9:
    // LDtoc
    printTOCEntryLabel(MI, 1); 
    O << '('; 
    printOperand(MI, 2); 
    O << ')'; 
    return;
    break;
  case 10:
    // LI, LI8
    printSymbolLo(MI, 1); 
    return;
    break;
  case 11:
    // LIS, LIS8
    printSymbolHi(MI, 1); 
    return;
    break;
  case 12:
    // MFOCRF
    printcrbitm(MI, 1); 
    return;
    break;
  case 13:
    // RLDIMI, RLWIMI, VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printOperand(MI, 2); 
    O << ", "; 
    break;
  case 14:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1); 
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 15) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    O << ", "; 
    break;
  case 1:
    // ADDME, ADDME8, ADDZE, ADDZE8, CNTLZD, CNTLZW, EXTSB, EXTSB8, EXTSH, EX...
    return;
    break;
  case 2:
    // LA
    printOperand(MI, 1); 
    O << ')'; 
    return;
    break;
  case 3:
    // LHAU8
    printOperand(MI, 3); 
    O << ')'; 
    return;
    break;
  case 4:
    // RLDIMI
    printU6ImmOperand(MI, 3); 
    O << ", "; 
    printU6ImmOperand(MI, 4); 
    return;
    break;
  case 5:
    // RLWIMI
    printU5ImmOperand(MI, 3); 
    O << ", "; 
    printU5ImmOperand(MI, 4); 
    O << ", "; 
    printU5ImmOperand(MI, 5); 
    return;
    break;
  case 6:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 12) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, AND, AND8, ANDC, ANDC8, CMPD, CM...
    printOperand(MI, 2); 
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, CMPDI, CMPWI, MULLI, SUBFIC, SUBFI...
    printS16ImmOperand(MI, 2); 
    return;
    break;
  case 2:
    // ADDIS, ADDIS8
    printSymbolHi(MI, 2); 
    return;
    break;
  case 3:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2); 
    return;
    break;
  case 4:
    // RLDICL, RLDICR, SRADI
    printU6ImmOperand(MI, 2); 
    break;
  case 5:
    // RLWINM, RLWINMo, SRAWI
    printU5ImmOperand(MI, 2); 
    break;
  }

  switch (MI->getOpcode()) {
  case PPC::ADD4:
  case PPC::ADD8:
  case PPC::ADDC:
  case PPC::ADDC8:
  case PPC::ADDE:
  case PPC::ADDE8:
  case PPC::AND:
  case PPC::AND8:
  case PPC::ANDC:
  case PPC::ANDC8:
  case PPC::CMPD:
  case PPC::CMPLD:
  case PPC::CMPLW:
  case PPC::CMPW:
  case PPC::CREQV:
  case PPC::CROR:
  case PPC::DIVD:
  case PPC::DIVDU:
  case PPC::DIVW:
  case PPC::DIVWU:
  case PPC::EQV:
  case PPC::EQV8:
  case PPC::FADD:
  case PPC::FADDS:
  case PPC::FADDrtz:
  case PPC::FCMPUD:
  case PPC::FCMPUS:
  case PPC::FDIV:
  case PPC::FDIVS:
  case PPC::FMUL:
  case PPC::FMULS:
  case PPC::FSUB:
  case PPC::FSUBS:
  case PPC::MULHD:
  case PPC::MULHDU:
  case PPC::MULHW:
  case PPC::MULHWU:
  case PPC::MULLD:
  case PPC::MULLW:
  case PPC::NAND:
  case PPC::NAND8:
  case PPC::NOR:
  case PPC::NOR8:
  case PPC::OR:
  case PPC::OR4To8:
  case PPC::OR8:
  case PPC::OR8To4:
  case PPC::ORC:
  case PPC::ORC8:
  case PPC::SLD:
  case PPC::SLW:
  case PPC::SRAD:
  case PPC::SRADI:
  case PPC::SRAW:
  case PPC::SRAWI:
  case PPC::SRD:
  case PPC::SRW:
  case PPC::STWUX:
  case PPC::SUBF:
  case PPC::SUBF8:
  case PPC::SUBFC:
  case PPC::SUBFC8:
  case PPC::SUBFE:
  case PPC::SUBFE8:
  case PPC::VADDCUW:
  case PPC::VADDFP:
  case PPC::VADDSBS:
  case PPC::VADDSHS:
  case PPC::VADDSWS:
  case PPC::VADDUBM:
  case PPC::VADDUBS:
  case PPC::VADDUHM:
  case PPC::VADDUHS:
  case PPC::VADDUWM:
  case PPC::VADDUWS:
  case PPC::VAND:
  case PPC::VANDC:
  case PPC::VAVGSB:
  case PPC::VAVGSH:
  case PPC::VAVGSW:
  case PPC::VAVGUB:
  case PPC::VAVGUH:
  case PPC::VAVGUW:
  case PPC::VCMPBFP:
  case PPC::VCMPBFPo:
  case PPC::VCMPEQFP:
  case PPC::VCMPEQFPo:
  case PPC::VCMPEQUB:
  case PPC::VCMPEQUBo:
  case PPC::VCMPEQUH:
  case PPC::VCMPEQUHo:
  case PPC::VCMPEQUW:
  case PPC::VCMPEQUWo:
  case PPC::VCMPGEFP:
  case PPC::VCMPGEFPo:
  case PPC::VCMPGTFP:
  case PPC::VCMPGTFPo:
  case PPC::VCMPGTSB:
  case PPC::VCMPGTSBo:
  case PPC::VCMPGTSH:
  case PPC::VCMPGTSHo:
  case PPC::VCMPGTSW:
  case PPC::VCMPGTSWo:
  case PPC::VCMPGTUB:
  case PPC::VCMPGTUBo:
  case PPC::VCMPGTUH:
  case PPC::VCMPGTUHo:
  case PPC::VCMPGTUW:
  case PPC::VCMPGTUWo:
  case PPC::VMAXFP:
  case PPC::VMAXSB:
  case PPC::VMAXSH:
  case PPC::VMAXSW:
  case PPC::VMAXUB:
  case PPC::VMAXUH:
  case PPC::VMAXUW:
  case PPC::VMINFP:
  case PPC::VMINSB:
  case PPC::VMINSH:
  case PPC::VMINSW:
  case PPC::VMINUB:
  case PPC::VMINUH:
  case PPC::VMINUW:
  case PPC::VMRGHB:
  case PPC::VMRGHH:
  case PPC::VMRGHW:
  case PPC::VMRGLB:
  case PPC::VMRGLH:
  case PPC::VMRGLW:
  case PPC::VMULESB:
  case PPC::VMULESH:
  case PPC::VMULEUB:
  case PPC::VMULEUH:
  case PPC::VMULOSB:
  case PPC::VMULOSH:
  case PPC::VMULOUB:
  case PPC::VMULOUH:
  case PPC::VNOR:
  case PPC::VOR:
  case PPC::VPKPX:
  case PPC::VPKSHSS:
  case PPC::VPKSHUS:
  case PPC::VPKSWSS:
  case PPC::VPKSWUS:
  case PPC::VPKUHUM:
  case PPC::VPKUHUS:
  case PPC::VPKUWUM:
  case PPC::VPKUWUS:
  case PPC::VRLB:
  case PPC::VRLH:
  case PPC::VRLW:
  case PPC::VSL:
  case PPC::VSLB:
  case PPC::VSLH:
  case PPC::VSLO:
  case PPC::VSLW:
  case PPC::VSR:
  case PPC::VSRAB:
  case PPC::VSRAH:
  case PPC::VSRAW:
  case PPC::VSRB:
  case PPC::VSRH:
  case PPC::VSRO:
  case PPC::VSRW:
  case PPC::VSUBCUW:
  case PPC::VSUBFP:
  case PPC::VSUBSBS:
  case PPC::VSUBSHS:
  case PPC::VSUBSWS:
  case PPC::VSUBUBM:
  case PPC::VSUBUBS:
  case PPC::VSUBUHM:
  case PPC::VSUBUHS:
  case PPC::VSUBUWM:
  case PPC::VSUBUWS:
  case PPC::VSUM2SWS:
  case PPC::VSUM4SBS:
  case PPC::VSUM4SHS:
  case PPC::VSUM4UBS:
  case PPC::VSUMSWS:
  case PPC::VXOR:
  case PPC::XOR:
  case PPC::XOR8:
    return;
    break;
  case PPC::FMADD:
  case PPC::FMADDS:
  case PPC::FMSUB:
  case PPC::FMSUBS:
  case PPC::FNMADD:
  case PPC::FNMADDS:
  case PPC::FNMSUB:
  case PPC::FNMSUBS:
  case PPC::FSELD:
  case PPC::FSELS:
  case PPC::RLDCL:
  case PPC::RLDICL:
  case PPC::RLDICR:
  case PPC::VMADDFP:
  case PPC::VMHADDSHS:
  case PPC::VMHRADDSHS:
  case PPC::VMLADDUHM:
  case PPC::VMSUMMBM:
  case PPC::VMSUMSHM:
  case PPC::VMSUMSHS:
  case PPC::VMSUMUBM:
  case PPC::VMSUMUHM:
  case PPC::VMSUMUHS:
  case PPC::VNMSUBFP:
  case PPC::VPERM:
  case PPC::VSEL:
  case PPC::VSLDOI:
    O << ", "; 
    switch (MI->getOpcode()) {
    case PPC::FMADD: 
    case PPC::FMADDS: 
    case PPC::FMSUB: 
    case PPC::FMSUBS: 
    case PPC::FNMADD: 
    case PPC::FNMADDS: 
    case PPC::FNMSUB: 
    case PPC::FNMSUBS: 
    case PPC::FSELD: 
    case PPC::FSELS: 
    case PPC::VMADDFP: 
    case PPC::VMHADDSHS: 
    case PPC::VMHRADDSHS: 
    case PPC::VMLADDUHM: 
    case PPC::VMSUMMBM: 
    case PPC::VMSUMSHM: 
    case PPC::VMSUMSHS: 
    case PPC::VMSUMUBM: 
    case PPC::VMSUMUHM: 
    case PPC::VMSUMUHS: 
    case PPC::VNMSUBFP: 
    case PPC::VPERM: 
    case PPC::VSEL: printOperand(MI, 3); break;
    case PPC::RLDCL: 
    case PPC::RLDICL: 
    case PPC::RLDICR: printU6ImmOperand(MI, 3); break;
    case PPC::VSLDOI: printU5ImmOperand(MI, 3); break;
    }
    return;
    break;
  case PPC::RLWINM:
  case PPC::RLWINMo:
  case PPC::RLWNM:
    O << ", "; 
    printU5ImmOperand(MI, 3); 
    O << ", "; 
    printU5ImmOperand(MI, 4); 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 176 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 3, 7, 9, 11, 13, 15, 19, 21, 23, 25, 27, 31, 34, 
    36, 38, 41, 45, 48, 51, 54, 57, 61, 64, 67, 70, 73, 77, 
    80, 83, 86, 89, 93, 96, 99, 102, 105, 109, 112, 115, 118, 121, 
    121, 125, 128, 131, 135, 139, 143, 147, 151, 155, 159, 163, 167, 171, 
    174, 178, 182, 186, 190, 194, 198, 202, 206, 210, 214, 217, 221, 225, 
    228, 231, 234, 237, 240, 243, 243, 246, 249, 252, 256, 260, 264, 268, 
    272, 276, 280, 284, 288, 292, 295, 299, 303, 307, 311, 315, 319, 323, 
    327, 331, 335, 338, 342, 346, 349, 352, 355, 358, 361, 364, 382, 385, 
    388, 392, 396, 400, 404, 408, 412, 416, 420, 424, 428, 431, 435, 439, 
    443, 447, 451, 455, 459, 463, 467, 471, 474, 478, 482, 485, 488, 491, 
    494, 497, 500, 246, 249, 252, 256, 260, 264, 268, 272, 276, 280, 284, 
    288, 292, 295, 299, 303, 307, 311, 315, 319, 323, 327, 331, 335, 338, 
    342, 346, 349, 352, 355, 358, 361, 0
  };

  const char *AsmStrs =
    "ca\000cr0\0002\0001\0000\0003\000cr1\0006\0005\0004\0007\000cr2\00010\000"
    "9\0008\00011\000cr3\00014\00013\00012\00015\000cr4\00018\00017\00016\000"
    "19\000cr5\00022\00021\00020\00023\000cr6\00026\00025\00024\00027\000cr7"
    "\00030\00029\00028\00031\000ctr\000f0\000f1\000f10\000f11\000f12\000f13"
    "\000f14\000f15\000f16\000f17\000f18\000f19\000f2\000f20\000f21\000f22\000"
    "f23\000f24\000f25\000f26\000f27\000f28\000f29\000f3\000f30\000f31\000f4"
    "\000f5\000f6\000f7\000f8\000f9\000lr\000r0\000r1\000r10\000r11\000r12\000"
    "r13\000r14\000r15\000r16\000r17\000r18\000r19\000r2\000r20\000r21\000r2"
    "2\000r23\000r24\000r25\000r26\000r27\000r28\000r29\000r3\000r30\000r31\000"
    "r4\000r5\000r6\000r7\000r8\000r9\000**ROUNDING MODE**\000v0\000v1\000v1"
    "0\000v11\000v12\000v13\000v14\000v15\000v16\000v17\000v18\000v19\000v2\000"
    "v20\000v21\000v22\000v23\000v24\000v25\000v26\000v27\000v28\000v29\000v"
    "3\000v30\000v31\000v4\000v5\000v6\000v7\000v8\000v9\000VRsave\000";
  return AsmStrs+RegAsmOffset[RegNo-1];
}
